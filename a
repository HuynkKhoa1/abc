    if not script_key then
        loadstring([[
            function LPH_NO_VIRTUALIZE(f) return f end;
        ]])();
    else
        queue_on_teleport([[
            script_key="]] .. script_key .. [[";
            loadstring(game:HttpGet("https://api.luarmor.net/files/v3/loaders/5642a4021ffce9ac471740c6224e2e82.lua"))()
        ]])
    end

    repeat task.wait() until game:IsLoaded()

    --[[


      _______  __     __  _____    ______           __      __   _____    ____    _    _   _      
     |__   __| \ \   / / |  __ \  |  ____|  _      / /     / /  / ____|  / __ \  | |  | | | |     
        | |     \ \_/ /  | |__) | | |__    (_)    / /     / /  | (___   | |  | | | |  | | | |     
        | |      \   /   |  ___/  |  __|         / /     / /    \___ \  | |  | | | |  | | | |     
        | |       | |    | |      | |____   _   / /     / /     ____) | | |__| | | |__| | | |____ 
        |_|       |_|    |_|      |______| (_) /_/     /_/     |_____/   \____/   \____/  |______|
                                                                                                
                                                                                                


    ]]

    local sharedRequires = {}

    sharedRequires['a5aab7a81f59849e7c2e50d0ecd43092d80b0aaa025889a2d0219df4023d863d'] = (function()
        local ContextActionService = game:GetService("ContextActionService")
        local HttpService = game:GetService("HttpService")
        
        local ControlModule = {};
        
        do
            ControlModule.__index = ControlModule
        
            function ControlModule.new()
                local self = {
                    forwardValue = 0,
                    backwardValue = 0,
                    leftValue = 0,
                    rightValue = 0
                }
        
                setmetatable(self, ControlModule)
                self:init()
                return self
            end
        
            function ControlModule:init()
                local handleMoveForward = function(actionName, inputState, inputObject)
                    self.forwardValue = (inputState == Enum.UserInputState.Begin) and -1 or 0
                    return Enum.ContextActionResult.Pass
                end
        
                local handleMoveBackward = function(actionName, inputState, inputObject)
                    self.backwardValue = (inputState == Enum.UserInputState.Begin) and 1 or 0
                    return Enum.ContextActionResult.Pass
                end
        
                local handleMoveLeft = function(actionName, inputState, inputObject)
                    self.leftValue = (inputState == Enum.UserInputState.Begin) and -1 or 0
                    return Enum.ContextActionResult.Pass
                end
        
                local handleMoveRight = function(actionName, inputState, inputObject)
                    self.rightValue = (inputState == Enum.UserInputState.Begin) and 1 or 0
                    return Enum.ContextActionResult.Pass
                end
        
                ContextActionService:BindAction(HttpService:GenerateGUID(false), handleMoveForward, false, Enum.KeyCode.W);
                ContextActionService:BindAction(HttpService:GenerateGUID(false), handleMoveBackward, false, Enum.KeyCode.S);
                ContextActionService:BindAction(HttpService:GenerateGUID(false), handleMoveLeft, false, Enum.KeyCode.A);
                ContextActionService:BindAction(HttpService:GenerateGUID(false), handleMoveRight, false, Enum.KeyCode.D);
            end
        
            function ControlModule:GetMoveVector()
                return Vector3.new(self.leftValue + self.rightValue, 0, self.forwardValue + self.backwardValue)
            end
        end
        
        return ControlModule.new();
    end)();


    if game.GameId == 4871329703 then



    --------------- Variables -------------------

    if game.PlaceId == 14067600077 then
        if not isfolder("Medusa") then
            makefolder("Medusa")
        end
        if not isfolder("Medusa/Type Soul") then
            makefolder("Medusa/Type Soul")
        end
        if not isfile("Medusa/Type Soul/autoslot.txt") then
            writefile("Medusa/Type Soul/autoslot.txt", '')
        end

        task.wait(0.1)

        if readfile("Medusa/Type Soul/autoslot.txt") ~= '' then
            local args = {
                [1] = {
                    ["Method"] = "SelectSlot",
                    ["SelectedSlot"] = readfile("Medusa/Type Soul/autoslot.txt")
                }
            }

            game:GetService("ReplicatedStorage").Remotes.Returnable:InvokeServer(unpack(args))
        end

        task.wait(0.1)

        game:GetService("ReplicatedStorage").Remotes.TeleportEvent:FireServer()

    else

    local Players = game:GetService("Players")
    local VIM = Instance.new("VirtualInputManager")
    local StarterGui = game:GetService("StarterGui")
    local GuiService = game:GetService("GuiService")
    local CoreGui = game:GetService("CoreGui")
    local UserInputService = game:GetService("UserInputService")
    local RunService = game:GetService("RunService")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local TeleportService = game:GetService("TeleportService")

    local boobsoulStarted = false

    local LocalPlayer = Players.LocalPlayer
    local Camera = workspace.CurrentCamera

    local range = 50

    local lastRolled = ""

    local Character
    local HumanoidRootPart
    local Humanoid
    local Torso
    local RightArm

    local entities = workspace:WaitForChild("Entities")
    local npcs = Workspace.NPCs
    local items = Workspace.DroppedItems

    local espEnabled = false
    local showNonHumanoid = false
    local espSize = 10
    local selectedFont = 0

    local modNotify = true
    local modSoundId = "rbxassetid://6456981311"
    local modDisableAll = false
    local modLeave = false
    local modCombatLog = false

    local globalParryDistance = 20
    local globalParryHold = 0.1
    local dodgeLongWindups = false
    local flashInstead = false
    local biggerDistanceWindup = false

    local autoload

    local originalPosition = nil

    local MovementBV = Instance.new("BodyVelocity")

    local farmMobEnabled = false
    local selectedMob = "Fishbone"

    local farmOffset = 7
    local farmSpeed = 100

    local missionLerpSpeed = 100

    local createConfigName = "Untitled"
    local createConfigAnimation = "rbxassetid://0"
    local createConfigDistance = 1
    local createConfigDelay = 1

    local autoParry = false
    local autoParryOld = false
    local autoParryOffset = 0

    local slotToJoin = 'A'
    local joinSlot = false

    local autoOffset = 7

    local missionStayBelowGround = false

    local map = workspace:FindFirstChild("Map")
    local mapDescendants

    if map then
        mapDescendants = map:GetDescendants() 
    else
        mapDescendants = workspace:WaitForChild("ENTIRE"):GetDescendants()
    end

    local serverHopTag = false

    local autoFarm = false

    local divisionFarm = false

    local ControlModule = sharedRequires['a5aab7a81f59849e7c2e50d0ecd43092d80b0aaa025889a2d0219df4023d863d'];
                
    local MissionBoards = game:GetService("Workspace"):FindFirstChild("NPCs"):FindFirstChild("MissionNPC")
    local EntitiesFolder = workspace.Entities

    local parryDebug = false

    local selectedPlayer

    local rollChance
    local parryChance
    local webHook

    local tweenFunctionUnderground = false
    local tweenFunctionHeight = 5
    local tweenFunctionSpeed = 100

    local walkSpeedToggle
    local flashStepToggle

    local walkSpeed = 16
    local flySpeed = 50

    local autoYes = false

    local wsEnabled = false
    local fsEnabled = false
    local flyEnabled = false

    local isTorsoTransparent = false

    local encryptionKey = "blastbrean is my son"

    local attachToBack = false
    local attachMultiplier = 0
    local followMovement = false

    local mobattachToBack = false
    local mobattachMultiplier = 0
    local mobfollowMovement = false

    local prioratizeParry = false
    local blockInput = false
    local blockInputParry = false

    local gripHumanoids = false

    local streamerText = "BUY MEDUSA HUB"
    local PlayerGui = LocalPlayer.PlayerGui

    local settingsGui = PlayerGui:WaitForChild("Settings"):WaitForChild("Frame")
    local leaderboardGui = PlayerGui:WaitForChild("Leaderboard"):WaitForChild("PlayerList"):WaitForChild("PlayerListFrame")

    local skillTree1
    local skillTree2

    local normalStreamerValue = false
    local ultraStreamerValue = false

    local missionScroll = PlayerGui:WaitForChild("MissionsUI"):WaitForChild("MainFrame"):WaitForChild("ScrollingFrame")

    local rerollSkill

    ------------- Tables -----------------

    for i, v in PlayerGui:GetChildren() do
        if v.Name == "SkillTree" then
            if not skillTree1 then
                skillTree1 = v
            else    
                skillTree2 = v
            end
        end
    end

    local normalStreamer = {
        settingsGui:WaitForChild("CharacterName"),
        settingsGui:WaitForChild("PlayerName"),
        leaderboardGui:WaitForChild(game.Players.LocalPlayer.Name):WaitForChild("PlayerName"),
        leaderboardGui:WaitForChild(game.Players.LocalPlayer.Name):WaitForChild("PlayerTitle"),
        skillTree1:WaitForChild("MainFrame"):WaitForChild("playerNameRank")
    }

    if skillTree2 then
        table.insert(normalStreamer, skillTree2:WaitForChild("MainFrame"):WaitForChild("playerNameRank"))
    end

    local ultraStreamer = {
        settingsGui:WaitForChild("CurrentServer"),
        settingsGui:WaitForChild("Region"),
        settingsGui:WaitForChild("ServerTime"),
        settingsGui:WaitForChild("Version"),
        leaderboardGui:WaitForChild(game.Players.LocalPlayer.Name):WaitForChild("PlayerName"),
        PlayerGui:WaitForChild("Currency"):WaitForChild("Frame"):WaitForChild("KanLabel")
    }

    local Element = {
            "Bone",
            "Storm",
            "Acid",
            "Slash",
            "Shark",
            "Phoenix",
            "Pantera",
            "Spirit",
            "Devil",
            "Vampire",
            "Starrk",
            "Volcanica",
            "Arrogante",
            "Light",
            "Wind",
            "Heat",
            "Iron",
            "Thunderbolt",
            "Compulsory",
            "Power",
            "Fear",
            "Miracle",
            "Visionary",
            "Glutton",
            "Superstar",
            "Explode",
            "Balance",
            "Deathdealing",
            "Lightning",
            "Confusion",
            "Shadow",
            "Creation",
            "Poison",
            "Wind",
            "Water",
            "Fire",
            "Zangetsu",
            "Berserk",
            "Judgement",
            "Shinso",
            "Blood",
            "Ink",
            "Ice",
            "Flower",
            "Theatre",
            "Suzumebachi",
            "Benihime",
            "Duality",
            "Kyokasuigetsu"
    }

    local TargetElements = {}

    local Weapon = {
        "Piety",
        "Heatpierce",
        "Bloodedge",
        "Hollowburden",
        "Calibre",
        "Verglas",
        "Ulquoirra",
        "Wonderweiss",
        "Grimmjow",
        "Nelliel",
        "Nnoitra",
        "Barragan",
        "Zweis",
        "Spalten",
        "WardenGauntlets",
        "QuincyGlock",
        "Reichweite",
        "Kehren",
        "CangDuClaws",
        "Cutlass",
        "Antithesis",
        "Quigle",
        "Schwert",
        "Jugram'sShield",
        "Odachi",
        "Longsword",
        "Dagger",
        "Scythe",
        "Hammer",
        "Katana",
        "Spear",
        "Twinblade",
        "DualSwords",
        "Greatsword"
    }

    local TargetWeapons = {}

    local Clan = {
        "Ikomikidomoe",
        "Starrk",
        "Odelschwanck",
        "Louisenbairn",
        "Jaegerjaquez",
        "Cifer",
        "Kurosaki",
        "Du",
        "Valkyrie",
        "B",
        "Parnkgjas",
        "LeVaar",
        "Sozosei",
        "Urahara",
        "Yamamoto",
        "Hyosube",
        "Zaraki",
        "Shutara",
        "Tsunayashiro"
    }

    local TargetClans = {}

    local oldNames = {}

    ConfigData = {
        CustomScales = {
            Ass = 0.5,
            Breasts = 0.5,
            Dick = 1
        },
        ShowChest = true,
        ShowButt = true,
        ShowCrotch = false,
        ApplyToOthers = true,
        UtilizeGender = false,
    }

    local Race,Varient
    local Scales
    local Gender

    local animators = {}

    local Places = {
        [14069122388] = "Hueco Mundo",
        [14069678431] = "Karakura Town",
        [14069956183] = "Rukon District",
        [14070029709] = "Soul Society",
        [14069866342] = "Las Noches",
        [14071822972] = "Wandenreich City"
    }

    local blacklistedAnimations = {
        "rbxassetid://14079307927",
        "rbxassetid://16930848691",
        "rbxassetid://14072131995",
        "rbxassetid://14070085241",
        "rbxassetid://14072133845"
    }

    local recordingAnimations = false
    local recordingAlreadyPlayed = false

    local connections = {}

    connections["Animate"] = nil

    local espObjects = {}

    local entitySettings = {
        Player = {
            Esp = false,
            Health = false,
            Chams = false,
            Color = Color3.new(0, 0, 0),
            Distance = false,
            Tracers = false,
            Chams = false,
            Thickness = 2,
            BoxThickness = 2,
            Proximity = 2000
        },
        Mob = {
            Esp = false,
            Health = false,
            Chams = false,
            Color = Color3.new(0, 0, 0),
            Distance = false,
            Tracers = false,
            Chams = false,
            Thickness = 2,
            BoxThickness = 2,
            Proximity = 2000
        },
        NPC = {
            Esp = false,
            Chams = false,
            Color = Color3.new(0, 0, 0),
            Distance = false,
            Boxes = false,
            Tracers = false,
            Chams = false,
            Thickness = 2,
            BoxThickness = 2,
            Proximity = 2000
        },
        Item = {
            Esp = false,
            Charms = false,
            Color = Color3.new(0, 0, 0),
            Distance = false,
            Proximity = 2000
        },
        NonHumanoid = {
            Esp = false,
            Charms = false,
            Color = Color3.new(0, 0, 0),
            Distance = false,
            Proximity = 2000
        }
    }

    local parryList = {
        -- Zakanputo
        {AnimationId = 'rbxassetid://14070072624', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14070073772', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14070074688', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14070075681', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14070076756', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14070060393', Distance = 20, Delay = 0.5},
        -- Twinblade
        {AnimationId = 'rbxassetid://14070603567', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14070602154', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14083403022', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14070599155', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14083349554', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14070585487', Distance = 20, Delay = 0.5},
        -- Dualblade
        {AnimationId = 'rbxassetid://14069394981', Distance = 12, Delay = 0.35},
        {AnimationId = 'rbxassetid://14069404555', Distance = 12, Delay = 0.35},
        {AnimationId = 'rbxassetid://14069397690', Distance = 12, Delay = 0.35},
        {AnimationId = 'rbxassetid://14070599155', Distance = 12, Delay = 0.35},
        {AnimationId = 'rbxassetid://14069396446', Distance = 12, Delay = 0.35},
        {AnimationId = 'rbxassetid://14069405919', Distance = 12, Delay = 0.35},
        {AnimationId = 'rbxassetid://14069384270', Distance = 20, Delay = 0.5},
        -- Hammer
        {AnimationId = 'rbxassetid://14069966046', Distance = 12, Delay = 0.45},
        {AnimationId = 'rbxassetid://14069969233', Distance = 12, Delay = 0.45},
        {AnimationId = 'rbxassetid://14069968221', Distance = 12, Delay = 0.45},
        {AnimationId = 'rbxassetid://14069967026', Distance = 12, Delay = 0.45},
        {AnimationId = 'rbxassetid://14069396446', Distance = 12, Delay = 0.45},
        {AnimationId = 'rbxassetid://14069955246', Distance = 20, Delay = 0.55},
        -- Katana
        {AnimationId = 'rbxassetid://14080134654', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14080133625', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14080131957', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14080130879', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14080129863', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14080118268', Distance = 20, Delay = 0.45},
        -- Spear
        {AnimationId = 'rbxassetid://14070470232', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14070468724', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14070467433', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14070466276', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14070464898', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14070454226', Distance = 20, Delay = 0.45},
        -- Scythe
        {AnimationId = 'rbxassetid://14070411150', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14070410008', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14070408983', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14070408121', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14070407186', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14070395730', Distance = 20, Delay = 0.45},
        -- Greatsword
        {AnimationId = 'rbxassetid://14069511963', Distance = 12, Delay = 0.33},
        {AnimationId = 'rbxassetid://14069510344', Distance = 12, Delay = 0.33},
        {AnimationId = 'rbxassetid://14069509112', Distance = 12, Delay = 0.33},
        {AnimationId = 'rbxassetid://14069508220', Distance = 12, Delay = 0.33},
        {AnimationId = 'rbxassetid://14069506780', Distance = 12, Delay = 0.35},
        {AnimationId = 'rbxassetid://14069495625', Distance = 20, Delay = 0.45},
        -- Longsword
        {AnimationId = 'rbxassetid://14070167474', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14070166724', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14070165536', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14070164504', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://14070163707', Distance = 12, Delay = 0.3},
        {AnimationId = 'rbxassetid://16912061731', Distance = 20, Delay = 0.5},
    }

    -------------- Functions --------------

    local function xorEncrypt(input, key)
        local keyLength = #key
        local output = {}

        for i = 1, #input do
            local inputByte = string.byte(input, i)
            local keyByte = string.byte(key, (i - 1) % keyLength + 1)
            local encryptedByte = bit32.bxor(inputByte, keyByte)
            table.insert(output, string.char(encryptedByte))
        end

        return table.concat(output)
    end

    local function xorDecrypt(input, key)
        return xorEncrypt(input, key)
    end

    local function findClosestMob(name)
        local closestMob = nil
        local closestDistance = math.huge
        local playerPosition = HumanoidRootPart.Position
        
        for _, mob in ipairs(EntitiesFolder:GetChildren()) do
            task.wait()
            if mob:IsA("Model") and mob.Name:find(name) then
                local mobPosition = mob:GetPivot().Position
                local distance = (playerPosition - mobPosition).Magnitude
                if distance < closestDistance then
                    closestMob = mob
                    closestDistance = distance
                end
            end
        end
        
        return closestMob
    end

    local function getPlayerNames()
        local tableToReturn = {}
        for i, v in game:GetService("Players"):GetPlayers() do
            task.wait()
            table.insert(tableToReturn, v.Name)
        end
        return(tableToReturn)
    end

    local function findClosestMissionBoard()
        local closestBoard = nil
        local closestDistance = math.huge
        local playerPosition = HumanoidRootPart.Position
        
        for _, board in ipairs(MissionBoards:GetChildren()) do
            if board:IsA("Model") then
                local boardPosition = board.WorldPivot.Position
                local distance = (playerPosition - boardPosition).Magnitude
                if distance < closestDistance and board:FindFirstChild("ClickDetector", true) then
                    closestBoard = board
                    closestDistance = distance
                end
            end
        end
        
        return closestBoard
    end

    local function lootBox(box)
        local id = box:GetAttribute("ID")
        local items = box:WaitForChild("Items")
    
        while #items:GetChildren() > 0 do
            task.wait()
            for i, item in items:GetChildren() do
                local args = {
                    [1] = id,
                    [2] = item.Name
                }
        
                game:GetService("ReplicatedStorage").Lootbox.Remotes.Collect:FireServer(unpack(args))
            end    
        end
    
    end

    function calculateDifference(first, second)
        local threshold = 1.5
        local difference = math.abs(first - second)
        return difference <= threshold
    end

    local function lerpCFrame(part, targetCFrame, speed, raycast, height)
        local initialCFrame = part.CFrame
        local distance = (targetCFrame.Position - initialCFrame.Position).Magnitude
        local duration = distance / speed
        local startTime = tick()
        
        while tick() - startTime < duration do
            local elapsedTime = tick() - startTime
            local lerpedPosition = initialCFrame.Position:Lerp(targetCFrame.Position, elapsedTime / duration)
            
            if raycast then
                local rayOrigin = lerpedPosition + Vector3.new(0, 300, 0)
                local raycastResult = nil
                
                for _, descendant in ipairs(mapDescendants) do
                    if descendant:IsA("BasePart") then
                        local hit, position = workspace:FindPartOnRayWithIgnoreList(Ray.new(rayOrigin, Vector3.new(0, -2000, 0)), {part, descendant})
                        if hit then
                            raycastResult = {Part = descendant, Position = position}
                            break
                        end
                    end
                end
                
                if raycastResult then
                    lerpedPosition = Vector3.new(lerpedPosition.X, raycastResult.Position.Y - height, lerpedPosition.Z)
                end
            end

            local upsideDownRotation = CFrame.new()
            if raycast then
                upsideDownRotation = CFrame.Angles(math.pi, 0, 0)
            end
            
            part.CFrame = CFrame.new(lerpedPosition) * upsideDownRotation
            part.Velocity = Vector3.new(0, 0, 0)
            task.wait()
        end
        
        part.CFrame = targetCFrame
    end

    local function farmMob()
        local mob = findClosestMob(selectedMob)
        if mob then
            lerpCFrame(HumanoidRootPart, mob:GetPivot(), farmSpeed, mobUnderground, mobHeight)
            while mob:FindFirstChild("Humanoid") and mob.Humanoid.Health > 1 and farmMobEnabled do
                task.wait()
                HumanoidRootPart.CFrame = mob.HumanoidRootPart.CFrame * CFrame.new(0, -farmOffset, 0)
                HumanoidRootPart.CFrame = CFrame.lookAt(HumanoidRootPart.Position, mob.HumanoidRootPart.Position)
                game:GetService("ReplicatedStorage").Remotes.ServerCombatHandler:FireServer("LightAttack")
            end
        end
        if farmMobEnabled then
            farmMob()
        end
    end

    local function splitString(inputStr)
        local t = {}
        for str in string.gmatch(inputStr, "([^\n]+)") do
            table.insert(t, str)
        end
        return t
    end

    local function performRaycast(entity)
        local rootPart = entity:FindFirstChild("HumanoidRootPart")
        if not rootPart then
            return false
        end
        
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = mapDescendants

        local raycastResult = workspace:Raycast(rootPart.Position, Vector3.new(0, -2000, 0), raycastParams)

        if raycastResult then
            return raycastResult.Position
        end
    end

    local function serverHop()
        local list = ReplicatedStorage.Requests.RequestServerList:InvokeServer(Places[game.PlaceId])

        task.spawn(function()
            while task.wait(1.5) do
                for i, v in list do
                    local CurrentRegion = LocalPlayer.PlayerGui.Settings.Frame.Region.Text
                    local CurrentServer = LocalPlayer.PlayerGui.Settings.Frame.CurrentServer.Text
                    local Region = v.ServerRegion
                    local isRaid = v.Raid
                    local ServerPlayers = v.ServerPlayers
                    local JobID = v.JobID
                    local ServerName = v.ServerName

                    local sameServer = v.JobID == game.JobId
                    local sameRegion = Region == CurrentRegion
                    local isMax = ServerPlayers > v.ServerPlayerMax
                    
                    if not isRaid and not isMax and not sameServer then
                    game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, JobID, Player)
                    end
                    task.wait(1.5)
                end
            end
        end)
        
        wait(7)
        while task.wait() do
            game:GetService("TeleportService"):Teleport(game.PlaceId)
        end
    end

    local function startParty()
        pcall(function()
            Remotes.PartyCreate:FireServer()
        end)
    end

    local function reroll()

        local args = {
            [1] = "Skill",
            [2] = rerollSkill,
            [3] = "Pressed"
        }

        game:GetService("ReplicatedStorage").Remotes.ServerCombatHandler:FireServer(unpack(args))

        task.wait()

        local args = {
            [1] = "LightAttack"
        }

        game:GetService("ReplicatedStorage").Remotes.ServerCombatHandler:FireServer(unpack(args))


    end

    local function VM1Click(X, Y)
        VIM:SendMouseButtonEvent(X, Y, 0, true, game, 0)
        task.wait()
        VIM:SendMouseButtonEvent(X, Y, 0, false, game, 0)
    end

    local function normalStreamerEnabled(bool)
        if bool then
            for i, v in missionScroll:GetChildren() do
                if v:IsA("Frame") then
                    local PlayerName = v:WaitForChild("PlayerName")
                    oldNames[PlayerName] = PlayerName.Text
                    PlayerName.Text = streamerText
                    connections[PlayerName] = PlayerName.Changed:Connect(function()
                        PlayerName.Text = streamerText
                    end)
                end
            end
            connections["NormalStreamer"] = missionScroll.ChildAdded:Connect(function(v)
                if v:IsA("Frame") then
                    local PlayerName = v:WaitForChild("PlayerName")
                    oldNames[PlayerName] = PlayerName.Text
                    PlayerName.Text = streamerText
                    connections[PlayerName] = PlayerName.Changed:Connect(function()
                        PlayerName.Text = streamerText
                    end)
                end
            end)
            connections["NormalTwo"] = RunService.RenderStepped:Connect(function()
                for i, v in normalStreamer do
                    if v:IsA("TextLabel") or v:IsA("TextBox") or v:IsA("TextButton") then
                        oldNames[v] = v.Text
                        v.Text = streamerText
                    end
                end
            end)
        else
            for i, v in normalStreamer do
                if connections["NormalTwo"] then
                    connections["NormalTwo"]:Disconnect()
                    connections["NormalTwo"] = nil
                end
                if v:IsA("TextLabel") or v:IsA("TextBox") or v:IsA("TextButton") then
                    if connections[v] then
                        connections[v]:Disconnect()
                        connections[v] = nil
                    end
                    v.Text = oldNames[v]
                end
            end
            for i, v in missionScroll:GetChildren() do
                if v:IsA("Frame") then
                    local PlayerName = v:WaitForChild("PlayerName")
                    if connections[PlayerName] then
                        connections[PlayerName]:Disconnect()
                        connections[PlayerName] = nil
                    end
                    PlayerName.Text = oldNames[PlayerName]
                end
            end
            if connections["NormalStreamer"] then
                connections["NormalStreamer"]:Disconnect()
                connections["NormalStreamer"] = nil
            end
        end
    end

    local function ultraStreamerEnabled(bool)
        if bool then
            for i, v in ultraStreamer do
                if v:IsA("TextLabel") or v:IsA("TextBox") or v:IsA("TextButton") then
                    oldNames[v] = v.Text
                    v.Text = streamerText
                    connections[v] = v.Changed:Connect(function()
                        v.Text = streamerText
                    end)
                end
            end
            for i, v in leaderboardGui:GetChildren() do
                if v:FindFirstChild("PlayerName") then
                    local playerName = v.PlayerName
                    local playerTitle = v.PlayerTitle

                    oldNames[playerName] = playerName.Text
                    playerName.Text = streamerText
                    connections[playerName] = playerName:GetPropertyChangedSignal("Text"):Connect(function()
                        playerName.Text = streamerText
                    end)

                    oldNames[playerTitle] = playerTitle.Text
                    playerTitle.Text = streamerText
                    connections[playerTitle] = playerTitle:GetPropertyChangedSignal("Text"):Connect(function()
                        playerTitle.Text = streamerText
                    end)
                end
            end 
            connections["UltraStreamer"] = leaderboardGui.ChildAdded:Connect(function(v)
                if v:FindFirstChild("PlayerName") then
                    local playerName = v.PlayerName
                    local playerTitle = v.PlayerTitle

                    oldNames[playerName] = playerName.Text
                    playerName.Text = streamerText
                    connections[playerName] = playerName:GetPropertyChangedSignal("Text"):Connect(function()
                        playerName.Text = streamerText
                    end)

                    oldNames[playerTitle] = playerTitle.Text
                    playerTitle.Text = streamerText
                    connections[playerTitle] = playerTitle:GetPropertyChangedSignal("Text"):Connect(function()
                        playerTitle.Text = streamerText
                    end)
                end
            end)
        else
            for i, v in ultraStreamer do
                if v:IsA("TextLabel") or v:IsA("TextBox") or v:IsA("TextButton") then
                    if connections[v] then
                        connections[v]:Disconnect()
                        connections[v] = nil
                    end
                    v.Text = oldNames[v]
                end
            end
            for i, v in leaderboardGui:GetChildren() do
                if v:FindFirstChild("PlayerName") then
                    local playerName = v.PlayerName
                    local playerTitle = v.PlayerTitle

                    if connections[playerName] then
                        connections[playerName]:Disconnect()
                        connections[playerName] = nil
                    end
                    playerName.Text = oldNames[playerName]

                    if connections[playerTitle] then
                        connections[playerTitle]:Disconnect()
                        connections[playerTitle] = nil
                    end
                    playerTitle.Text = oldNames[playerTitle]
                end
            end 
            if connections["UltraStreamer"] then
                connections["UltraStreamer"]:Disconnect()
                connections["UltraStreamer"] = nil
            end
        end
    end

    function findAllPartsOnRay(ray)
        local targets = {}
        repeat
            local target = game.Workspace:FindPartOnRayWithIgnoreList(ray, targets)
            if target then
                table.insert(targets, target)
            end
        until not target
        return targets
    end

    local function newFireDetector(target)
        local oldSubject = Camera.CameraSubject
        local oldFov = Camera.FieldOfView
        task.wait()
        local targetParent = target.Parent
        local targetPosition

        if targetParent:IsA("Model") then
            targetPosition = targetParent:GetPivot().Position
        elseif targetParent:IsA("BasePart") then
            targetPosition = targetParent.Position
        else
            warn("Unsupported target parent type. Must be a Model or BasePart.")
            return
        end

        local tempPart = Instance.new("Part")
        tempPart.Position = targetPosition
        tempPart.Anchored = true
        tempPart.CanCollide = false
        tempPart.Transparency = 1
        tempPart.Parent = workspace

        Camera.CameraSubject = tempPart
        Camera.FieldOfView = 1
        task.wait()

        local rayOrigin = Camera.CFrame.Position
        local rayDirection = (targetPosition - rayOrigin).Unit * (targetPosition - rayOrigin).Magnitude
        local ray = Ray.new(rayOrigin, rayDirection)
        
        local partsOnRay = findAllPartsOnRay(ray)
        
        for _, part in pairs(partsOnRay) do
            part.CanCollide = false
            part.Transparency = 1
        end
        task.wait()
        VM1Click(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
        task.wait()

        for _, part in pairs(partsOnRay) do
            part.CanCollide = true
            part.Transparency = 0
        end

        Camera.FieldOfView = oldFov
        Camera.CameraSubject = oldSubject

        tempPart:Destroy()
    end


    local function filterEntities(entityTable, startTick)
        local filteredEntities = {}
        for i, entityData in ipairs(entityTable) do
            if calculateDifference(entityData.spawnTick, startTick) and 
            not Players:GetPlayerFromCharacter(entityData.entity) and 
            entityData.entity:FindFirstChild("Highlight") then
                table.insert(filteredEntities, entityData.entity)
            end
        end    
        return filteredEntities
    end

    local function executeRemote(entity)
        task.wait(0.2)
        Remotes.Execute:FireServer()
        task.wait(3.5)
    end

    local function handleEntity(entity)
        local entityHRP = entity:WaitForChild("HumanoidRootPart")
        lerpCFrame(HumanoidRootPart, CFrame.new(entityHRP.Position), missionLerpSpeed, autoUnderground, autoHeight)
        
        while entity.Humanoid.Health > 1 and autoFarm do
            task.wait()
            if not Character:GetAttribute("CurrentState") == "WeaponDrawn" then
                Remotes.Weapon:FireServer()
            end
            
            local targetCFrame
            if not missionStayBelowGround then
                targetCFrame = entityHRP.CFrame * CFrame.new(0, -autoOffset, 0)
            else
                local result = performRaycast(entity)
                targetCFrame = result and CFrame.new(result) * CFrame.new(0, -autoOffset, 0) or entityHRP.CFrame * CFrame.new(0, -autoOffset, 0)
            end
            
            HumanoidRootPart.CFrame = targetCFrame
            HumanoidRootPart.CFrame = CFrame.lookAt(HumanoidRootPart.Position, entityHRP.Position)
            game:GetService("ReplicatedStorage").Remotes.ServerCombatHandler:FireServer("LightAttack")
        end
        
        HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
    end

    local function processEntities(filteredEntities)
        for i, entity in ipairs(filteredEntities) do
            if not autoFarm then break end
            handleEntity(entity)
        end
        
        task.wait(1)

        for i = 1, 3 do
            if not autoFarm then break end
            for i, entity in ipairs(filteredEntities) do
                if not autoFarm then break end
                if entity and entity.Parent and entity.Humanoid.Health > 0 then
                    if entity.Humanoid.NameDisplayDistance ~= 0 and gripHumanoids then
                        task.wait()
                        local entityHRP = entity:WaitForChild("HumanoidRootPart")
                        lerpCFrame(HumanoidRootPart, CFrame.new(entityHRP.Position + Vector3.new(0, 3, 0)), missionLerpSpeed, autoUnderground, autoHeight)
                        task.wait(0.2)
                        executeRemote(entity)
                    end
                end
            end
        end
        
        HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
    end

    local function startMission()
        local closestBoard = findClosestMissionBoard()
        local boardClickDetector = closestBoard.Board:FindFirstChild("ClickDetector", true)
        
        startParty()
        task.wait(0.2)

        if not HumanoidRootPart then return end
        lerpCFrame(HumanoidRootPart, CFrame.new(closestBoard.Board.Union.Position), missionLerpSpeed, autoUnderground, autoHeight)
        if not autoFarm then return end

        repeat 
            task.wait(0.1) 
            fireclickdetector(boardClickDetector)
            if serverHopTag and Character:GetAttribute("CombatTag") ~= 0 then
                serverHop()
            end
        until LocalPlayer:FindFirstChild(closestBoard.Name) or not autoFarm
        
        local missionRemote = LocalPlayer:WaitForChild(closestBoard.Name)    
        if not autoFarm then return end
        
        while LocalPlayer.PlayerGui.MissionsUI.Queueing.TextTransparency == 1 or not LocalPlayer.PlayerGui.MissionsUI.Queueing.Visible do
            task.wait()
            missionRemote:FireServer("Yes")
            pcall(function()
                firesignal(LocalPlayer.PlayerGui.DialogueUI:GetChildren()[2].Yes.MouseButton1Click)
            end)
            if serverHopTag and Character:GetAttribute("CombatTag") ~= 0 then
                serverHop()
            end
        end

        local missionEntities = {}
        local missionStarted = false
        local entityConnection = EntitiesFolder.ChildAdded:Connect(function(entity)
            pcall(function()
                table.insert(missionEntities, {entity = entity, spawnTick = tick()})
            end)
        end)
        
        task.wait(1)
        if not autoFarm then return end
        
        repeat 
            task.wait(0.1) 
            if serverHopTag and Character:GetAttribute("CombatTag") ~= 0 then
                serverHop()
            end
            task.wait(0.1) 
        until LocalPlayer.PlayerGui.MissionsUI.Queueing.TextTransparency == 1
        
        local missionStartTick = tick()
        missionStarted = true
        local missionTitle = LocalPlayer.PlayerGui.QueueUI.MissionHolder.missionTitle.Text
        
        if missionTitle == "Hollow Overflow" or missionTitle == "Hollow Extermination" or missionTitle == "Shinigami Fight" or 
        missionTitle == "Shinigami Extermination" or missionTitle == "Hollow Purification" or missionTitle == "Arrancar Fight" then
        
            local filteredEntities = filterEntities(missionEntities, missionStartTick)
            processEntities(filteredEntities)
            
        else
            game:GetService("TeleportService"):Teleport(game.PlaceId)
        end
        
        task.wait()
        if autoFarm then
            startMission()
        end
    end

    local function doMinigame()
        if not divisionFarm then return end
        startParty()
        wait(1)
        if not divisionFarm then return end
        repeat 
            task.wait(0.1) 
            fireclickdetector(game:GetService("Workspace").NPCs.DivisionDuties["Division Duties 12"].Board.Click.ClickDetector) 
        until LocalPlayer:FindFirstChild("Division Duties 12")
        local divisionRemote = LocalPlayer:FindFirstChild("Division Duties 12")
        while not game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("Division11Minigame") do
            if divisionRemote then
                divisionRemote:FireServer(unpack({[1] = "Yes"}))
            end
            task.wait(4)
        end
        local divisionGUI = game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("Division11Minigame"):WaitForChild("Frame")
        divisionGUI.ChildAdded:Connect(function(child)
            task.wait(0.2)
            VM1Click(child.AbsolutePosition.x + 50, child.AbsolutePosition.y + 50)
        end)
        if divisionFarm then
            repeat task.wait() until not game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("Division11Minigame") or not divisionFarm
            doMinigame()
        end
    end

    local function addSP(skill)
        local args = {
            [1] = skill
        }
        
        game:GetService("Players").LocalPlayer.Character:WaitForChild("CharacterHandler").Remotes.AddSP:FireServer(unpack(args))
    end

    local function parry()
        if parryDebug then
            task.spawn(function()
                local square = Drawing.new("Square")
                square.Size = Vector2.new(20000, 20000)
                square.Position = Vector2.new(20, 20)
                square.Visible = true
                square.Color = Color3.new(0, 1, 0)
                square.Filled = true
                task.wait(0.1)
                square:Destroy()
            end)
        end
        task.spawn(function()
            for i = 1, 3 do
                local args = {
                    [1] = "Pressed",
                    [2] = nil
                }
                
                Remotes.Block:FireServer(unpack(args))   
            end
    
            task.wait(globalParryHold)    
            local args = {
                [1] = "Released",
                [2] = nil
            }
            
            Remotes.Block:FireServer(unpack(args)) 
        end)  
    end

    local function dodge(flash)
        if flash then
            local args = {
                [1] = "Pressed"
            }

            game:GetService("Players").LocalPlayer.Character.CharacterHandler.Remotes.Flashstep:FireServer(unpack(args))
        else

        local args = {
            [1] = "S",
            [2] = nil
        }

        game:GetService("Players").LocalPlayer.Character.CharacterHandler.Remotes.Dash:FireServer(unpack(args))

        end
    end

    local function createConfig(name, animation, distance, delay)
        local encryptedContent = xorEncrypt(animation .. "," .. tostring(distance) .. "," ..tostring(delay), encryptionKey)
        writefile("Medusa/Type Soul/configs/" .. name .. ".medusa", encryptedContent)
    end

    local function addChams(entity)
        if not entity:IsA("Model") then return end

        local chams = {}
        for _, part in ipairs(entity:GetChildren()) do
            if part:IsA("BasePart") then
                local cham = Instance.new("BoxHandleAdornment")
                cham.Size = part.Size
                cham.AlwaysOnTop = true
                cham.ZIndex = 4
                cham.Adornee = part
                cham.Parent = Camera
                cham.Transparency = 1
                table.insert(chams, cham)
            end
        end

        return chams
    end

    local function addEsp(entity, entityType)
        if not entity:IsA("Model") then return end

        local humanoid
        local chams
        if entityType ~= "Item" and entityType ~= "NonHumanoid" then
            humanoid = entity:WaitForChild("Humanoid")
            chams = addChams(entity)
        end

        local text = Drawing.new("Text")
        text.Visible = false
        text.Outline = true
        text.Center = true
        text.Font = selectedFont

        local tracer = Drawing.new("Line")
        tracer.Visible = false
        tracer.Thickness = 2

        local box = Drawing.new("Square")
        box.Visible = false
        box.Filled = false
        box.Thickness = 2

        espObjects[entity] = {
            text = text,
            tracer = tracer,
            box = box,
            chams = chams,
            humanoid = humanoid,
            entityType = entityType
        }
    end

    local function getBoundingBoxCorners(cframe, size)
        local corners = {}
        for x = -1, 1, 2 do
            for y = -1, 1, 2 do
                for z = -1, 1, 2 do
                    local worldPoint = cframe * Vector3.new(x * size.X / 2, y * size.Y / 2, z * size.Z / 2)
                    local screenPoint, onScreen = Camera:WorldToViewportPoint(worldPoint)
                    if onScreen then
                        table.insert(corners, Vector2.new(screenPoint.X, screenPoint.Y))
                    end
                end
            end
        end
        return corners
    end

    local function getBoundingRectangle(corners)
        if #corners == 0 then
            return nil
        end

        local minX, minY = math.huge, math.huge
        local maxX, maxY = -math.huge, -math.huge

        for _, corner in ipairs(corners) do
            minX = math.min(minX, corner.X)
            minY = math.min(minY, corner.Y)
            maxX = math.max(maxX, corner.X)
            maxY = math.max(maxY, corner.Y)
        end

        return Vector2.new(minX, minY), Vector2.new(maxX, maxY)
    end

    local function drawBoundingBox(entity)
        local cframe, size = entity:GetBoundingBox()
        local corners = getBoundingBoxCorners(cframe, size)
        local minCorner, maxCorner = getBoundingRectangle(corners)

        return minCorner, maxCorner
    end

    local updateEspObjects = LPH_NO_VIRTUALIZE(function()
        for entity, espData in pairs(espObjects) do
            local text = espData.text
            local tracer = espData.tracer
            local box = espData.box
            local chams = espData.chams
            local humanoid = espData.humanoid
            local entityType = espData.entityType

            if not entity.Parent then
                text:Remove()
                tracer:Remove()
                box:Remove()
                if chams then
                    for _, cham in ipairs(chams) do
                        cham:Destroy()
                    end
                end
                espObjects[entity] = nil
                return
            end

            local currentSettings = entitySettings[entityType]

            local showEsp = currentSettings.Esp
            local showHealth = currentSettings.Health
            local showDistance = currentSettings.Distance
            local espColor = currentSettings.Color
            local espProximity = currentSettings.Proximity
            local espTracers = currentSettings.Tracers
            local espThickness = currentSettings.Thickness
            local boxThickness = currentSettings.BoxThickness
            local espChams = currentSettings.Chams
            local showBox = currentSettings.Boxes

            local distance = 10

            if HumanoidRootPart then
                distance = (HumanoidRootPart.CFrame.Position - entity:GetPivot().Position).Magnitude
            end
            text.Center = true
            text.Size = espSize
            text.Color = espColor
            text.Font = selectedFont
            text.OutlineColor = Color3.new(0, 0, 0)

            local pos, onScreen = Camera:WorldToViewportPoint(entity:GetPivot().Position)
            if onScreen then
                text.Position = Vector2.new(pos.X + 7.5, pos.Y + 7.5)

                if ultraStreamerValue then
                    text.Text = streamerText
                else
                    text.Text = entity.Name
                end

                if showHealth and humanoid then
                    text.Text = text.Text .. " [" .. math.floor(humanoid.Health) .. "/" .. math.floor(humanoid.MaxHealth) .. "]"
                end

                if showDistance and distance then
                    text.Text = text.Text .. "[" .. math.floor(distance) .. "]"
                end

                if espEnabled then
                    if distance <= espProximity then
                        text.Visible = showEsp
                    else
                        text.Visible = false
                    end
                else
                    text.Visible = false
                end
            else
                text.Visible = false
            end

            if espTracers and espEnabled and onScreen then
                if distance <= espProximity then
                    tracer.Visible = showEsp
                    tracer.Thickness = espThickness
                    tracer.Color = espColor
                    tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                    tracer.To = Vector2.new(pos.X, pos.Y)
                else
                    tracer.Visible = false
                end
            else
                tracer.Visible = false
            end

            if showBox and espEnabled and onScreen and showEsp then
                if distance <= espProximity then
                    local minCorner, maxCorner = drawBoundingBox(entity)
                    if minCorner and maxCorner then
                        box.Visible = true
                        box.Color = espColor
                        box.Thickness = boxThickness
                        box.Position = minCorner
                        box.Size = maxCorner - minCorner
                    else
                        box.Visible = false
                    end
                else
                    box.Visible = false
                end
            else
                box.Visible = false
            end

            if chams then
                for _, cham in ipairs(chams) do
                    if showEsp and distance <= espProximity and espChams and espEnabled then
                        cham.Color3 = espColor
                        cham.Transparency = 0
                    else
                        cham.Transparency = 1
                    end
                end
            end
        end
    end)

    local function removeEsp(entity)
        local espObject = espObjects[entity]
        if espObject then
            espObject.text:Remove()
            espObject.tracer:Remove()
            espObject.box:Remove()
            if espObject.chams then
                for _, cham in ipairs(espObject.chams) do
                    cham:Destroy()
                end
            end
            espObjects[entity] = nil
        end
    end

    local function initializeEsp()
        for _, entity in ipairs(entities:GetChildren()) do
            if entity ~= Character then
                task.spawn(function()
                    local player = Players:FindFirstChild(entity.Name)
                    if player then
                        addEsp(entity, "Player")
                    else
                        addEsp(entity, "Mob")
                    end
                end)
            end
        end

        for _, folder in npcs:GetChildren() do
            if folder:IsA("Folder") then
                for _, npc in ipairs(folder:GetChildren()) do
                    if npc:FindFirstChild("Humanoid") then 
                        addEsp(npc, "NPC")
                    else
                        if npc:IsA("Model") and npc.PrimaryPart then
                            addEsp(npc, "NonHumanoid")
                        end
                    end
                end

                folder.ChildAdded:Connect(function(npc)
                    if npc:FindFirstChild("Humanoid") then 
                        addEsp(npc, "NPC")
                    else
                        if npc:IsA("Model") and npc.PrimaryPart then
                            addEsp(npc, "NonHumanoid")
                        end
                    end
                end)

                folder.ChildRemoved:Connect(removeEsp)
            end
        end

        for _, item in ipairs(items:GetChildren()) do
            addEsp(item, "Item")
        end

        entities.ChildAdded:Connect(function(entity)
            local player = Players:FindFirstChild(entity.Name)
            if player and player ~= LocalPlayer then
                addEsp(entity, "Player")
            else
                addEsp(entity, "Mob")
            end
        end)

        items.ChildAdded:Connect(function(item)
            addEsp(item, "Item")
        end)

        entities.ChildRemoved:Connect(removeEsp)
        items.ChildRemoved:Connect(removeEsp)
    end

    local function claimCode(code)
        local args = {
            [1] = code
        }

        Remotes.Codes:InvokeServer(unpack(args))
    end

    local function updateCharacterVariables()
        Character = LocalPlayer.Character
        HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
        Humanoid = Character:WaitForChild("Humanoid")
        Torso = Character:WaitForChild("Torso")
        Remotes = Character:WaitForChild("CharacterHandler").Remotes
    end

    local function findClosestSpot()
        local closestSpot = nil
        local closestDistance = math.huge
        local playerPosition = HumanoidRootPart.Position
        
        for _, spot in AfkSpots do
            local distance = (playerPosition - spot.Position).Magnitude
            if distance < closestDistance then
                closestSpot = spot
                closestDistance = distance
            end
        end
        return closestSpot
    end

    local function isMod(player)
        pcall(function()
            if player:GetRankInGroup(32740991) > 1 then
                return true
            else
                return false
            end
        end)
        return false
    end

    local function modJoined()
        if modNotify then
            local sound = Instance.new("Sound", workspace)
            sound.Volume = 100
            sound.SoundId = modSoundId
            sound:Play()
            sound.Ended:Wait()
            if modLeave then
                if Character then
                    local isCombat = Character:GetAttribute("CombatTag")
                    if isCombat == 0 then
                        game:GetService("TeleportService"):Teleport(14067600077)
                    else
                        if modCombatLog then
                            game:GetService("TeleportService"):Teleport(14067600077)
                        end
                    end
                end
            end
            if modDisableAll then
                walkspeedToggle:SetValue(false)
                flashStepToggle:SetValue(false)
                noclipToggle:SetValue(false)
                infJumpToggle:SetValue(false)
                flyToggle:SetValue(false)
                if mobToggle then
                    mobToggle:SetValue(false)
                end
                if missionToggle then
                    missionToggle:SetValue(false)
                end
            end
        end
    end

    --[[local function findWebhookObject(objects)
        for _, obj in ipairs(objects) do
            if obj.idx == "Webhook" then
                return obj
            end
        end
        return nil
    end]]

    --[[

        if hrp then
                    for _, parryData in ipairs(parryList) do
                        if x.Animation.AnimationId == parryData.AnimationId then
                            task.wait(parryData.Delay + autoParryOffset - (LocalPlayer:GetNetworkPing() + 0.05))
                            local distance = (HumanoidRootPart.Position - hrp.Position).Magnitude
                            if prioratizeParry then
                            Remotes.M2:FireServer()
                            end
                            if blockInputParry then
                                blockInput = true
                            end
                            if distance < parryData.Distance and autoParry then
                                parry()
                            end
                            blockInput = false
                        end
                    end
                    if recordingAnimations and not recordingAlreadyPlayed and not table.find(blacklistedAnimations, x.Animation.AnimationId) and (hrp.Position - HumanoidRootPart.Position).Magnitude < 30 then
                        recordingAlreadyPlayed = true
                        setclipboard(x.Animation.AnimationId)
                        local keyFrames = game:GetService("KeyframeSequenceProvider"):GetKeyframeSequenceAsync(x.Animation.AnimationId)
                        print(keyFrames)
                        for i, v in keyFrames:GetChildren() do
                            print(v)
                        end
                        messagebox('Animation detected!', "Animation ID copied to clipboard: " .. x.Animation.AnimationId, 0)
                    end
                end

    ]]

    
    local function getPing()
        if not game.CoreGui.RobloxGui:FindFirstChild("PerformanceStats") then return end
        local text = game:GetService("CoreGui").RobloxGui.PerformanceStats:GetChildren()[6].StatsMiniTextPanelClass.ValueLabel.Text
        text = string.gsub(text, " ms", "")
        local ping = tonumber(text)

        return ping / 1500
    end

    local function addParryTarget(entity)
        task.spawn(function()
            local humanoid = entity:WaitForChild("Humanoid")
            local hrp = entity:WaitForChild("HumanoidRootPart")
            if hrp == HumanoidRootPart then return end

            local animator = humanoid:WaitForChild("Animator")
            animator.AnimationPlayed:Connect(function(x)
            local oldAutoParryExecuted = false

            if autoParryOld then
                for _, parryData in ipairs(parryList) do
                    if x.Animation.AnimationId == parryData.AnimationId then
                        task.wait(parryData.Delay + (autoParryOffset / 1000) - getPing())
                        local distance
                        
                        local boolValue, variantValue = pcall(function()
                            distance = (HumanoidRootPart.Position - hrp.Position).Magnitude
                        end)
                        
                        if boolValue == false then
                            warn("Errored on distance check")
                        end

                        if prioratizeParry then
                            Remotes.M2:FireServer()
                        end
                        if blockInputParry then
                            blockInput = true
                        end
                        if distance < parryData.Distance and autoParry then
                            parry()
                            oldAutoParryExecuted = true
                        end
                        blockInput = false
                    end
                end
            end

            if not oldAutoParryExecuted and autoParry then
                local keyFrames = game:GetService("KeyframeSequenceProvider"):GetKeyframeSequenceAsync(x.Animation.AnimationId)
                for i, v in keyFrames:GetChildren() do
                    if v.Name == "HitFrame" then
                        task.spawn(function()
                            local targetWaitTime
                            
                            local boolValue, variantValue = pcall(function()
                                targetWaitTime =  v.Time - 0.55 + (autoParryOffset / 1000) - getPing()
                            end)
                            
                            if boolValue == false then
                                warn("Errored on target time")
                            end


                            local dodgeTimeThreshold = 0.75
                            local dodgeWaitTime

                            local boolValue, variantValue = pcall(function()
                                dodgeWaitTime = targetWaitTime - 0.2
                            end)
                            
                            if boolValue == false then
                                warn("Errored on dodge wait time")
                            end

                            if dodgeLongWindups and v.Time > dodgeTimeThreshold then
                                task.wait(dodgeWaitTime)
                                local distance

                                local boolValue, variantValue = pcall(function()
                                    distance = (HumanoidRootPart.Position - hrp.Position).Magnitude
                                end)
                                
                                if boolValue == false then
                                    warn("Errored on distance check 2")
                                end

                                local targetDistance = globalParryDistance
                                if biggerDistanceWindup then
                                    targetDistance = targetDistance + 15
                                end
                                if distance < targetDistance and autoParry then
                                    dodge(flashInstead)
                                end
                            else
                                task.wait(targetWaitTime)
                                local distance
                                local boolValue, variantValue = pcall(function()
                                    distance = (HumanoidRootPart.Position - hrp.Position).Magnitude
                                end)
                                
                                if boolValue == false then
                                    warn("Errored on distance check 3")
                                end
                                if distance < globalParryDistance and autoParry then
                                    parry()
                                end
                            end
                        end)
                    end
                end
            end

        end)

        end)
    end

    local function checkFiles()
        if not isfolder("Medusa") then
            makefolder("Medusa")
        end
        if not isfolder("Medusa/Type Soul") then
            makefolder("Medusa/Type Soul")
        end
        if not isfolder("Medusa/Type Soul/configs") then
            makefolder("Medusa/Type Soul/configs")
        end
        if not isfolder("Medusa/Type Soul/settings") then
            makefolder("Medusa/Type Soul/settings")
        end
        if not isfile("Medusa/Type Soul/autoslot.txt") then
            writefile("Medusa/Type Soul/autoslot.txt", '')
        end

        if isfile("Medusa/Type Soul/settings/autoload.txt") then
            autoLoad = readfile("Medusa/Type Soul/settings/autoload.txt")
        end
    end

    local function autoMeditate(enabled)
        if enabled then
            connections["Meditate"] = RunService.Stepped:Connect(LPH_NO_VIRTUALIZE(function()
                pcall(function()
                    if Character:GetAttribute("CurrentState") ~= "WeaponDrawn" or Character:GetAttribute("CurrentState") ~= "Meditating" then
                        Remotes.Weapon:FireServer()
                    end
                    if Character:GetAttribute("CurrentState") ~= "Meditating" then
                        Remotes.Meditate:FireServer()
                    end
                end)
            end))
        else
            if connections["Meditate"] then
                connections["Meditate"]:Disconnect()
                connections["Meditate"] = nil

                if Character:GetAttribute("CurrentState") == "Meditating" then
                    Remotes.Meditate:FireServer()
                end
            end
        end
    end

    ------------------ Loops -----------------------

    RunService.RenderStepped:Connect(function()
        if flyEnabled then
            MovementBV.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
            if MovementBV and HumanoidRootPart then
                MovementBV.Velocity = Camera.CFrame:VectorToWorldSpace(ControlModule:GetMoveVector() * flySpeed)
                MovementBV.Parent = HumanoidRootPart
            end
        elseif wsEnabled then
            MovementBV.MaxForce = Vector3.new(math.huge, 0, math.huge)
            if MovementBV and HumanoidRootPart and Humanoid then
                MovementBV.Velocity = Humanoid.MoveDirection * walkSpeed
                MovementBV.Parent = HumanoidRootPart
            end
        else
            if fsEnabled then
                if Torso.Transparency == 1 then
                    MovementBV.MaxForce = Vector3.new(math.huge, 0, math.huge)
                    if MovementBV and HumanoidRootPart and Humanoid then
                        MovementBV.Velocity = Humanoid.MoveDirection * walkSpeed
                        MovementBV.Parent = HumanoidRootPart
                    end
                else
                    MovementBV.MaxForce = Vector3.new(0, 0, 0)
                end
            else
                MovementBV.MaxForce = Vector3.new(0, 0, 0)
                MovementBV.Parent = nil
            end
        end
    end)

    local function getClosestEntity(searchType)
        local lastDistance = math.huge
        local closest = nil
        for i, entity in entities:GetChildren() do
            local rootpart = entity:FindFirstChild("HumanoidRootPart")
            if rootpart and rootpart.Parent and rootpart ~= HumanoidRootPart then
                local distance = (HumanoidRootPart.Position - rootpart.Position).Magnitude
                if distance < lastDistance and distance <= attachDistance then
                    if searchType == "Player" and Players:FindFirstChild(rootpart.Parent.Name) then
                        closest = rootpart
                    elseif searchType == "Mob" then
                        closest = rootpart
                    end
                end
            end
        end
        return closest
    end

    -------------- GUI ---------------------wwwwwwwwww

    repo = 'https://raw.githubusercontent.com/kqmeta/LinoriaLib/main/'

    Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
    ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
    SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

    local function buildUI()
        local Medusa = Library:CreateWindow({
            Title = 'Medusa - discord.gg/sXQfM2v8Td',
            Center = true,
            AutoShow = true,
            TabPadding = 8,
            MenuFadeTime = 0.2
        })
        
        local plrTab = Medusa:AddTab('Player')
        local espTab = Medusa:AddTab('ESP')
        local builderTab = Medusa:AddTab('Other')
        local other2Tab = Medusa:AddTab('Other 2')
        local keybindsTab = Medusa:AddTab('Keybinds')
        local uiSettingsTab = Medusa:AddTab("UI Settings")
        
        local MenuGroup = uiSettingsTab:AddLeftGroupbox('Menu')
        local PlayersGroup = other2Tab:AddLeftGroupbox('Players')
        MenuGroup:AddButton('Unload', function() Library:Unload() end)
        MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })
        Library.ToggleKeybind = Options.MenuKeybind
        ThemeManager:SetLibrary(Library)
        SaveManager:SetLibrary(Library)
        ThemeManager:SetFolder('Medusa')
        SaveManager:SetFolder('Medusa/Type Soul')
        SaveManager:BuildConfigSection(uiSettingsTab)
        pcall(function()
            ThemeManager:ApplyToTab(uiSettingsTab)
        end)

        local KeybindsSection = keybindsTab:AddLeftGroupbox('Keybinds')
        
        local BuilderSection = builderTab:AddLeftGroupbox('Builder')
        local ModSection = builderTab:AddLeftGroupbox('Moderator')
        local AutofarmSection = builderTab:AddRightGroupbox('Auto')
        local BossSection = builderTab:AddRightGroupbox('Boss Raid')
        local AutoSkillSection = builderTab:AddRightGroupbox('Auto Skillpoints')
        local TweenSection = builderTab:AddRightGroupbox('Tween Functions')
        local mainMenuSection = builderTab:AddLeftGroupbox('Main Menu')
        local tradeSection = builderTab:AddLeftGroupbox('Trading')
        local raidSection = builderTab:AddRightGroupbox('Raids')
        local codesSection = builderTab:AddRightGroupbox('Codes')
        local modeSection = builderTab:AddRightGroupbox('Mode')
        local MiscSection = plrTab:AddLeftGroupbox('Misc')
        local MissionSection
        if game.PlaceId ~= 16845411199 or game.PlaceId ~= 17047374266 then
            MissionSection = plrTab:AddLeftGroupbox('Mission Farm')
        end
        local CombatSection = plrTab:AddRightGroupbox('Combat')
        local MobSection
        if game.PlaceId ~= 16845411199 or game.PlaceId ~= 17047374266 then
            MobSection = plrTab:AddRightGroupbox('Mobs')
        end
        local WebhookSection = plrTab:AddRightGroupbox('Server')
        local MainEspSection = espTab:AddLeftGroupbox('ESP')
        local PlayerEspSection = espTab:AddLeftGroupbox('Player ESP')
        local MobEspSection = espTab:AddLeftGroupbox('Mob ESP')
        local NpcEspSection = espTab:AddRightGroupbox('NPC ESP')
        local ItemEspSection = espTab:AddRightGroupbox('Item ESP')

        local playerAttachSection = other2Tab:AddRightGroupbox('Attach to Players')
        local mobAttacahSection = other2Tab:AddRightGroupbox('Attach to Mobs')

        local playerFunctionsSection = other2Tab:AddLeftGroupbox('Player Functions')
        local streamerSection = other2Tab:AddLeftGroupbox('Streamer')
        local rerollSection = other2Tab:AddLeftGroupbox('Reroll')
        local boobSoul = other2Tab:AddRightGroupbox('Secret')

        local chestSizeSlider, buttSizeSlider, crotchSizeSlider
        local showButtToggle, showBoobToggle, showCrotchToggle
        local utilizeGenderToggle, applyToOthersToggle

        modeSection:AddButton({
            Text = "Highlight Maze Hollow",
            Func = function()
                local targetHollow
                local maxRedValue = 10000

                for i, hollow in ipairs(game:GetService("Workspace").InnerWorldPlots:FindFirstChild(LocalPlayer.Name .. "InnerWorld").Spawns:GetChildren()) do
                    local eyes = hollow:WaitForChild("Mask"):WaitForChild("Eyes")
                    if eyes then
                        local eyeColor = eyes.Color
                        local redValue = eyeColor.R
                        
                        if redValue < maxRedValue then
                            maxRedValue = redValue
                            targetHollow = hollow
                        end
                    end
                end

                local highlightHollow = Instance.new("Highlight")
                highlightHollow.Parent = targetHollow
                highlightHollow.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop

            end,
            DoubleClick = false
        })

        codesSection:AddButton({
            Text = "Claim Codes",
            Func = function()
                local currentCodes = game:HttpGet("https://raw.githubusercontent.com/kqmeta/Medusa/main/Codes")
                local splitCodes = splitString(currentCodes)

                for i, code in ipairs(splitCodes) do
                    print(code)
                    claimCode(code)
                end

            end,
            DoubleClick = false
        })

        --tradeSection

        rerollSection:AddDropdown('element', {
            AllowNull = true,
            Values = splitString(game:HttpGet("https://raw.githubusercontent.com/kqmeta/Medusa/main/Elements")),
            Default = nil,
            Multi = true,
        
            Text = 'Target Elements',
        
            Callback = function(Value)
                table.clear(TargetElements)
                for i, v in Value do
                    table.insert(TargetElements, i)
                end
            end
        })

        rerollSection:AddDropdown('weapon', {
            AllowNull = true,
            Values = splitString(game:HttpGet("https://raw.githubusercontent.com/kqmeta/Medusa/main/Weapons")),
            Default = nil,
            Multi = true,
        
            Text = 'Target Weapons',
        
            Callback = function(Value)
                table.clear(TargetWeapons)
                for i, v in Value do
                    table.insert(TargetWeapons, i)
                end
            end
        })

        rerollSection:AddDropdown('clan', {
            AllowNull = true,
            Values = splitString(game:HttpGet("https://raw.githubusercontent.com/kqmeta/Medusa/main/Clans")),
            Default = nil,
            Multi = true,
        
            Text = 'Target Clans',
        
            Callback = function(Value)
                table.clear(TargetClans)
                for i, v in Value do
                    table.insert(TargetClans, i)
                end
            end
        })

        rerollSection:AddDropdown('skillNumber', {
            AllowNull = true,
            Values = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "-", "="},
            Default = nil,
            Multi = false,
        
            Text = 'Inventory Number',
        
            Callback = function(Value)
                if Value == "1" then
                    rerollSkill = "One"
                elseif Value == "2" then
                    rerollSkill = "Two"
                elseif Value == "3" then
                    rerollSkill = "Three"
                elseif Value == "4" then
                    rerollSkill = "Four"
                elseif Value == "5" then
                    rerollSkill = "Five"
                elseif Value == "6" then
                    rerollSkill = "Six"
                elseif Value == "7" then
                    rerollSkill = "Seven"
                elseif Value == "8" then
                    rerollSkill = "Eight"
                elseif Value == "9" then
                    rerollSkill = "Nine"
                elseif Value == "0" then
                    rerollSkill = "Zero"
                elseif Value == "-" then
                    rerollSkill = "Minus"
                elseif Value == "=" then
                    rerollSkill = "Equals"
                end
            end
            
        })

        local rerollToggle = rerollSection:AddToggle('autoReroll', {
            Text = "Auto Reroll",
            Default = false,
            Callback = function(enabled)
                if enabled then
                    connections["AutoReroll"] = LocalPlayer.CharacterAdded:Connect(function()
                        task.wait(0.2)
                        repeat task.wait() until LocalPlayer.PlayerGui
                        repeat task.wait() until LocalPlayer.PlayerGui.ScreenEffects
                        LocalPlayer.PlayerGui.ScreenEffects.DescendantAdded:Connect(function(v)
                            if v.Name == "Notification" then
                                local text = v.Text

                                if text:sub(1, 7) == "Rolled " then
                                    text = text:sub(8)
                                end

                                local commaIndex = text:find(",")
                                if commaIndex then
                                    text = text:sub(1, commaIndex - 1)
                                end

                                local bracketIndex = text:find("%[")
                                if bracketIndex then
                                    text = text:sub(1, bracketIndex - 1)
                                end

                                text = string.gsub(text, " ", "")

                                lastRolled = text
                            end
                        end)   
                        if not (table.find(TargetElements, lastRolled) or table.find(TargetWeapons, lastRolled) or table.find(TargetClans, lastRolled)) then
                            task.wait(0.5)
                            if Character:FindFirstChild("Highlight") then
                                dodge(false)
                                repeat task.wait() until not Character:FindFirstChild("Highlight")
                                task.wait(0.2)
                                reroll()
                            end
                            reroll()
                        end               
                    end)
                    LocalPlayer.PlayerGui.ScreenEffects.DescendantAdded:Connect(function(v)
                        if v.Name == "Notification" then
                            local text = v.Text

                            if text:sub(1, 7) == "Rolled " then
                                text = text:sub(8)
                            end

                            local commaIndex = text:find(",")
                            if commaIndex then
                                text = text:sub(1, commaIndex - 1)
                            end

                            local bracketIndex = text:find("%[")
                            if bracketIndex then
                                text = text:sub(1, bracketIndex - 1)
                            end

                            text = string.gsub(text, " ", "")

                            lastRolled = text
                        end
                    end)  
                    if not (table.find(TargetElements, lastRolled) or table.find(TargetWeapons, lastRolled) or table.find(TargetClans, lastRolled)) then
                        task.wait(0.5)
                        if Character:FindFirstChild("Highlight") then
                            dodge(false)
                            reroll()
                        end
                        reroll()
                    end
                elseif connections["AutoReroll"] then
                    connections["AutoReroll"]:Disconnect()
                    connections["AutoReroll"] = nil
                end
            end
        })

        streamerSection:AddInput('streamerText', {
            Default = '',
            Numeric = false,
            Finished = false,
        
            Text = "Replacement Text",
        
            Placeholder = '...',
        
            Callback = function(Value)
                streamerText = Value
            end
        })

        raidSection:AddToggle('findRaid', {
            Text = "Join Raid Server",
            Default = false,
            Callback = function(enabled)
                while enabled and task.wait() do
                    if game.Players.LocalPlayer.PlayerGui.KarakuraRaidUI.Enabled then return end
                    local list = game.ReplicatedStorage.Requests.RequestServerList:InvokeServer(Places[game.PlaceId])
                    for i, v in list do
                        local CurrentRegion = game.Players.LocalPlayer.PlayerGui.Settings.Frame.Region.Text
                        local CurrentServer = game.Players.LocalPlayer.PlayerGui.Settings.Frame.CurrentServer.Text
                        local Region = v.ServerRegion
                        local isRaid = v.Raid
                        local ServerPlayers = v.ServerPlayers
                        local JobID = v.JobID
                        local ServerName = v.ServerName
                
                        local sameServer = v.JobID == game.JobId
                        
                        if isRaid and not sameServer then
                            game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, JobID, Player)
                        end
                        task.wait(0.1)
                    end
                end
            end
        })

        local raidFindToggle = raidSection:AddToggle('lootBoxes', {
            Text = "Loot Nearby Boxes",
            Default = false,
            Callback = function(enabled)
                if enabled then
                    for i, v in workspace.Lootboxes:GetChildren() do
                        task.spawn(function()
                            lootBox(v)
                        end)
                    end
                    
                    connections["LootBoxes"] = workspace.Lootboxes.ChildAdded:Connect(function(v)
                        task.spawn(function()
                            lootBox(v)
                        end)
                    end)
                elseif connections["LootBoxes"] then
                    connections["LootBoxes"]:Disconnect()
                    connections["LootBoxes"] = nil
                end
            end
        })

        raidSection:AddToggle('hideUnderground', {
            Text = "Hide until Raid Finish",
            Default = false,
            Callback = function(enabled)

                if enabled and LocalPlayer.PlayerGui.KarakuraRaidUI.Enabled then
                    originalPosition = HumanoidRootPart.CFrame
                    HumanoidRootPart.CFrame = originalPosition * CFrame.new(0, -20, 0)

                    while enabled and LocalPlayer.PlayerGui.KarakuraRaidUI.Enabled do
                        task.wait()
                        HumanoidRootPart.CFrame = originalPosition * CFrame.new(0, -20, 0)
                    end

                    task.wait(0.05)
                    HumanoidRootPart.CFrame = originalPosition
                else
                    if originalPosition then
                        HumanoidRootPart.CFrame = originalPosition
                    end
                end
            end
        })


        local streamerToggle = streamerSection:AddToggle('normalStreamer', {
            Text = "Streamer Mode",
            Default = false,
            Callback = function(enabled)
                normalStreamerEnabled(enabled)
                normalStreamerValue = enabled
            end
        })

        local ultraStreamerToggle = streamerSection:AddToggle('ultraStreamer', {
            Text = "Ultra Streamer Mode",
            Default = false,
            Callback = function(enabled)
                ultraStreamerEnabled(enabled)
                ultraStreamerValue = enabled
            end
        })

        boobSoul:AddButton({
            Text = "Boob://Soul",
            Func = function()
                if not boobsoulStarted then
                    boobsoulStarted = true

                    if not game:IsLoaded() then
                        game.Loaded:Wait()
                    end
                    
                    getsynasset = getcustomasset
                    syn_io_listdir = listfiles
                    
                    local Players = game:GetService("Players")
                    local UserInputService = game:GetService("UserInputService")
                    local RunService = game:GetService("RunService")
                    local LocalPlayer = Players.LocalPlayer
                    --
                    local function requireShit(object)
                        local object = game:GetObjects(getsynasset(object))[1]
                        object=object:Clone()
                        local source = object.Source
                        local shit = loadstring(source,object.Name)
                        local origEnv = getfenv(shit);
                        getfenv(shit).script = object;
                        getfenv(shit).require=function(what)
                            return requireShit(what);
                        end
                        local dat = {pcall(function()   
                            return shit();   
                        end)}   
                        if(dat[1]==false)then
                            warn(dat[2])
                            return nil
                        else
                            table.remove(dat,1)
                            return unpack(dat)
                        end
                    end
                    
                    local SpringClass = nil
                    local RaceData = nil
                    local KeyframeService = nil
                    local DressUp = nil
                    local GenderCalculator = nil
                    
                    local RanOnce = false
                    
                    
                    game.Close:Connect(function()
                        if not RunService:IsStudio() then
                            writefile("BoobWokenData/Configurations.txt",game["HttpService"]:JSONEncode(ConfigData))
                        else 
                            warn("heehehaha i am se lf a ware that im in stu d i o l ma")
                            warn("I Should've saved : ",game["HttpService"]:JSONEncode(ConfigData))
                        end
                    end)
                    
                    local ConfigGui = nil
                    local TrackedRigs = {}
                    
                    if not RunService:IsStudio() then
                        SpringClass = requireShit("BoobWokenData/SpringClass.rbxm")
                        RaceData = requireShit("BoobWokenData/RaceModule.rbxm")
                        KeyframeService = requireShit("BoobWokenData/KeyframeService.rbxm")
                        DressUp = requireShit("BoobWokenData/DressUpCharacter.rbxm")
                        GenderCalculator = requireShit("BoobWokenData/CalculateGender.rbxm")
                        ConfigGui = game:GetObjects(getsynasset("BoobWokenData/CustomizeGui.rbxm"))[1]
                        ConfigGui.Parent = game.CoreGui
                    else 
                        SpringClass = require(script:WaitForChild("SpringClass"))
                        RaceData = require(script:WaitForChild("RaceModule"))
                        KeyframeService = require(script:WaitForChild("KeyframeService"))
                        DressUp = require(script:WaitForChild("DressUpCharacter"))	
                        GenderCalculator = require(script:WaitForChild("CalculateGender"))
                        ConfigGui = script:WaitForChild("bwgui")
                        ConfigGui.Parent = LocalPlayer:FindFirstChildOfClass("PlayerGui")
                    end
                    
                    ConfigGui.Enabled = true
                    
                    --
                    
                    --game:GetService("Workspace").Live[".crocco7648"].CustomRig
                    
                    function BreastPhysics(Model,HumRoot,Scale)
                        if not SpringClass then
                            return
                        end
                        
                        spawn(function()
                            local P = Model:FindFirstChild("BoobJ",true)
                            local A = Model:FindFirstChild("BJ",true)
                            
                            if  P then
                                local OGC0 = P.C0
                                local OGC02 = A.C0
                    
                                local Torso = HumRoot.Parent.Torso
                    
                                local BreastSpring = SpringClass.new(Vector3.new(0,0,0))
                                BreastSpring.Target = Vector3.new(3,3,3);
                                BreastSpring.Velocity = Vector3.new(0,0,0);
                                BreastSpring.Speed = 10;
                                BreastSpring.Damper = .2;
                    
                                local AssSpring = SpringClass.new(Vector3.new(0,0,0))
                                AssSpring.Target = Vector3.new(3,3,3);
                                AssSpring.Velocity = Vector3.new(0,0,0);
                                AssSpring.Speed = 10;
                                AssSpring.Damper = .1;
                    
                    
                                local OGR = Torso.RotVelocity
                                local OGP = Torso.Position
                    
                                local StepConn 
                    
                                StepConn = RunService.Stepped:Connect(function(t,d)
                                    if not Model.Parent or not HumRoot.Parent or not HumRoot.Parent.Parent then
                                        Model:Destroy()
                                        StepConn:Disconnect()
                                        AssSpring = nil 
                                        BreastSpring = nil
                                        return
                                    end
                    
                    
                                    local CURRP = Torso.Position
                                    local CurrRot = Torso.RotVelocity
                    
                                    BreastSpring:TimeSkip(d)
                                    BreastSpring:Impulse((OGP - CURRP) + Vector3.new((OGR - CurrRot).Y/4),0,0)
                    
                                    --print(BreastSpring.Velocity.Z)
                    
                                    P.C0 = OGC0 * CFrame.Angles(
                                        math.rad(10*BreastSpring.Velocity.Y)
                                        ,
                                        math.rad(5*BreastSpring.Velocity.X)
                                        ,
                                        0
                                        --math.rad(5*BreastSpring.Velocity.Z)
                                    )
                    
                    
                                    AssSpring:TimeSkip(d)
                                    AssSpring:Impulse((OGP - CURRP) + Vector3.new(0,0,(OGR - CurrRot).Y/4))
                    
                                    --print(BreastSpring.Velocity.Z)
                    
                                    A.C0 = OGC02 * CFrame.Angles(
                                        math.rad(3*AssSpring.Velocity.Y)
                                        ,
                                        math.rad(3*AssSpring.Velocity.X)
                                        ,
                                        math.rad(2*AssSpring.Velocity.Z)
                                        --math.rad(5*BreastSpring.Velocity.Z)
                                    )
                    
                                    OGR = CurrRot
                                    OGP = CURRP
                    
                                end)
                            else 
                                local OGC02 = A.C0
                    
                                local Torso = HumRoot.Parent.Torso
                    
                                local AssSpring = SpringClass.new(Vector3.new(0,0,0))
                                AssSpring.Target = Vector3.new(3,3,3);
                                AssSpring.Velocity = Vector3.new(0,0,0);
                                AssSpring.Speed = 10;
                                AssSpring.Damper = .1;
                    
                    
                                local OGR = Torso.RotVelocity
                                local OGP = Torso.Position
                    
                    
                    
                                local StepConn 
                    
                                StepConn = RunService.Stepped:Connect(function(t,d)
                                    if not Model.Parent or not HumRoot.Parent or not HumRoot.Parent.Parent then
                                        warn("dc'd")
                                        Model:Destroy()
                                        StepConn:Disconnect()
                                        AssSpring = nil 
                                        return
                                    end
                    
                    
                                    local CURRP = Torso.Position
                                    local CurrRot = Torso.RotVelocity
                    
                    
                                    AssSpring:TimeSkip(d)
                                    AssSpring:Impulse((OGP - CURRP) + Vector3.new(0,0,(OGR - CurrRot).Y/4))
                    
                                    --print(BreastSpring.Velocity.Z)
                    
                                    A.C0 = OGC02 * CFrame.Angles(
                                        math.rad(3*AssSpring.Velocity.Y)
                                        ,
                                        math.rad(3*AssSpring.Velocity.X)
                                        ,
                                        math.rad(2*AssSpring.Velocity.Z)
                                        --math.rad(5*BreastSpring.Velocity.Z)
                                    )
                    
                                    OGR = CurrRot
                                    OGP = CURRP
                    
                                end)
                            end
                                    
                    
                        end)
                    end
                    
                    
                    local function RegisterSlider(Gui:Frame)
                        local Methods = {}
                        local RunMe = {}
                        
                        local Button = Gui.Button
                    
                        local Min,Max = 0,Gui.AbsoluteSize.X
                        local BoundaryMinX,BoundaryMaxX = Min,Max
                    
                        local CurrentValue = 0
                    
                        local IsInside = false
                        local LetGo = true
                    
                        local OgPos = Gui.Button.Position
                        local MouseX = UserInputService:GetMouseLocation().X
                    
                        local LoopConn = nil
                    
                        Button.MouseEnter:Connect(function()
                            IsInside = true
                        end)
                    
                        Button.MouseLeave:Connect(function()
                            IsInside = false
                        end)
                    
                        function Methods:SetBoundaries(min,max)
                            BoundaryMinX = Max*min
                            BoundaryMaxX = Max*max		
                        end
                    
                        function Methods:SetValue(x)
                            CurrentValue = x
                            Gui.Button.Position = UDim2.fromOffset(Max*x,OgPos.Y.Offset)
                        end
                    
                    
                        function Methods:GetValue()
                            return CurrentValue
                        end
                        
                        Methods.Updated = {
                            Connect = function(self,func)
                                local Index = #RunMe+1
                                RunMe[Index] = func
                                            
                                return {
                                    Disconnect = function(self)
                                        RunMe[Index] = nil
                                    end,
                                }
                                
                            end,
                        }
                    
                        UserInputService.InputBegan:Connect(function(io,gpe)
                            if io.UserInputType == Enum.UserInputType.MouseButton1 then
                                if IsInside == true then
                                    OgPos = Gui.Button.Position
                                    MouseX = UserInputService:GetMouseLocation().X
                    
                                    LetGo = false
                                    LoopConn = RunService.RenderStepped:Connect(function()
                                        if LetGo == true then
                                            LoopConn:Disconnect()
                                        else 
                                            local XDiff = UserInputService:GetMouseLocation().X - MouseX
                                            local NewPos = OgPos + UDim2.fromOffset(XDiff,0)
                    
                                            if NewPos.X.Offset < BoundaryMinX then
                                                NewPos = UDim2.fromOffset(BoundaryMinX,OgPos.Y.Offset)
                                            elseif NewPos.X.Offset > BoundaryMaxX then
                                                NewPos = UDim2.fromOffset(BoundaryMaxX,OgPos.Y.Offset)
                                            end
                                            
                                            CurrentValue = NewPos.X.Offset/Max
                                        
                                            for _,func in pairs(RunMe) do 
                                                func(CurrentValue)
                                            end
                                            --warn(NewValue)
                                            Gui.Button.Position = NewPos
                                        end
                                    end)
                                end
                            end
                        end)
                    
                        UserInputService.InputEnded:Connect(function(io,gpe)
                            if io.UserInputType == Enum.UserInputType.MouseButton1 then
                                LetGo = true
                            end
                        end)
                    
                        return Methods
                    end
                    
                    
                    
                    local ButtSlider = RegisterSlider(ConfigGui.CharacterFrame.Characters.ButtSlider)
                    local ChestSlider = RegisterSlider(ConfigGui.CharacterFrame.Characters.ChestSlider)
                    local CrotchSlider = RegisterSlider(ConfigGui.CharacterFrame.Characters.CrotchSlider)
                    
                    local PreviousB,PreviousC,PreviousCDeez = nil,nil,nil
                    
                    
                    
                    function CheckIfValidRigAndApply(Model,ApplyPhysics,...)
                        wait(.03)
                        spawn(function()
                            wait(.6)
                            -- run asynchronysly.
                            local Player = Players:FindFirstChild(Model.Name)
                            
                            if not Player or Player ~= LocalPlayer then
                                if ConfigData.ApplyToOthers == false then
                                    return
                                end
                            end
                            
                            local HumanoidRootPart = Model:FindFirstChild("HumanoidRootPart")
                            if not HumanoidRootPart then
                                HumanoidRootPart = Model:WaitForChild("HumanoidRootPart")
                            end
                    
                            local Torso = Model:WaitForChild("Torso")		
                            local Humanoid = Model:FindFirstChild("Humanoid")
                            local x = true
                    
                    
                            if Model:FindFirstChild("CustomRig") or (Humanoid and Humanoid.RigType == Enum.HumanoidRigType.R15) then
                                return
                            end -- we dont need floating tiddies again
                            
                            local Name = Model.Name
                            if string.len(Humanoid.DisplayName) > 1 then
                                Name = Humanoid.DisplayName
                            end
                            --	warn(Name)
                            local FirstName = Name 
                            if string.find(FirstName," ") then
                                FirstName = string.sub(Name,1,string.find(FirstName," ") - 1)
                            end
                            --	warn(FirstName)
                    
                            Race,Varient = RaceData:GetRaceFromSkinTone(Torso.Color)
                            Scales = RaceData:ScaleViaNameAndRace(Name,Race)
                            Gender = GenderCalculator:DetermineGender(Model,((Player and FirstName) or nil))
                            --local Gender = 1
                    
                            local NewRig = nil
                            
                    
                            --[[
                            if Gender == 1 then	
                                NewRig = DressUp:ApplyFemBody(RaceData,Model)
                            elseif Gender == 0 then
                                --NewRig = DressUp:ApplyMaleBody(RaceData,Model)
                            elseif Gender == 2 then
                                --NewRig = DressUp:ApplyHermBody(RaceData,Model)
                            end
                            ]]
                            
                        
                    
                            if Player == LocalPlayer then
                                if ConfigData.CustomScales then
                                    if RanOnce == false then
                                        ButtSlider:SetValue(ConfigData.CustomScales.Ass)
                                        ChestSlider:SetValue(ConfigData.CustomScales.Breasts)
                                        CrotchSlider:SetValue(ConfigData.CustomScales.Dick)
                                    end
                                    
                                    if ConfigData.UtilizeGender and Gender == 0 then
                                        NewRig = DressUp:ApplyMaleBody(RaceData,Model,ConfigData.CustomScales)
                                    else 
                                        NewRig = DressUp:ApplyFemBody(RaceData,Model,ConfigData.CustomScales)
                                    end
                                    
                                else 
                                    if RanOnce == false then
                                        ButtSlider:SetValue(Scales.Ass)
                                        ChestSlider:SetValue(Scales.Breasts)
                                        CrotchSlider:SetValue(Scales.Dick)
                                    end
                                    
                                    if ConfigData.UtilizeGender and Gender == 0 then
                                        NewRig = DressUp:ApplyMaleBody(RaceData,Model,Scales)
                                    else 
                                        NewRig = DressUp:ApplyFemBody(RaceData,Model,Scales)
                                    end			
                                end		
                    
                                buttSizeSlider.Callback = function(value)
                                    ConfigData.CustomScales.Ass = value
                                    DressUp.ScalingFunctions:AssScaler(NewRig, value)
                                end

                                showButtToggle.Callback = function(enabled)
                                        ConfigData.ShowButt = enabled
                                        ConfigGui.CharacterFrame.Characters.ButtButton.Tick.TextLabel.Visible = enabled
                                        
                                        for _,v in pairs(TrackedRigs) do 
                                            pcall(function()
                                                v.T.RT.Butt["Left Cheek"].Transparency = enabled and 0 or 1
                                                v.T.RT.Butt["Right Cheek"].Transparency = enabled and 0 or 1
                                                v.T.RT.Butt["Left Cheek"].Shirt.Transparency = enabled and 0 or 1
                                                v.T.RT.Butt["Right Cheek"].Shirt.Transparency = enabled and 0 or 1
                                                v.T.RT.Butt["Left Cheek"].Pants.Transparency = enabled and 0 or 1
                                                v.T.RT.Butt["Right Cheek"].Pants.Transparency = enabled and 0 or 1
                                            end)
                                        end
                                    end
                        
                                chestSizeSlider.Callback = function(value)
                                    ConfigData.CustomScales.Breasts = value
                                    if NewRig.T.RT:FindFirstChild("Bust") then
                                        DressUp.ScalingFunctions:BreastScaler(NewRig, value)
                                    end
                                end

                                showBoobToggle.Callback = function(enabled)
                                        ConfigData.ShowChest = enabled
                                        ConfigGui.CharacterFrame.Characters.ChestButton.Tick.TextLabel.Visible = enabled
                                        
                                        for _,v in pairs(TrackedRigs) do 
                                            pcall(function()
                                                if v.T.RT:FindFirstChild("Bust") then
                                                    v.T.RT.Bust.Shirt.Transparency = enabled and 0 or 1
                                                    v.T.RT.Bust.Pants.Transparency = enabled and 0 or 1
                                                    v.T.RT.Bust.VisualBust.Transparency = enabled and 0 or 1
                                                    v.T.RT.Bust.VisualBust.Are.Transparency = enabled and 0 or 1
                                                end
                                            end)
                                        end
                                    end
                            
                                crotchSizeSlider.Callback = function(value)
                                    ConfigData.CustomScales.Dick = value
                                    if NewRig.T.RT:FindFirstChild("Groin") then
                                        DressUp.ScalingFunctions:CrotchScaler(NewRig, value)
                                    end
                                end

                                showCrotchToggle.Callback = function(enabled)
                                        ConfigData.ShowCrotch = enabled
                                        ConfigGui.CharacterFrame.Characters.CrotchButton.Tick.TextLabel.Visible = enabled
                                        
                                        for _,v in pairs(TrackedRigs) do 
                                            pcall(function()
                                                if v.T.RT:FindFirstChild("Groin") then
                                                    v.T.RT.Groin.Shirt.Transparency = enabled and 0 or 1
                                                    v.T.RT.Groin.Pants.Transparency = enabled and 0 or 1
                                                    v.T.RT.Groin.Transparency = enabled and 0 or 1
                                                end
                                            end)
                                        end
                                    end
                                
                                utilizeGenderToggle.Callback = function(enabled)
                                        ConfigData.UtilizeGender = enabled
                                        ConfigGui.CharacterFrame.Characters.GenderButton.Tick.TextLabel.Visible = enabled
                                        
                                        if enabled then
                                            for i,v in pairs(TrackedRigs) do
                                                if v.Parent then
                                                    local Model = v.Parent
                                                    local Humanoid = Model:FindFirstChildOfClass("Humanoid")
                                                    
                                                    local Name = Model.Name
                                                    if string.len(Humanoid.DisplayName) > 1 then
                                                        Name = Humanoid.DisplayName
                                                    end
                                                    local FirstName = Name 
                                                    if string.find(FirstName, " ") then
                                                        FirstName = string.sub(Name, 1, string.find(FirstName, " ") - 1)
                                                    end
                                                    
                                                    local Gender = GenderCalculator:DetermineGender(Model, ((Players:FindFirstChild(Model.Name) and FirstName) or nil))
                                                    
                                                    if Gender == 0 and v.Name == "FemRig" then
                                                        v:Destroy()
                                                        CheckIfValidRigAndApply(Model, not (Model.Parent.Name == "NPCs" or false))  
                                                    end                    
                                                else 
                                                    TrackedRigs[i] = nil
                                                end
                                            end
                                        else
                                            for i,v in pairs(TrackedRigs) do
                                                if v.Parent then
                                                    local Model = v.Parent
                                                    if v.Name ~= "FemRig" then
                                                        v:Destroy()
                                                        CheckIfValidRigAndApply(Model, not (Model.Parent.Name == "NPCs" or false))  
                                                    end                    
                                                else 
                                                    TrackedRigs[i] = nil
                                                end
                                            end    
                                        end
                                    end
                    
                                if RanOnce == false then
                                    RanOnce = true
                                end
                            else 
                                if ConfigData.UtilizeGender and Gender == 0 then
                                    NewRig = DressUp:ApplyMaleBody(RaceData,Model,Scales)
                                else 
                                    NewRig = DressUp:ApplyFemBody(RaceData,Model,Scales)
                                end			
                            end
                            
                            if NewRig then
                                
                                if not ConfigData.ShowButt then
                                    NewRig.T.RT.Butt["Left Cheek"].Transparency = 1
                                    NewRig.T.RT.Butt["Right Cheek"].Transparency = 1
                                    NewRig.T.RT.Butt["Left Cheek"].Shirt.Transparency = 1
                                    NewRig.T.RT.Butt["Right Cheek"].Shirt.Transparency = 1
                                    NewRig.T.RT.Butt["Left Cheek"].Pants.Transparency = 1
                                    NewRig.T.RT.Butt["Right Cheek"].Pants.Transparency = 1
                                end
                                
                                if not ConfigData.ShowChest and NewRig.T.RT:FindFirstChild("Bust") then
                                    NewRig.T.RT.Bust.Shirt.Transparency = 1
                                    NewRig.T.RT.Bust.Pants.Transparency = 1
                                    NewRig.T.RT.Bust.VisualBust.Transparency = 1
                                    NewRig.T.RT.Bust.VisualBust.Are.Transparency = 1
                                end
                                
                                if not ConfigData.ShowCrotch and NewRig.T.RT:FindFirstChild("Groin") then
                                    NewRig.T.RT.Groin.Shirt.Transparency = 1
                                    NewRig.T.RT.Groin.Pants.Transparency = 1
                                    NewRig.T.RT.Groin.Transparency = 1
                                end
                                
                                TrackedRigs[#TrackedRigs+1] = NewRig
                    
                                if ApplyPhysics then
                                    
                                    if not HumanoidRootPart or not HumanoidRootPart.Parent or HumanoidRootPart.Parent ~= Model or Model.Parent == nil then
                                        NewRig:Destroy()
                                    else 
                                        BreastPhysics(NewRig,HumanoidRootPart,1)
                                    end
                    
                                    --[[
                                    if Gender == 1 then
                                        BreastPhysics(NewRig,HumanoidRootPart,1)	
                                    end
                                    ]]
                                end
                            else 
                                warn("Unsuccessfull, "..tostring(Model))
                                return
                            end
                    
                            return NewRig
                        end)
                    end
                    
                    -- dw
                    local NPCADDED = nil
                    local LIVEADDED = nil
                    -- lol
                    
                    -- Add Toggle for Apply to Others
                    applyToOthersToggle.Callback = function(enabled)
            ConfigData.ApplyToOthers = enabled
            ConfigGui.CharacterFrame.Characters.ReplicateButton.Tick.TextLabel.Visible = enabled
            
            if not enabled then
                -- Disconnect existing listeners if they exist
                if NPCADDED then
                    NPCADDED:Disconnect()
                    NPCADDED = nil
                end
                
                if LIVEADDED then
                    LIVEADDED:Disconnect()
                    LIVEADDED = nil	
                end
                
                -- Loop through tracked rigs and remove non-local player models
                for i, Rig in pairs(TrackedRigs) do
                    if Rig.Parent then
                        local Model = Rig.Parent
                        if not (Players:FindFirstChild(Model.Name) == LocalPlayer) then
                            TrackedRigs[i] = nil
                            Rig:Destroy()
                            
                            pcall(function()
                                Model["Left Leg"].Transparency = 0
                                Model["Right Leg"].Transparency = 0
                                Model["Torso"].Transparency = 0
                                Model["Right Arm"].Transparency = 0
                                Model["Left Arm"].Transparency = 0
                            end)	
                        end
                    else 
                        TrackedRigs[i] = nil
                    end
                end
            else
                -- If enabled, you may want to add functionality for applying changes to others
                -- Connect necessary listeners or perform other actions here
            end
        end

                    
                    
                    ConfigGui.CharacterFrame.Characters.ButtButton.Toggle.MouseButton1Click:Connect(function()
                        ConfigData.ShowButt = not ConfigData.ShowButt
                        ConfigGui.CharacterFrame.Characters.ButtButton.Tick.TextLabel.Visible = ConfigData.ShowButt
                        
                        if ConfigData.ShowButt then
                            for _,v in pairs(TrackedRigs) do 
                                pcall(function()
                                    v.T.RT.Butt["Left Cheek"].Transparency = 0
                                    v.T.RT.Butt["Right Cheek"].Transparency = 0
                                    v.T.RT.Butt["Left Cheek"].Shirt.Transparency = 0
                                    v.T.RT.Butt["Right Cheek"].Shirt.Transparency = 0
                                    v.T.RT.Butt["Left Cheek"].Pants.Transparency = 0
                                    v.T.RT.Butt["Right Cheek"].Pants.Transparency = 0
                                end)
                            end	
                        else 
                            for _,v in pairs(TrackedRigs) do 
                                pcall(function()
                                    v.T.RT.Butt["Left Cheek"].Transparency = 1
                                    v.T.RT.Butt["Right Cheek"].Transparency = 1
                                    v.T.RT.Butt["Left Cheek"].Shirt.Transparency = 1 -- REMEMBER THISSS OK
                                    v.T.RT.Butt["Right Cheek"].Shirt.Transparency = 1
                                    v.T.RT.Butt["Left Cheek"].Pants.Transparency = 1
                                    v.T.RT.Butt["Right Cheek"].Pants.Transparency = 1
                                end)
                            end	
                        end
                        
                    end)
                    
                    ConfigGui.CharacterFrame.Characters.ChestButton.Toggle.MouseButton1Click:Connect(function()
                        ConfigData.ShowChest = not ConfigData.ShowChest
                        ConfigGui.CharacterFrame.Characters.ChestButton.Tick.TextLabel.Visible = ConfigData.ShowChest
                        
                        if ConfigData.ShowChest then
                            for _,v in pairs(TrackedRigs) do 
                                pcall(function()
                                    if v.T.RT:FindFirstChild("Bust") then
                                        v.T.RT.Bust.Shirt.Transparency = 0
                                        v.T.RT.Bust.Pants.Transparency = 0
                                        v.T.RT.Bust.VisualBust.Transparency = 0
                                        v.T.RT.Bust.VisualBust.Are.Transparency = 0
                                    end
                                end)
                            end
                        else 
                            for _,v in pairs(TrackedRigs) do 
                                pcall(function()
                                    if v.T.RT:FindFirstChild("Bust") then
                                        v.T.RT.Bust.Shirt.Transparency = 1
                                        v.T.RT.Bust.Pants.Transparency = 1
                                        v.T.RT.Bust.VisualBust.Transparency = 1
                                        v.T.RT.Bust.VisualBust.Are.Transparency = 1
                                    end
                                end)
                            end
                        end
                        
                    end)
                    
                    ConfigGui.CharacterFrame.Characters.CrotchButton.Toggle.MouseButton1Click:Connect(function()
                        ConfigData.ShowCrotch = not ConfigData.ShowCrotch
                        ConfigGui.CharacterFrame.Characters.CrotchButton.Tick.TextLabel.Visible = ConfigData.ShowCrotch
                    
                        if ConfigData.ShowCrotch then
                            for _,v in pairs(TrackedRigs) do 
                                pcall(function()
                                    if v.T.RT:FindFirstChild("Groin") then
                                        v.T.RT.Groin.Shirt.Transparency = 0
                                        v.T.RT.Groin.Pants.Transparency = 0
                                        v.T.RT.Groin.Transparency = 0
                                    end
                                end)
                            end
                        else 
                            for _,v in pairs(TrackedRigs) do 
                                pcall(function()
                                    if v.T.RT:FindFirstChild("Groin") then
                                        v.T.RT.Groin.Shirt.Transparency = 1
                                        v.T.RT.Groin.Pants.Transparency = 1
                                        v.T.RT.Groin.Transparency = 1
                                    end
                                end)
                            end
                        end
                    
                    end)
                    
                    
                    ConfigGui.CharacterFrame.Characters.GenderButton.Toggle.MouseButton1Click:Connect(function()
                        ConfigData.UtilizeGender = not ConfigData.UtilizeGender
                        ConfigGui.CharacterFrame.Characters.GenderButton.Tick.TextLabel.Visible = ConfigData.UtilizeGender
                        
                        
                        if ConfigData.UtilizeGender then
                            for i,v in pairs(TrackedRigs) do
                                if v.Parent then
                                    local Model = v.Parent
                                    local Humanoid = Model:FindFirstChildOfClass("Humanoid")
                    
                                    local Name = Model.Name
                                    if string.len(Humanoid.DisplayName) > 1 then
                                        Name = Humanoid.DisplayName
                                    end
                                    --	warn(Name)
                                    local FirstName = Name 
                                    if string.find(FirstName," ") then
                                        FirstName = string.sub(Name,1,string.find(FirstName," ") - 1)
                                    end
                                    --	warn(FirstName)
                    
                                    local Gender = GenderCalculator:DetermineGender(Model,((Players:FindFirstChild(Model.Name) and FirstName) or nil))
                    
                                    if Gender == 0 and v.Name == "FemRig" then
                                        v:Destroy()
                                        CheckIfValidRigAndApply(Model,not (Model.Parent.Name == "NPCs" or false))  
                                    end					
                                else 
                                    TrackedRigs[i] = nil
                                end
                        
                            end
                        else 
                            for i,v in pairs(TrackedRigs) do
                                if v.Parent then
                                    local Model = v.Parent
                                    if v.Name ~= "FemRig" then
                                        v:Destroy()
                                        CheckIfValidRigAndApply(Model,not (Model.Parent.Name == "NPCs" or false))  
                                    end					
                                else 
                                    TrackedRigs[i] = nil
                                end
                        
                            end	
                        end
                    end)
                    
                    if not RunService:IsStudio() then
                        ConfigGui.CreditF.Kofi.MouseButton1Click:Connect(function()
                            setclipboard("https://ko-fi.com/ukiyodev")
                            ConfigGui.CreditF.PaddinglessBehavoir.Copied.Visible = true
                            delay(1,function()
                                ConfigGui.CreditF.PaddinglessBehavoir.Copied.Visible = false
                            end)
                        end)
                        
                        ConfigGui.CreditF.Twitter.MouseButton1Click:Connect(function()
                            setclipboard("https://twitter.com/Geno_Dev")
                            ConfigGui.CreditF.PaddinglessBehavoir.Copied.Visible = true
                            delay(1,function()
                                ConfigGui.CreditF.PaddinglessBehavoir.Copied.Visible = false
                            end)
                        end)
                    end
                    
                    ConfigGui.CharacterFrame.Credit.ClickMe.MouseButton1Click:Connect(function()
                        ConfigGui.CreditF.Visible = not ConfigGui.CreditF.Visible
                    end)
                    
                    ConfigGui.CharacterFrame.Characters.CrotchButton.Tick.TextLabel.Visible = ConfigData.ShowCrotch
                    ConfigGui.CharacterFrame.Characters.ReplicateButton.Tick.TextLabel.Visible = ConfigData.ApplyToOthers
                    ConfigGui.CharacterFrame.Characters.ChestButton.Tick.TextLabel.Visible = ConfigData.ShowChest
                    ConfigGui.CharacterFrame.Characters.ButtButton.Tick.TextLabel.Visible = ConfigData.ShowButt
                    ConfigGui.CharacterFrame.Characters.GenderButton.Tick.TextLabel.Visible = ConfigData.UtilizeGender
                    
                    UserInputService.InputBegan:Connect(function(io,gpe)
                        if not gpe then
                            if io.KeyCode == Enum.KeyCode.LeftAlt and UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
                                ConfigGui.CharacterFrame.Visible = not ConfigGui.CharacterFrame.Visible
                                if not ConfigGui.CharacterFrame.Visible then
                                    ConfigGui.CreditF.Visible = false
                                end
                            end
                        end
                    end)
                    
                    if (game.CreatorId == 5212858 or RunService:IsStudio()) then
                        local LiveFolder = workspace:WaitForChild("Live")
                        local NPCFolder = workspace:WaitForChild("NPCs")
                    
                        for i,m in pairs(LiveFolder:GetChildren()) do
                            if m:IsA("Model") then
                                CheckIfValidRigAndApply(m,true)
                            end
                        end
                    
                        LIVEADDED = LiveFolder.ChildAdded:Connect(function(m)
                            if m:IsA("Model") then
                                warn(m:GetFullName())
                                CheckIfValidRigAndApply(m,true)
                            end
                        end)
                    
                        for i,m in pairs(NPCFolder:GetChildren()) do
                            if m:IsA("Model") then
                                CheckIfValidRigAndApply(m,false)
                            end
                        end	
                    
                        NPCADDED = NPCFolder.ChildAdded:Connect(function(m)
                            if m:IsA("Model") then
                                CheckIfValidRigAndApply(m,false)
                            end
                        end)
                    
                    else 
                        --if game.CreatorId == 5212858 then
                        for i,v in pairs(Players:GetPlayers()) do 
                    
                            if v.Character then 
                                CheckIfValidRigAndApply(v.Character,true)    
                            end
                    
                            v.CharacterAdded:Connect(function()
                                spawn(function()
                                    wait(1)
                                    CheckIfValidRigAndApply(v.Character,true)  
                                end)  
                            end)
                        end
                    
                        NPCADDED = Players.PlayerAdded:Connect(function(v)
                            if v.Character then 
                                CheckIfValidRigAndApply(v.Character,true)    
                            end
                            v.CharacterAdded:Connect(function()
                                spawn(function()
                                    wait(1)
                                    CheckIfValidRigAndApply(v.Character,true)  
                                end)  
                            end)  
                        end)
                    end

                end
            end,
            DoubleClick = false
        })

        buttSizeSlider = boobSoul:AddSlider('buttScale', {
            Text = 'Butt Size',
            Default = 0.5,
            Min = 0.1,
            Max = 1,
            Rounding = 1,
            Compact = false,
            Callback = function(value)
            end
        })

        showButtToggle = boobSoul:AddToggle('showButt', {
            Text = "Show Butt",
            Default = ConfigData.ShowButt,
            Callback = function(enabled)
            end
        })

        chestSizeSlider = boobSoul:AddSlider('chestScale', {
            Text = 'Chest Size',
            Default = 0.5,
            Min = 0.1,
            Max = 1,
            Rounding = 1,
            Compact = false,
            Callback = function(value)
            end
        })

        showBoobToggle = boobSoul:AddToggle('showChest', {
            Text = "Show Chest",
            Default = ConfigData.ShowChest,
            Callback = function(enabled)
                ConfigData.ShowChest = enabled
                ConfigGui.CharacterFrame.Characters.ChestButton.Tick.TextLabel.Visible = enabled
                
                for _,v in pairs(TrackedRigs) do 
                    pcall(function()
                        if v.T.RT:FindFirstChild("Bust") then
                            v.T.RT.Bust.Shirt.Transparency = enabled and 0 or 1
                            v.T.RT.Bust.Pants.Transparency = enabled and 0 or 1
                            v.T.RT.Bust.VisualBust.Transparency = enabled and 0 or 1
                            v.T.RT.Bust.VisualBust.Are.Transparency = enabled and 0 or 1
                        end
                    end)
                end
            end
        })

        crotchSizeSlider = boobSoul:AddSlider('crotchScale', {
            Text = 'Crotch Size',
            Default = 0.5,
            Min = 0.1,
            Max = 1,
            Rounding = 1,
            Compact = false,
            Callback = function(value)
            end
        })

        showCrotchToggle = boobSoul:AddToggle('showCrotch', {
            Text = "Show Crotch",
            Default = ConfigData.ShowCrotch,
            Callback = function(enabled)
            end
        })

        utilizeGenderToggle = boobSoul:AddToggle('utilizeGender', {
            Text = "Utilize Gender",
            Default = ConfigData.UtilizeGender,
            Callback = function(enabled)
            end
        })

        applyToOthersToggle = boobSoul:AddToggle('applyToOthers', {
            Text = "Apply to Others",
            Default = ConfigData.ApplyToOthers,
            Callback = function(enabled)
            end
        })

        boobSoul:AddLabel('check #boobsoul channel', true)
        boobSoul:AddLabel('this was requested!!!!', true)

        playerFunctionsSection:AddToggle('fastSwing', {
            Text = "Fast Swing",
            Default = false,
            Callback = function(enabled)
            end
        })

        playerFunctionsSection:AddToggle('noShake', {
            Text = "No Camera Shake",
            Default = false,
            Callback = function(enabled)
            end
        })

        playerFunctionsSection:AddToggle('noEffects', {
            Text = "No Screen Effects",
            Default = false,
            Callback = function(enabled)
            end
        })

        playerFunctionsSection:AddToggle('forceShiftlock', {
            Text = "Force Shiftlock",
            Default = false,
            Callback = function(enabled)
            end
        })

        local attachBackToggle = playerAttachSection:AddToggle('attach', {
            Text = "Attach to Back",
            Default = false,
            Callback = function(enabled)
                if enabled then
                    connections["Attach"] = RunService.RenderStepped:Connect(function()
                        local closest = getClosestEntity("Player")
                        local humanoid = closest.Parent:FindFirstChild("Humanoid")
                        if closest and humanoid then
                            if followMovement then
                                HumanoidRootPart.CFrame = closest.CFrame * CFrame.new(humanoid.MoveDirection) * CFrame.new(attachMultiplier, attachMultiplier, attachMultiplier)
                            else
                                HumanoidRootPart.CFrame = closest.CFrame
                            end
                        end
                    end)
                else
                    if connections["Attach"] then
                        connections["Attach"]:Disconnect()
                        connections["Attach"] = nil
                    end
                end
            end
        })

        playerAttachSection:AddToggle('followMovement', {
            Text = "Follow Movement",
            Default = false,
            Callback = function(enabled)
                followMovement = enabled
            end
        })

        playerAttachSection:AddSlider('attachPrixomity', {
            Text = 'Target Proximity',
            Default = 10,
            Min = 1,
            Max = 20,
            Rounding = 0,
            Compact = false,
            Callback = function(Value)
                attachDistance = Value
            end
        })

        playerAttachSection:AddSlider('attachDistance', {
            Text = 'Movement Multiplier',
            Default = 1,
            Min = 1,
            Max = 10,
            Rounding = 0,
            Compact = false,
            Callback = function(Value)
                attachMultiplier = Value
            end
        })




        local mobattachBackToggle = mobAttacahSection:AddToggle('mobAttach', {
            Text = "Attach to Back",
            Default = false,
            Callback = function(enabled)
                if enabled then
                    connections["Attach"] = RunService.RenderStepped:Connect(function()
                        local closest = getClosestEntity("Mob")
                        local humanoid = closest.Parent:FindFirstChild("Humanoid")
                        if closest then
                            if mobfollowMovement then
                                HumanoidRootPart.CFrame = closest.CFrame * CFrame.new(humanoid.MoveDirection) * CFrame.new(mobattachMultiplier, mobattachMultiplier, mobattachMultiplier)
                            else
                                HumanoidRootPart.CFrame = closest.CFrame
                            end
                        end
                    end)
                else
                    if connections["Attach"] then
                        connections["Attach"]:Disconnect()
                        connections["Attach"] = nil
                    end
                end
            end
        })

        mobAttacahSection:AddToggle('mobFollowMovement', {
            Text = "Follow Movement",
            Default = false,
            Callback = function(enabled)
                mobfollowMovement = enabled
            end
        })

        mobAttacahSection:AddSlider('mobAttachPrixomity', {
            Text = 'Target Proximity',
            Default = 10,
            Min = 1,
            Max = 20,
            Rounding = 0,
            Compact = false,
            Callback = function(Value)
                mobattachDistance = Value
            end
        })

        mobAttacahSection:AddSlider('mobAttachDistance', {
            Text = 'Movement Multiplier',
            Default = 1,
            Min = 1,
            Max = 10,
            Rounding = 0,
            Compact = false,
            Callback = function(Value)
                mobattachMultiplier = Value
            end
        })



        AutoSkillSection:AddToggle('autoHakuda', {
            Text = "Put SP Into Hakuda",
            Default = false,
            Callback = function(enabled)
                local statName = "Hakuda"
                if enabled then
                    connections[statName] = RunService.Stepped:Connect(LPH_NO_VIRTUALIZE(function()
                        pcall(addSP, statName)
                    end))
                else
                    if connections[statName] then
                        pcall(function()
                            connections[statName]:Disconnect()
                            connections[statName] = nil
                        end)
                    end
                end
            end
        })
        
        AutoSkillSection:AddToggle('autoKendo', {
            Text = "Put SP Into Kendo",
            Default = false,
            Callback = function(enabled)
                local statName = "Kendo"
                if enabled then
                    connections[statName] = RunService.Stepped:Connect(LPH_NO_VIRTUALIZE(function()
                        pcall(addSP, statName)
                    end))
                else
                    if connections[statName] then
                        pcall(function()
                            connections[statName]:Disconnect()
                            connections[statName] = nil
                        end)
                    end
                end
            end
        })
        
        AutoSkillSection:AddToggle('autoKido', {
            Text = "Put SP Into Kido",
            Default = false,
            Callback = function(enabled)
                local statName = "Kido"
                if enabled then
                    connections[statName] = RunService.Stepped:Connect(LPH_NO_VIRTUALIZE(function()
                        pcall(addSP, statName)
                    end))
                else
                    if connections[statName] then
                        pcall(function()
                            connections[statName]:Disconnect()
                            connections[statName] = nil
                        end)
                    end
                end
            end
        })
        
        AutoSkillSection:AddToggle('autoHealing', {
            Text = "Put SP Into Healing",
            Default = false,
            Callback = function(enabled)
                local statName = "Healing"
                if enabled then
                    connections[statName] = RunService.Stepped:Connect(LPH_NO_VIRTUALIZE(function()
                        pcall(addSP, statName)
                    end))
                else
                    if connections[statName] then
                        pcall(function()
                            connections[statName]:Disconnect()
                            connections[statName] = nil
                        end)
                    end
                end
            end
        })
        
        AutoSkillSection:AddToggle('autoSpeed', {
            Text = "Put SP Into Speed",
            Default = false,
            Callback = function(enabled)
                local statName = "Speed"
                if enabled then
                    connections[statName] = RunService.Stepped:Connect(LPH_NO_VIRTUALIZE(function()
                        pcall(addSP, statName)
                    end))
                else
                    if connections[statName] then
                        pcall(function()
                            connections[statName]:Disconnect()
                            connections[statName] = nil
                        end)
                    end
                end
            end
        })

        local playerDropdown = PlayersGroup:AddDropdown('Player', {
            AllowNull = true,
            Values = getPlayerNames(),
            Default = nil,
            Multi = false,
        
            Text = 'Selected Player',
        
            Callback = function(Value)
                selectedPlayer = Value
            end
        })

        PlayersGroup:AddToggle('spectatePLR', {
            Text = "Spectate Player",
            Default = false,
            Callback = function(enabled)
                if enabled then
                    local selectedPlr = game:GetService("Players"):FindFirstChild(selectedPlayer)
                    if selectedPlr then
                        local charExists = selectedPlr.Character
                        if charExists then
                            local humExists = charExists:FindFirstChild("Humanoid")
                            if humExists then
                                Camera.CameraSubject = humExists
                            end
                        end
                    end
                else
                    Camera.CameraSubject = Humanoid
                end
            end
        })
        
        PlayersGroup:AddButton({
            Text = "Lerp to Player",
            Func = function()
                local selectedPlr = game:GetService("Players"):FindFirstChild(selectedPlayer)
                if selectedPlr then
                    local charExists = selectedPlr.Character
                    if charExists then
                        lerpCFrame(HumanoidRootPart, charExists:GetPivot(), 150, true, 10)
                    end
                end
            end,
            DoubleClick = false
        })

        PlayersGroup:AddButton({
            Text = "Walk to Player",
            Func = function()
                local selectedPlr = game:GetService("Players"):FindFirstChild(selectedPlayer)
                if selectedPlr then
                    local charExists = selectedPlr.Character
                    if charExists then
                        Humanoid:MoveTo(charExists:GetPivot().Position)
                    end
                end
            end,
            DoubleClick = false
        })

        PlayersGroup:AddButton({
            Text = "Copy Position",
            Func = function()
                local selectedPlr = game:GetService("Players"):FindFirstChild(selectedPlayer)
                if selectedPlr then
                    local charExists = selectedPlr.Character
                    if charExists then
                        setclipboard(tostring(charExists:GetPivot().Position))
                    end
                end
            end,
            DoubleClick = false
        })

        PlayersGroup:AddButton({
            Text = "Copy Player ID",
            Func = function()
                local selectedPlr = game:GetService("Players"):FindFirstChild(selectedPlayer)
                if selectedPlr then
                    setclipboard(selectedPlr.UserId)
                end
            end,
            DoubleClick = false
        })

        PlayersGroup:AddButton({
            Text = "Copy Distance",
            Func = function()
                local selectedPlr = game:GetService("Players"):FindFirstChild(selectedPlayer)
                if selectedPlr then
                    local charExists = selectedPlr.Character
                    if charExists then
                        local distance = (charExists:GetPivot().Position - Character:GetPivot().Position).Magnitude
                        setclipboard(distance)
                    end
                end
            end,
            DoubleClick = false
        })

        task.spawn(function()
            while task.wait(1) do
                playerDropdown:SetValues(getPlayerNames())
            end
        end)
        
        mainMenuSection:AddDropdown('Slot', {
            Values = { "A", "B", "C", "D", "E", "F"},
            Default = 1,
            Multi = false,
        
            Text = 'Slot',
        
            Callback = function(Value)
                slotToJoin = Value
                if joinSlot then
                    writefile("Medusa/Type Soul/autoslot.txt", slotToJoin)
                end
            end
        })

        mainMenuSection:AddToggle('autoPlay', {
            Text = "Auto Select Slot",
            Default = false,
            Callback = function(enabled)
                joinSlot = enabled
                if enabled then
                    writefile("Medusa/Type Soul/autoslot.txt", slotToJoin)
                else
                    writefile("Medusa/Type Soul/autoslot.txt", '')
                end
            end
        })         

        TweenSection:AddToggle('hellcat', {
            Text = "Lerp Underground",
            Default = false,
            Callback = function(enabled)
                tweenFunctionUnderground = enabled
            end
        }) 

        TweenSection:AddSlider('hellcat2',{
            Text = 'Lerp Speed',
            Default = 100,
            Min = 1,
            Max = 220,
            Rounding = 0,
            Compact = false,
            Callback = function(Value)
                tweenFunctionSpeed = Value
            end
        })

        TweenSection:AddSlider('hellcat3', {
            Text = 'Lerp Height',
            Default = 5,
            Min = 1,
            Max = 20,
            Rounding = 0,
            Compact = false,
            Callback = function(Value)
                tweenFunctionHeight = Value
            end
        })

        TweenSection:AddButton({
            Text = "Go to Trader",
            Func = function()
                lerpCFrame(HumanoidRootPart, CFrame.new(1157.67236328125, 4.600001335144043, -4999.75732421875), tweenFunctionSpeed, tweenFunctionUnderground, tweenFunctionHeight)
            end,
            DoubleClick = false
        })

        TweenSection:AddButton({
            Text = "Go to Nel",
            Func = function()
                lerpCFrame(HumanoidRootPart, CFrame.new(-134.45701599121094, 4.59999942779541, -4284.45458984375), tweenFunctionSpeed, tweenFunctionUnderground, tweenFunctionHeight)
            end,
            DoubleClick = false
        })

        TweenSection:AddButton({
            Text = "Go to Bong",
            Func = function()
                lerpCFrame(HumanoidRootPart, CFrame.new(2689.869873046875, 20.581817626953125, -3260.303466796875), tweenFunctionSpeed, tweenFunctionUnderground, tweenFunctionHeight)
            end,
            DoubleClick = false
        })

        local autoMeditateToggle

        if AutofarmSection then
        
            autoMeditateToggle = AutofarmSection:AddToggle('automeditate', {
                Text = "Auto Meditate",
                Default = false,
                Callback = function(enabled)
                    autoMeditate(enabled)
                end
            })
            
        end

       

        local bossToggle = BossSection:AddToggle('enableBoss', {
            Text = "Join Boss Raid",
            Default = false,
            Callback = function(enabled)
            end
        })

        BossSection:AddToggle('enableBoss', {
            Text = "Void Boss",
            Default = false,
            Callback = function(enabled)
            end
        })

        BossSection:AddToggle('autoReplay', {
            Text = "Auto Replay",
            Default = false,
            Callback = function(enabled)
            end
        })

        BossSection:AddSlider('replayDelay', {
            Text = 'Replay Delay',
            Default = 4,
            Min = 0,
            Max = 20,
            Rounding = 1,
            Compact = false,
        
            Callback = function(Value)
            end
        })

        BossSection:AddDropdown('bossDrop', {
            Values = {
                "Tiger king",
                "Cero king",
                "Unohana",
                "Captain of the 12th Division",
                "Captain of the 2nd Division",
                "Captain of the 3rd Division",
                "Captain of the 6th Division",
                "Captain of the 7th Division",
                "Captain of the 8th Division",
                "Captain of the 9th Division",
                "The Almighty",
                "Kenpachi",
                "The Bone King",
                "The Cero King",
                "The Fear",
                "The Head Captain",
                "The Tiger King"
            },
            Default = 1,
            Multi = false,
        
            Text = 'Selected Boss',
        
            Callback = function(Value)
            end
        })

        BossSection:AddDropdown('bossSlot', {
            Values = {
                "A",
                "B",
                "C",
                "D"
            },
            Default = 1,
            Multi = false,
        
            Text = 'Selected Slot',
        
            Callback = function(Value)
            end
        })

        BossSection:AddLabel('IMPORTANT: The boss farm has moved to a separate loadstring. Check the #boss-farm channel in the discord server.', true)

        BuilderSection:AddButton({
            Text = "Record Animations in Range",
            Func = function()   
                recordingAnimations = true
                recordingAlreadyPlayed = false
            end,
            DoubleClick = false
        })
        
        

        BuilderSection:AddInput('configTextbox', {
            Default = '',
            Numeric = false,
            Finished = false,
        
            Text = "Config Name",
        
            Placeholder = '...',
        
            Callback = function(Value)
                createConfigName = Value
            end
        })

        BuilderSection:AddInput('animationTextbox', {
            Default = '',
            Numeric = false,
            Finished = false, 
        
            Text = "Animation",
        
            Placeholder = '...',
        
            Callback = function(Value)
                createConfigAnimation = Value
            end
        })

        BuilderSection:AddSlider('distance', {
            Text = 'Distance',
            Default = 0,
            Min = 0.1,
            Max = 50,
            Rounding = 1,
            Compact = false,
        
            Callback = function(Value)
                createConfigDistance = Value
            end
        })

        BuilderSection:AddInput('delay', {
            Default = '',
            Numeric = true,
            Finished = false,
        
            Text = "Delay (in seconds)",
        
            Placeholder = '...',
        
            Callback = function(Value)
                createConfigDelay = Value
            end
        })


        BuilderSection:AddButton({
            Text = "Create Config",
            Func = function()
                createConfig(createConfigName, createConfigAnimation, createConfigDistance, createConfigDelay)
            end,
            DoubleClick = false
        })

        ModSection:AddToggle('modNotify', {
            Text = "Notify Mods",
            Default = true,
            Callback = function(enabled)
                modNotify = enabled
                if enabled then
                    for i, player in game:GetService("Players"):GetPlayers() do
                        if isMod(player) then
                            modJoined()
                        end
                    end
                end
            end
        })

        ModSection:AddInput('modSound', {
            Default = '',
            Numeric = true,
            Finished = false,
        
            Text = "Sound ID",
        
            Placeholder = '...',
        
            Callback = function(Value)
                modSoundId = "rbxassetid://" .. tostring(Value)
            end
        })


        ModSection:AddToggle('modDisable', {
            Text = "Disable All",
            Default = false,
            Callback = function(enabled)
                modDisableAll = enabled
            end
        })

        ModSection:AddToggle('modLeave', {
            Text = "Log on Join",
            Default = false,
            Callback = function(enabled)
                modLeave = enabled
            end
        })

        ModSection:AddToggle('modCombatLog', {
            Text = "Combat Log",
            Default = false,
            Callback = function(enabled)
                modCombatLog = enabled
            end
        })


        local espToggle = MainEspSection:AddToggle('espEnabled', {
            Text = "Enable ESP",
            Default = false,
            Callback = function(enabled)
                espEnabled = enabled
                task.wait(0.05)
                if enabled then
                    connections["ESP"] = RunService.RenderStepped:Connect(updateEspObjects)
                else
                    if connections["ESP"] then
                        connections["ESP"]:Disconnect()
                        connections["ESP"] = nil
                    end
                end
            end
        })

        MainEspSection:AddSlider('textSize', {
            Text = 'Text Size',
            Default = 10,
            Min = 1,
            Max = 20,
            Rounding = 0,
            Compact = false,
        
            Callback = function(Value)
                espSize = Value
            end
        })

        MainEspSection:AddDropdown('fontDropdown', {
            Values = {"UI", "System", "Plex", "Monospace"},
            Default = 1,
            Multi = false,
        
            Text = 'Font',
        
            Callback = function(Value)
                if Value == "UI" then
                    selectedFont = 0
                elseif Value == "System" then
                    selectedFont = 1
                elseif Value == "Plex" then
                    selectedFont = 2
                elseif Value == "Monospace" then
                    selectedFont = 3
                end
            end
        })
        

        ----------------------------------------

        local playerEspToggle = PlayerEspSection:AddToggle('playerEsp', {
            Text = "Enabled",
            Default = false,
            Callback = function(enabled)
                entitySettings["Player"].Esp = enabled
            end
        })
        

        PlayerEspSection:AddToggle('playerHealth', {
            Text = "Show Health",
            Default = false,
            Callback = function(enabled)
                entitySettings["Player"].Health = enabled
            end
        })
        

        PlayerEspSection:AddToggle('distanceEsp', {
            Text = "Show Distance",
            Default = false,
            Callback = function(enabled)
                entitySettings["Player"].Distance = enabled
            end
        })

        PlayerEspSection:AddToggle('playerBoxes', {
            Text = "Boxes",
            Default = false,
            Callback = function(enabled)
                entitySettings["Player"].Boxes = enabled
            end
        })      
        
        PlayerEspSection:AddToggle('playerTracers', {
            Text = "Tracers",
            Default = false,
            Callback = function(enabled)
                entitySettings["Player"].Tracers = enabled
            end
        })

        PlayerEspSection:AddToggle('playerChams', {
            Text = "Chams",
            Default = false,
            Callback = function(enabled)
                entitySettings["Player"].Chams = enabled
            end
        })

        PlayerEspSection:AddLabel('Color'):AddColorPicker('PlrColorPicker', {
            Default = Color3.new(0, 1, 0), 
            Title = 'Color', 
            Transparency = 0,
        
            Callback = function(Value)
                entitySettings["Player"].Color = Value
            end
        })

        PlayerEspSection:AddSlider('playerThickness', {
            Text = 'Tracer Thickness',
            Default = 2,
            Min = 1,
            Max = 10,
            Rounding = 0,
            Compact = false,
        
            Callback = function(Value)
                entitySettings["Player"].Thickness = Value
            end
        })

        PlayerEspSection:AddSlider('playerProximity', {
            Text = 'Distance',
            Default = 50000,
            Min = 1,
            Max = 50000,
            Rounding = 0,
            Compact = false,
        
            Callback = function(Value)
                entitySettings["Player"].Proximity = Value
            end
        })

        PlayerEspSection:AddSlider('plrBoxThickness', {
            Text = 'Box Thickness',
            Default = 2,
            Min = 1,
            Max = 10,
            Rounding = 0,
            Compact = false,
        
            Callback = function(Value)
                entitySettings["Player"].BoxThickness = Value
            end
        })

        local mobEspEnabled = MobEspSection:AddToggle('mobEsp', {
            Text = "Enabled",
            Default = false,
            Callback = function(enabled)
                entitySettings["Mob"].Esp = enabled
            end
        })
        

        MobEspSection:AddToggle('mobHealth', {
            Text = "Show Health",
            Default = false,
            Callback = function(enabled)
                entitySettings["Mob"].Health = enabled
            end
        })

        MobEspSection:AddToggle('mobdistanceEsp', {
            Text = "Show Distance",
            Default = false,
            Callback = function(enabled)
                entitySettings["Mob"].Distance = enabled
            end
        })

        MobEspSection:AddToggle('mobBoxes', {
            Text = "Boxes",
            Default = false,
            Callback = function(enabled)
                entitySettings["Mob"].Boxes = enabled
            end
        })

        MobEspSection:AddToggle('mobTracers', {
            Text = "Tracers",
            Default = false,
            Callback = function(enabled)
                entitySettings["Mob"].Tracers = enabled
            end
        })

        MobEspSection:AddToggle('mobChams', {
            Text = "Chams",
            Default = false,
            Callback = function(enabled)
                entitySettings["Mob"].Chams = enabled
            end
        })
        
        MobEspSection:AddLabel('Color'):AddColorPicker('MobColorPicker', {
            Default = Color3.new(1, 0, 0), 
            Title = 'Color', 
            Transparency = 0, 
        
            Callback = function(Value)
                entitySettings["Mob"].Color = Value
            end
        })

        MobEspSection:AddSlider('mobThickness', {
            Text = 'Tracer Thickness',
            Default = 2,
            Min = 1,
            Max = 10,
            Rounding = 0,
            Compact = false,
        
            Callback = function(Value)
                entitySettings["Mob"].Thickness = Value
            end
        })

        MobEspSection:AddSlider('mobBoxThickness', {
            Text = 'Box Thickness',
            Default = 2,
            Min = 1,
            Max = 10,
            Rounding = 0,
            Compact = false,
        
            Callback = function(Value)
                entitySettings["Mob"].BoxThickness = Value
            end
        })

        MobEspSection:AddSlider('mobProximity', {
            Text = 'Distance',
            Default = 50000,
            Min = 1,
            Max = 50000,
            Rounding = 0,
            Compact = false,
        
            Callback = function(Value)
                entitySettings["Mob"].Proximity = Value
            end
        })
        
        local npcEspToggle = NpcEspSection:AddToggle('npcEsp', {
            Text = "Enabled",
            Default = false,
            Callback = function(enabled)
                entitySettings["NPC"].Esp = enabled
                entitySettings["NonHumanoid"].Esp = Value
            end
        })
        
        NpcEspSection:AddToggle('npcdistanceEsp', {
            Text = "Show Distance",
            Default = false,
            Callback = function(enabled)
                entitySettings["NPC"].Distance = enabled
                entitySettings["NonHumanoid"].Distance = Value
            end
        })        

        NpcEspSection:AddToggle('npxBoxes', {
            Text = "Boxes",
            Default = false,
            Callback = function(enabled)
                entitySettings["NPC"].Boxes = enabled
                entitySettings["NonHumanoid"].Boxes = Value
            end
        })      

        NpcEspSection:AddToggle('npcTracers', {
            Text = "Tracers",
            Default = false,
            Callback = function(enabled)
                entitySettings["NPC"].Tracers = enabled
                entitySettings["NonHumanoid"].Tracers = Value
            end
        })

        NpcEspSection:AddToggle('npcChams', {
            Text = "Chams",
            Default = false,
            Callback = function(enabled)
                entitySettings["NPC"].Chams = enabled
                entitySettings["NonHumanoid"].Chams = Value
            end
        })

        NpcEspSection:AddLabel('Color'):AddColorPicker('NpcColorPicker', {
            Default = Color3.new(0, 0, 1), 
            Title = 'Color', 
            Transparency = 0,
        
            Callback = function(Value)
                entitySettings["NPC"].Color = Value
                entitySettings["NonHumanoid"].Color = Value
            end
        })

        NpcEspSection:AddSlider('npcThickness', {
            Text = 'Tracer Thickness',
            Default = 2,
            Min = 1,
            Max = 10,
            Rounding = 0,
            Compact = false,
        
            Callback = function(Value)
                entitySettings["NPC"].Thickness = Value
                entitySettings["NonHumanoid"].Thickness = Value
            end
        })

        NpcEspSection:AddSlider('npcBoxThickness', {
            Text = 'Box Thickness',
            Default = 2,
            Min = 1,
            Max = 10,
            Rounding = 0,
            Compact = false,
        
            Callback = function(Value)
                entitySettings["NPC"].BoxThickness = Value
                entitySettings["NonHumanoid"].BoxThickness = Value
            end
        })

        NpcEspSection:AddSlider('npcProximity', {
            Text = 'Distance',
            Default = 50000,
            Min = 1,
            Max = 50000,
            Rounding = 0,
            Compact = false,
        
            Callback = function(Value)
                entitySettings["NPC"].Proximity = Value
                entitySettings["NonHumanoid"].Proximity = Value
            end
        })

        

        ----------------------------------

        local itemEspToggle = ItemEspSection:AddToggle('itemEsp', {
            Text = "Enabled",
            Default = false,
            Callback = function(enabled)
                entitySettings["Item"].Esp = enabled
            end
        })
        
        ItemEspSection:AddToggle('itemDistanceEsp', {
            Text = "Show Distance",
            Default = false,
            Callback = function(enabled)
                entitySettings["Item"].Distance = enabled
            end
        })
        
        ItemEspSection:AddToggle('itemBoxes', {
            Text = "Boxes",
            Default = false,
            Callback = function(enabled)
                entitySettings["Item"].Boxes = enabled
            end
        })      

        ItemEspSection:AddToggle('itemTracers', {
            Text = "Tracers",
            Default = false,
            Callback = function(enabled)
                entitySettings["Item"].Tracers = enabled
            end
        })

        ItemEspSection:AddLabel('Item'):AddColorPicker('ItemColorPicker', {
            Default = Color3.new(1, 1, 0), 
            Title = 'Color', 
            Transparency = 0,
        
            Callback = function(Value)
                entitySettings["Item"].Color = Value
            end
        })

        ItemEspSection:AddSlider('itemThickness', {
            Text = 'Tracer Thickness',
            Default = 2,
            Min = 1,
            Max = 10,
            Rounding = 0,
            Compact = false,
        
            Callback = function(Value)
                entitySettings["Item"].Thickness = Value
            end
        })

        ItemEspSection:AddSlider('itemBoxThickness', {
            Text = 'Box Thickness',
            Default = 2,
            Min = 1,
            Max = 10,
            Rounding = 0,
            Compact = false,
        
            Callback = function(Value)
                entitySettings["Item"].BoxThickness = Value
            end
        })

        ItemEspSection:AddSlider('itemProximity', {
            Text = 'Distance',
            Default = 50000,
            Min = 1,
            Max = 50000,
            Rounding = 0,
            Compact = false,
        
            Callback = function(Value)
                entitySettings["Item"].Proximity = Value
            end
        })
        

        

        -------------------------------

        WebhookSection:AddInput('', {
            Default = '',
            Numeric = false,
            Finished = false,
        
            Text = "Webhook",
        
            Placeholder = '...',
        
            Callback = function(Value)
                webHook = Value
            end
        })


        local respawnButton = WebhookSection:AddButton({
            Text = 'Respawn Character',
            Func = function()
                if Humanoid then
                    Humanoid.Health = 0
                end
            end,
            DoubleClick = false
        })

        
        WebhookSection:AddButton({
            Text = "Rejoin",
            Func = function()
                if #Players:GetPlayers() <= 1 then
                    Players.LocalPlayer:Kick("\nRejoining...")
                    wait()
                    TeleportService:Teleport(game.PlaceId, Players.LocalPlayer)
                else
                    TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, Players.LocalPlayer)
                end
            end,
            DoubleClick = false
        })

        local shButton = WebhookSection:AddButton({
            Text = 'Server Hop',
            Func = function()
                serverHop()
            end,
            DoubleClick = false
        })

        WebhookSection:AddButton({
            Text = "Copy Game ID",
            Func = function()
            setclipboard(game.GameId)
            end,
            DoubleClick = false
        })

        WebhookSection:AddButton({
            Text = "Copy Place ID",
            Func = function()
            setclipboard(game.PlaceId)
            end,
            DoubleClick = false
        })

        local mobToggle = nil

        if MobSection then
            MobSection:AddDropdown('MobDropdown', {
                Values = { "Fishbone", "Frisker", "LostSoul", "Jackal", "Shinigami", "Menos", "Bawabawa", "Jidanbo" },
                Default = 1,
                Multi = false,
                Text = 'Selected Mob',
                Callback = function(Value)
                    selectedMob = Value
                end
            })
            

            mobToggle = MobSection:AddToggle('mobToggle', {
                Text = "Mob Farm",
                Default = false,
                Callback = function(enabled)
                    farmMobEnabled = enabled
                    if enabled then
                        farmMob()
                    end
                end
            })

            MobSection:AddToggle('undergroundToggle', {
                Text = "Lerp Underground",
                Default = false,
                Callback = function(enabled)
                    mobUnderground = enabled
                end
            })
        end
        
        local apToggle = CombatSection:AddToggle('parryToggle', {
            Text = "Auto Parry v2",
            Default = false,
            Callback = function(enabled)
                autoParry = enabled
            end
        })

        local apTogglev1 = CombatSection:AddToggle('parryToggle', {
            Text = "Auto Parry v1",
            Default = false,
            Callback = function(enabled)
                autoParryOld = enabled
            end
        })

        CombatSection:AddSlider('parryDistance', {
            Text = 'Parry Distance',
            Default = 20,
            Min = 1,
            Max = 50,
            Rounding = 0,
            Compact = false,
            Callback = function(Value)
                globalParryDistance = Value
            end
        })

       

        CombatSection:AddSlider('parryHold', {
            Text = 'Parry Hold',
            Default = 0.1,
            Min = 0.1,
            Max = 0.5,
            Rounding = 1,
            Compact = false,
            Callback = function(Value)
                globalParryHold = Value
            end
        })
        

        if MobSection then
            MobSection:AddSlider('farmOffset', {
                Text = 'Farm Offset',
                Default = 7,
                Min = 1,
                Max = 20,
                Rounding = 0,
                Compact = false,
                Callback = function(Value)
                    farmOffset = Value
                end
            })
            
            MobSection:AddSlider('farmSpeed', {
                Text = 'Farm Speed',
                Default = 100,
                Min = 0,
                Max = 220,
                Rounding = 0,
                Compact = false,
                Callback = function(Value)
                    farmSpeed = Value
                end
            })

            MobSection:AddSlider('lerpHeight', {
                Text = 'Lerp Height',
                Default = 5,
                Min = 1,
                Max = 20,
                Rounding = 0,
                Compact = false,
                Callback = function(Value)
                    mobHeight = Value
                end
            })

        end
        
        CombatSection:AddSlider('timingOffset', {
            Text = 'Timing Offset',
            Default = 0,
            Min = -300,
            Max = 300,
            Rounding = 0,
            Compact = false,
            Callback = function(Value)
                autoParryOffset = Value / 1000
            end
        })
        
        CombatSection:AddSlider('parryChance', {
            Text = 'Auto Parry Chance',
            Default = 100,
            Min = 0,
            Max = 100,
            Rounding = 0,
            Compact = false,
            Callback = function(Value)
                parryChance = Value
            end
        })
        
        CombatSection:AddSlider('rollChance', {
            Text = 'Roll Chance',
            Default = 0,
            Min = 0,
            Max = 100,
            Rounding = 0,
            Compact = false,
            Callback = function(Value)
                rollChance = Value
            end
        })
        
        CombatSection:AddToggle('distanceWindup', {
            Text = "Bigger Distance on Long Windups",
            Default = false,
            Callback = function(enabled)
                biggerDistanceWindup = enabled
            end
        })

        CombatSection:AddToggle('dodgeWindups', {
            Text = "Dodge Long Windups",
            Default = false,
            Callback = function(enabled)
                dodgeLongWindups = enabled
            end
        })

        CombatSection:AddToggle('flashInstead', {
            Text = "Flash Step instead of Dodge",
            Default = false,
            Callback = function(enabled)
                flashInstead = enabled
            end
        })


        
        
        CombatSection:AddToggle('inputToggle', {
            Text = "Block Input",
            Default = false,
            Callback = function(enabled)
                blockInput = enabled
            end
        })

        CombatSection:AddToggle('prioratizeParry', {
            Text = "Cancel Moves",
            Default = false,
            Callback = function(enabled)
                prioratizeParry = enabled
            end
        })
        
        local holdm1Toggle = CombatSection:AddToggle('holdToggle', {
            Text = "Hold M1",
            Default = false,
            Callback = function(enabled)
                if enabled then
                    connections['M1'] = RunService.Stepped:Connect(LPH_NO_VIRTUALIZE(function()
                        pcall(function()
                            if UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
                                game:GetService("ReplicatedStorage").Remotes.ServerCombatHandler:FireServer(unpack({[1] = "LightAttack"}))
                            end
                        end)
                    end))
                    
                else
                    pcall(function()
                        if connections['M1'] then
                            connections['M1']:Disconnect()
                            connections['M1'] = nil
                        end
                    end)
                end
            end
        })
        

        CombatSection:AddToggle('facingToggle', {
            Text = "Check if Facing Target",
            Default = false,
            Callback = function(enabled)

            end
        })
        
        CombatSection:AddToggle('facingYouToggle', {
            Text = "Check if Target Facing You",
            Default = false,
            Callback = function(enabled)

            end
        })        
        
        CombatSection:AddToggle('visualizeParry', {
            Text = "Visualize Parry",
            Default = false,
            Callback = function(enabled)
                parryDebug = enabled
            end
        })
        --------------------------
        local missionToggle = nil
        
        if MissionSection then
            missionToggle = MissionSection:AddToggle('missionToggle', {
                Text = "Auto Mission",
                Default = false,
                Callback = function(enabled)
                    autoFarm = enabled
                    if enabled then
                        autoFarm = true
                        startMission()
                    else
                        autoFarm = false
                    end
                end
            })
        end
        
        local divisionToggle = nil

        if MissionSection then
            divisionToggle = MissionSection:AddToggle('divisionToggle', {
                Text = "Auto Division Quest",
                Default = false,
                Callback = function(enabled)
                    divisionFarm = enabled
                    if enabled then
                        divisionFarm = true
                        doMinigame()
                    else
                        divisionFarm = false
                    end
                end
            })    
        end   
        
        if MissionSection then
            MissionSection:AddSlider('lerpSpeed', {
                Text = 'Lerp Speed',
                Default = 100,
                Min = 0,
                Max = 220,
                Rounding = 0,
                Compact = false,
                Callback = function(Value)
                    missionLerpSpeed = Value
                end
            })

            autoHeight = 5

            MissionSection:AddSlider('missionLerpHeight', {
                Text = 'Lerp Height',
                Default = 5,
                Min = 1,
                Max = 20,
                Rounding = 0,
                Compact = false,
                Callback = function(Value)
                    autoHeight = Value
                end
            })

            MissionSection:AddSlider('missionOffset', {
                Text = 'Farm Offset',
                Default = 7,
                Min = 1,
                Max = 20,
                Rounding = 0,
                Compact = false,
                Callback = function(Value)
                    autoOffset = Value
                end
            })
        end

        

        if MissionSection then
            MissionSection:AddToggle('lerpUndergroundMission', {
                Text = "Lerp Underground",
                Default = false,
                Callback = function(enabled)
                    autoUnderground = enabled
                end
            })

            MissionSection:AddToggle('stayUndergroundMission', {
                Text = "Stay Underground",
                Default = false,
                Callback = function(enabled)
                    missionStayBelowGround = enabled
                end
            })

            MissionSection:AddToggle('autoGripHumanoid', {
                Text = "Grip Humanoids",
                Default = false,
                Callback = function(enabled)
                    gripHumanoids = enabled
                end
            })

            MissionSection:AddToggle('hopOnCombat', {
                Text = "Serverhop on Combat Tag",
                Default = false,
                Callback = function(enabled)
                    serverHopTag = enabled
                end
            })

            MissionSection:AddToggle('autoYes', {
                Text = "Auto Yes",
                Default = false,
                Callback = function(enabled)
                    autoYes = enabled
                end
            })
        end
        
        
        
        
        local flyToggle = MiscSection:AddToggle('flyToggle', {
            Text = "Fly",
            Default = false,
            Keybind = {
                Flag = "flyKeybind",
                Mode = "Toggle"
            },
            Callback = function(enabled)
                flyEnabled = enabled
            end
        })

        if MissionSection then
            MissionSection:AddToggle('weaponEquip', {
                Text = "Auto Equip Weapon",
                Default = false,
                Callback = function(enabled)
                    if enabled then
                        connections["Weapon"] = RunService.RenderStepped:Connect(LPH_NO_VIRTUALIZE(function()
                                if Character:FindFirstChild("Right Arm") then
                                    if not Character:FindFirstChild("Right Arm"):FindFirstChildWhichIsA("Model") then
                                        Remotes.Weapon:FireServer()
                                    end
                                end
                        end))
                    else
                        if connections["Weapon"] then
                            pcall(function()
                                connections["Weapon"]:Disconnect()
                                connections["Weapon"] = nil
                            end)
                        end
                    end
                end
            })
        
            MissionSection:AddToggle('enableShikai', {
                Text = "Auto Shikai",
                Default = false,
                Callback = function(enabled)
                    if enabled then
                        connections["Shikai"] = RunService.RenderStepped:Connect(LPH_NO_VIRTUALIZE(function()
                                if Character:GetAttribute("ZanpakutoState") ~= 1 then
                                    Remotes.ReleaseShikai:FireServer()
                                end
                        end))
                    else
                        if connections["Shikai"] then
                            pcall(function()
                                connections["Shikai"]:Disconnect()
                                connections["Shikai"] = nil
                            end)
                        end
                    end
                end
            })
        end
        
        
        
        MiscSection:AddSlider('flySlider', {
            Text = 'Fly Speed',
            Default = 50,
            Min = 0,
            Max = 200,
            Rounding = 0,
            Compact = false,
            Callback = function(Value)
                flySpeed = Value
            end
        })
        

        local walkspeedToggle = MiscSection:AddToggle('walkspeedToggle', {
            Text = "WalkSpeed Toggle",
            Default = false,
            Callback = function(enabled)
                wsEnabled = enabled
            end
        })
        
        local flashstepToggle = MiscSection:AddToggle('flashStepToggle', {
            Text = "WalkSpeed Flash Step",
            Default = false,
            Callback = function(enabled)
                fsEnabled = enabled
            end
        })
        
        
        MiscSection:AddSlider('walkspeedSlider', {
            Text = 'WalkSpeed',
            Default = 16,
            Min = 0,
            Max = 200,
            Rounding = 0,
            Compact = false,
            Callback = function(Value)
                walkSpeed = Value
            end
        })
        
        
        local infJumpToggle = MiscSection:AddToggle('jumpToggle', {
            Text = "Infinite Jump",
            Default = false,
            Callback = function(enabled)
                if enabled then
                    connections["Jump"] = UserInputService.JumpRequest:Connect(function()
                        pcall(function()
                            HumanoidRootPart.Velocity = Vector3.new(HumanoidRootPart.Velocity.X, 0, HumanoidRootPart.Velocity.Z)
                            HumanoidRootPart:ApplyImpulse(Vector3.new(0, 500, 0))
                        end)
                    end)
                else
                    if connections["Jump"] then
                        pcall(function()
                            connections["Jump"]:Disconnect()
                            connections["Jump"] = nil
                        end)
                    end
                end
            end
        })
        
        
        local autoSprintToggle = MiscSection:AddToggle('sprintToggle', {
            Text = "Auto Sprint",
            Default = false,
            Callback = function(enabled)
                if enabled then
                    connections["Sprint"] = UserInputService.InputBegan:Connect(function(input, processed)
                        pcall(function()
                            if processed then return end
                        
                            if input.KeyCode == Enum.KeyCode.W then
                                Remotes.Sprint:FireServer("Pressed")
                            end
                        end)
                    end)
        
                    connections["Unsprint"] = UserInputService.InputEnded:Connect(function(input2, processed)
                        pcall(function()
                            if processed then return end
                        
                            if input2.KeyCode == Enum.KeyCode.W then
                                Remotes.Sprint:FireServer("Released")
                            end
                        end)
                    end)
                else
                    if connections["Sprint"] then
                        pcall(function()
                            connections["Sprint"]:Disconnect()
                            connections["Sprint"] = nil
                        end)
                    end
                    if connections["Unsprint"] then
                        pcall(function()
                            connections["Unsprint"]:Disconnect()
                            connections["Unsprint"] = nil
                        end)
                    end
                end
            end
        })
        
        
        MiscSection:AddSlider('fovslider', {
            Text = 'FOV',
            Default = 70,
            Min = 0,
            Max = 120,
            Rounding = 0,
            Compact = false,
            Callback = function(Value)
                Camera.FieldOfView = Value
            end
        })        
        
        local noclipToggle = MiscSection:AddToggle('noclipToggle', {
            Text = "Noclip",
            Default = false,
            Callback = function(enabled)
                if enabled then
                    connections["Noclip"] = RunService.Stepped:Connect(LPH_NO_VIRTUALIZE(function()
                        pcall(function()
                            for _,v in pairs(Character:GetDescendants()) do
                                if v:IsA('BasePart') and v.CanCollide and v.Name ~= floatName then
                                    v.CanCollide = false
                                end
                            end
                        end)
                    end))
                else
                    if connections["Noclip"] then
                        local oldJP = Humanoid.JumpHeight
                        Humanoid.JumpHeight = 0.01
                        Humanoid:ChangeState("Jumping")
                        task.wait()
                        Humanoid.JumpHeight = oldJP
                        pcall(function()
                            connections["Noclip"]:Disconnect()
                            connections["Noclip"] = nil
                        end)
                    end
                end
            end
        })
        

        
        KeybindsSection:AddLabel('Fly'):AddKeyPicker('keyPicker2', {
            Default = '',
            SyncToggleState = true,
            Mode = 'Toggle',
            Text = '',
            NoUI = false,
            Callback = function(Value)
                flyToggle:SetValue(Value)
            end,
        })
        
        KeybindsSection:AddLabel('Walkspeed'):AddKeyPicker('keyPicker3', {
            Default = '',
            SyncToggleState = true,
            Mode = 'Toggle',
            Text = '',
            NoUI = false,
            Callback = function(Value)
                walkspeedToggle:SetValue(Value)
            end,
        })
        
        KeybindsSection:AddLabel('Inf Jump'):AddKeyPicker('keyPicker4', {
            Default = '',
            SyncToggleState = true,
            Mode = 'Toggle',
            Text = '',
            NoUI = false,
            Callback = function(Value)
                infJumpToggle:SetValue(Value)
            end,
        })
        
        KeybindsSection:AddLabel('Auto Sprint'):AddKeyPicker('keyPicker5', {
            Default = '',
            SyncToggleState = true,
            Mode = 'Toggle',
            Text = '',
            NoUI = false,
            Callback = function(Value)
                autoSprintToggle:SetValue(Value)
            end,
        })
        
        KeybindsSection:AddLabel('Noclip'):AddKeyPicker('keyPicker6', {
            Default = '',
            SyncToggleState = true,
            Mode = 'Toggle',
            Text = '',
            NoUI = false,
            Callback = function(Value)
                noclipToggle:SetValue(Value)
            end,
        })
        
        KeybindsSection:AddLabel('Mission Farm'):AddKeyPicker('keyPicker7', {
            Default = '',
            SyncToggleState = true,
            Mode = 'Toggle',
            Text = '',
            NoUI = false,
            Callback = function(Value)
                missionToggle:SetValue(Value)
            end,
        })
        
        KeybindsSection:AddLabel('Division Farm'):AddKeyPicker('keyPicker8', {
            Default = '',
            SyncToggleState = true,
            Mode = 'Toggle',
            Text = '',
            NoUI = false,
            Callback = function(Value)
                divisionToggle:SetValue(Value)
            end,
        })
        
        KeybindsSection:AddLabel('Auto Parry v2'):AddKeyPicker('keyPicker0', {
            Default = '',
            SyncToggleState = true,
            Mode = 'Toggle',
            Text = '',
            NoUI = false,
            Callback = function(Value)
                apToggle:SetValue(Value)
            end,
        })
        
        KeybindsSection:AddLabel('Auto Parry v1'):AddKeyPicker('keyPicker10', {
            Default = '',
            SyncToggleState = true,
            Mode = 'Toggle',
            Text = '',
            NoUI = false,
            Callback = function(Value)
                apTogglev1:SetValue(Value)
            end,
        })

        KeybindsSection:AddLabel('Hold M1 Toggle'):AddKeyPicker('keyPicker11', {
            Default = '',
            SyncToggleState = true,
            Mode = 'Toggle',
            Text = '',
            NoUI = false,
            Callback = function(Value)
                holdm1Toggle:SetValue(Value)
            end,
        })
        
        KeybindsSection:AddLabel('Mob Farm'):AddKeyPicker('keyPicker12', {
            Default = '',
            SyncToggleState = true,
            Mode = 'Toggle',
            Text = '',
            NoUI = false,
            Callback = function(Value)
                mobToggle:SetValue(Value)
            end,
        })
        
        KeybindsSection:AddLabel('ESP Toggle'):AddKeyPicker('keyPicker13', {
            Default = '',
            SyncToggleState = true,
            Mode = 'Toggle',
            Text = '',
            NoUI = false,
            Callback = function(Value)
                espToggle:SetValue(Value)
            end,
        })
        
        KeybindsSection:AddLabel('Player ESP'):AddKeyPicker('keyPicker14', {
            Default = '',
            SyncToggleState = true,
            Mode = 'Toggle',
            Text = '',
            NoUI = false,
            Callback = function(Value)
                playerEspToggle:SetValue(Value)
            end,
        })
        
        KeybindsSection:AddLabel('Mob ESP'):AddKeyPicker('keyPicker15', {
            Default = '',
            SyncToggleState = true,
            Mode = 'Toggle',
            Text = '',
            NoUI = false,
            Callback = function(Value)
                mobEspEnabled:SetValue(Value)
            end,
        })
        
        KeybindsSection:AddLabel('NPC ESP'):AddKeyPicker('keyPicker16', {
            Default = '',
            SyncToggleState = true,
            Mode = 'Toggle',
            Text = '',
            NoUI = false,
            Callback = function(Value)
                npcEspToggle:SetValue(Value)
            end,
        })
        
        KeybindsSection:AddLabel('Item ESP'):AddKeyPicker('keyPicker17', {
            Default = '',
            SyncToggleState = true,
            Mode = 'Toggle',
            Text = '',
            NoUI = false,
            Callback = function(Value)
                itemEspToggle:SetValue(Value)
            end,
        })
        
        KeybindsSection:AddLabel('Auto Meditate'):AddKeyPicker('keyPicker18', {
            Default = '',
            SyncToggleState = true,
            Mode = 'Toggle',
            Text = '',
            NoUI = false,
            Callback = function(Value)
                autoMeditateToggle:SetValue(Value)
            end,
        })
        
        KeybindsSection:AddLabel('Streamer Mode'):AddKeyPicker('keyPicker19', {
            Default = '',
            SyncToggleState = true,
            Mode = 'Toggle',
            Text = '',
            NoUI = false,
            Callback = function(Value)
                streamerToggle:SetValue(Value)
            end,
        })
        
        KeybindsSection:AddLabel('Ultra Streamer Mode'):AddKeyPicker('keyPicker20', {
            Default = '',
            SyncToggleState = true,
            Mode = 'Toggle',
            Text = '',
            NoUI = false,
            Callback = function(Value)
                ultraStreamerToggle:SetValue(Value)
            end,
        })
        
        KeybindsSection:AddLabel('Auto Reroll'):AddKeyPicker('keyPicker21', {
            Default = '',
            SyncToggleState = true,
            Mode = 'Toggle',
            Text = '',
            NoUI = false,
            Callback = function(Value)
                rerollToggle:SetValue(Value)
            end,
        })
        
        KeybindsSection:AddLabel('Attach to Players Back'):AddKeyPicker('keyPicker22', {
            Default = '',
            SyncToggleState = true,
            Mode = 'Toggle',
            Text = '',
            NoUI = false,
            Callback = function(Value)
                attachBackToggle:SetValue(Value)
            end,
        })
        
        KeybindsSection:AddLabel('Attach to Mobs Back'):AddKeyPicker('keyPicker23', {
            Default = '',
            SyncToggleState = true,
            Mode = 'Toggle',
            Text = '',
            NoUI = false,
            Callback = function(Value)
                mobattachBackToggle:SetValue(Value)
            end,
        })        

    end

    ------------------- Init -------------------

    local function init()

        if getgenv().hookmetamethod then
            local namecall
            namecall = hookmetamethod(game, "__namecall", function(self,...)
                local args = {...}
                local method = getnamecallmethod():lower()
                if blockInputParry and not checkcaller() and method == "fireserver" then
                    return
                end
                return namecall(self,...)
            end)
        end

        updateCharacterVariables()
        LocalPlayer.CharacterAdded:Connect(function()
            updateCharacterVariables()
        end)

        initializeEsp()

        checkFiles()

        buildUI()

        SaveManager:LoadAutoloadConfig()

        for i, player in game:GetService("Players"):GetPlayers() do
            if isMod(player) and modNotify then
                modJoined()
            end
        end

        game:GetService("Players").PlayerAdded:Connect(function(player)
            pcall(function()
                if isMod(player) and modNotify then
                    modJoined()
                end
            end)
        end)

        connections["Flashstep"] = Torso:GetPropertyChangedSignal("Transparency"):Connect(function()
            if not Torso then return end
            if Torso.Transparency == 1 then
                isTorsoTransparent = true
            else
                isTorsoTransparent = false
            end
        end)

        for i, entity in entities:GetChildren() do
            task.wait()
            addParryTarget(entity)
        end
        entities.ChildAdded:Connect(addParryTarget)



        task.spawn(function()
            while task.wait(1) do
            local configs = listfiles("Medusa/Type Soul/configs")
                for i, config in ipairs(configs) do
                    local readConfig = xorDecrypt(readfile(config), encryptionKey)
                    local newSplit = readConfig:split(",")
                    local newEntry = {AnimationId = newSplit[1], Distance = tonumber(newSplit[2]), Delay = tonumber(newSplit[3])}
                    
                    local exists = false
                    for j = #parryList, 1, -1 do
                        if parryList[j].AnimationId == newEntry.AnimationId then
                            table.remove(parryList, j)
                            break
                        end
                    end
            
                    table.insert(parryList, newEntry)
                end
            end
        end)
    end

    ---------------- Start -----------------------

    init()

    end



    --[[

                ____    _______       _____                           _           _     _                 
        /\      / __ \  |__   __|  _  |  __ \                         | |         | |   (_)                
       /  \    | |  | |    | |    (_) | |__) |   ___  __   __   ___   | |  _   _  | |_   _    ___    _ __  
      / /\ \   | |  | |    | |        |  _  /   / _ \ \ \ / /  / _ \  | | | | | | | __| | |  / _ \  | '_ \ 
     / ____ \  | |__| |    | |     _  | | \ \  |  __/  \ V /  | (_) | | | | |_| | | |_  | | | (_) | | | | |
    /_/    \_\  \____/     |_|    (_) |_|  \_\  \___|   \_/    \___/  |_|  \__,_|  \__| |_|  \___/  |_| |_|
                                                                                                            
                                                                                                        

    ]]


    elseif game.GameId == 4658598196 then
        
        local workspace = game:GetService("Workspace")
        local Players = game:GetService("Players")
        local VIM = Instance.new("VirtualInputManager")
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local RunService = game:GetService("RunService")
        local TweenService = game:GetService("TweenService")
        
        local LocalPlayer = Players.LocalPlayer
        local Camera = workspace.CurrentCamera
        local titansBasePart = workspace:FindFirstChild("Titans")
        local assetsRemotes = ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET")
        
        local titanKillCooldown = 1
        local abortMissionTime = 10
        local abortMission = false
        local abortMissionTimer = nil
        
        local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
        local Humanoid
        
        local espEnabled = false
        local showDistance = false
        local selectedFont = 0
        local espSize = 15
        local espColor = Color3.new(1, 0, 0)
        local espProximity = 20000
        
        local espObjects = {}
        local connections = {}
        
        local useSkillEnabled = true
        local skillCooldown = 5
        local selectedSkill = "One"

        local lastGrab = tick()

        local keyDelaysValue = 0.1
        local firstKeyDelayValue = 0.1

        local fps = 60
        local clock = tick()

        getgenv().farmMissionToggle = nil

        --local oldBV = HumanoidRootPart:WaitForChild("BV")
        --oldBV:Destroy()
        --------------- Functions ------------
        
        local function updateCharacterVariables()
            Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
            HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
            Humanoid = Character:WaitForChild("Humanoid")
        end

        updateCharacterVariables()
        
        local function findNape(hitFolder)
            return hitFolder:FindFirstChild("Nape")
        end

        local function findClosestTitan()
            local closestMob = nil
            local closestDistance = math.huge
            local playerPosition = HumanoidRootPart.Position
            
            for _, mob in ipairs(titansBasePart:GetChildren()) do
                task.wait()
                if mob:IsA("Model") and mob:FindFirstChild("Humanoid") and mob:FindFirstChild("HumanoidRootPart") then
                    local mobPosition = mob.HumanoidRootPart.Position
                    local distance = (playerPosition - mobPosition).Magnitude
                    if distance < closestDistance and mob.Humanoid.Health > 1 then
                        closestMob = mob
                        closestDistance = distance
                    end
                end
            end
            
            return closestMob
        end
        
        local function expandNapeHitbox(hitFolder)
            local napeObject = findNape(hitFolder)
            if napeObject then
                napeObject.Size = Vector3.new(60, 120, 100)
                napeObject.Color = Color3.new(1, 0, 0)
                napeObject.Material = Enum.Material.ForceField
                napeObject.CanCollide = false
                napeObject.Anchored = false
            end
        end
        
        local function processTitans(titansBasePart)
            for _, titan in ipairs(titansBasePart:GetChildren()) do
                local hitboxesFolder = titan:FindFirstChild("Hitboxes")
                if hitboxesFolder then
                    local hitFolder = hitboxesFolder:FindFirstChild("Hit")
                    if hitFolder then
                        expandNapeHitbox(hitFolder)
                    end
                end
            end
        end
        
        local function lerpCFrame(part, targetCFrame, speed)
            local initialCFrame = part.CFrame
            local distance = (targetCFrame.Position - initialCFrame.Position).Magnitude
            local duration = distance / speed
            local startTime = tick()

            
        
            task.spawn(function()
                while tick() - startTime < duration do
                    
                    local elapsedTime = tick() - startTime
                    local lerpedPosition = initialCFrame.Position:Lerp(targetCFrame.Position, elapsedTime / duration)
                    part.CFrame = CFrame.new(lerpedPosition)
                    --HumanoidRootPart.Velocity = Vector3.new(10000, 10000, 10000)
                    task.wait()
                end
                part.CFrame = targetCFrame
            end)
        
            return duration
        end
        
        local function VM1Click(X, Y)
            VIM:SendMouseButtonEvent(X, Y, 0, true, game, 0)
            task.wait()
            VIM:SendMouseButtonEvent(X, Y, 0, false, game, 0)
        end
        
        local function tweenToPosition(object, targetPosition, speed)
            local distance = (object.Position - targetPosition).Magnitude
            local duration = distance / speed
            local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)
            local tween = TweenService:Create(object, tweenInfo, {Position = targetPosition})
            tween:Play()
            tween.Completed:Wait()
        end

        local function fixedDurationTween(object, targetPosition, duration)
            local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)
            local tween = TweenService:Create(object, tweenInfo, {CFrame = targetPosition})
            tween:Play()
        end

        local function killTitan(titan)
            local hitboxesFolder = titan:FindFirstChild("Hitboxes")
            if hitboxesFolder then
                local hitFolder = hitboxesFolder:FindFirstChild("Hit")
                if hitFolder then
                    local napeObject = findNape(hitFolder)
                    local titan = hitFolder.Parent.Parent
                    local humanoid = titan:FindFirstChild("Humanoid")
                    local humanoidRootPart = titan:FindFirstChild("HumanoidRootPart")

                    if napeObject and humanoid and humanoidRootPart then

                        local targetAbovePosition = napeObject.CFrame * CFrame.new(0, 300, 0)
                        
                        
                        local lerpDelay = lerpCFrame(HumanoidRootPart, targetAbovePosition, 500)
                        task.wait(lerpDelay)

                        while humanoid and humanoid.Parent and humanoid.Health > 0 do
                            fixedDurationTween(HumanoidRootPart, napeObject.CFrame, 0.15)
                            task.wait(0.15)
                            fixedDurationTween(HumanoidRootPart, targetAbovePosition * CFrame.new(0, 300, 0), 0.15)
                            task.wait(0.15)
                        end
                    end
                end
            end
        end

        local function farmTitans()

            task.spawn(function()
                while #titansBasePart:GetChildren() > 0 do
                    local titan = findClosestTitan()
                    print(titan)
                    if titan then
                        killTitan(titan)
                    end
                    task.wait()
                end
            end)

            task.spawn(function()
                while task.wait() do
                    VM1Click(Camera.ViewportSize.X / 2, 5)
                end
            end)
        end

        
        local function addEsp(entity)
            if not entity:IsA("Model") then return end
            local humanoid = entity:FindFirstChildOfClass("Humanoid")
        
            local text = Drawing.new("Text")
            text.Visible = false
            text.Outline = true
            text.Center = true
            text.Font = selectedFont
        
            espObjects[entity] = {
                text = text,
                humanoid = humanoid
            }
        end
        
        local updateEspObjects = LPH_NO_VIRTUALIZE(function()
            for entity, espData in pairs(espObjects) do
                local text = espData.text
                local humanoid = espData.humanoid
        
                if not entity.Parent then
                    text:Remove()
                    espObjects[entity] = nil
                    return
                end
        
                local distance = 10
        
                if HumanoidRootPart then
                    distance = (HumanoidRootPart.CFrame.Position - entity:GetPivot().Position).Magnitude
                end
                text.Center = true
                text.Size = espSize
                text.Color = espColor
                text.Font = selectedFont
                text.OutlineColor = Color3.new(0, 0, 0)
        
                local pos, onScreen = Camera:WorldToViewportPoint(entity:GetPivot().Position)
                if onScreen then
                    text.Position = Vector2.new(pos.X + 7.5, pos.Y + 7.5)
                    text.Text = "Titan"
                    text.OutlineColor = Color3.new(0, 0, 0)
        
                    if showDistance and distance then
                        text.Text = text.Text .. "[" .. math.floor(distance) .. "]"
                    end
        
                    if espEnabled then
                        if distance <= espProximity then
                            text.Visible = espEnabled
                        else
                            text.Visible = false
                        end
                    else
                        text.Visible = false
                    end
                else
                    text.Visible = false
                end
            end
        end)
        
        ---------------- stufff --------------------
        
        repo = 'https://raw.githubusercontent.com/kqmeta/LinoriaLib/main/'
        
        Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
        ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
        SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
        
        local function buildUI()
            local Medusa = Library:CreateWindow({
                Title = 'Medusa - discord.gg/sXQfM2v8Td',
                Center = true,
                AutoShow = true,
                TabPadding = 8,
                MenuFadeTime = 0.2
            })
        
            local plrTab = Medusa:AddTab('Main')
            local uiSettingsTab = Medusa:AddTab("UI Settings")
        
            local MenuGroup = uiSettingsTab:AddLeftGroupbox('Menu')
            MenuGroup:AddButton('Unload', function() Library:Unload() end)
            MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })
            Library.ToggleKeybind = Options.MenuKeybind
            ThemeManager:SetLibrary(Library)
            SaveManager:SetLibrary(Library)
            ThemeManager:SetFolder('Medusa')
            SaveManager:SetFolder('Medusa/AOT Revolution')
            SaveManager:BuildConfigSection(uiSettingsTab)
            pcall(function()
                ThemeManager:ApplyToTab(uiSettingsTab)
            end)
        
            local FarmGroup = plrTab:AddLeftGroupbox('Farm')
            local EspGroup = plrTab:AddLeftGroupbox('ESP')
            local MiscGroup = plrTab:AddLeftGroupbox('Misc')
            local ServerGroup = plrTab:AddRightGroupbox('Server')
            local Skills = plrTab:AddRightGroupbox('Skills')
            local EscapeGroup = plrTab:AddRightGroupbox('Escape Grab')
        
            getgenv().farmMissionToggle = FarmGroup:AddToggle('missionFarm', {
                Text = "Farm Mission",
                Default = false,
                Callback = function(enabled)
                    queue_on_teleport([[
                        repeat task.wait() until getgenv().farmMissionToggle
                        task.wait(2)
                        getgenv().farmMissionToggle:SetValue(true)
                    ]])
                    farmTitans()
                    connections["Blades"] = RunService.RenderStepped:Connect(function()
                        while task.wait() do
                            local args = {
                                "Blades",
                                "Full_Reload",
                                "Left",
                                workspace:WaitForChild("Unclimbable"):WaitForChild("Reloads"):WaitForChild("GasTanks"):WaitForChild("Refill")
                            }
                            assetsRemotes:InvokeServer(unpack(args))
                            
                        args[2] = "Reload"
                            assetsRemotes:InvokeServer(unpack(args)) 
                        end
                    end)
                    local button = LocalPlayer.PlayerGui.Interface.Rewards.Main.Info.Main.Buttons:FindFirstChild("Retry")
                    button.ZIndex = 99
                    if button then
                        local current = button
                        while current do
                            if current:IsA("GuiObject") then
                                current.Size = UDim2.new(1, 0, 1, 0)
                            end
                            current = current.Parent
                        end
                    end
                end
            })
        
            FarmGroup:AddToggle('raidFarm', {
                Text = "Farm Raid",
                Default = false,
                Callback = function(enabled)
                end
            })
        
            FarmGroup:AddSlider('killDelay',{
                Text = 'Kill Delay',
                Default = 1,
                Min = 1,
                Max = 30,
                Rounding = 0,
                Compact = false,
                Callback = function(Value)
                    titanKillCooldown = Value
                end
            })
        
            FarmGroup:AddToggle('abortMission', {
                Text = "Abort Mission",
                Default = false,
                Callback = function(enabled)
                    if enabled then
                        abortMission = true
                        if abortMissionTimer then
                            abortMissionTimer:Cancel()
                        end
                        abortMissionTimer = game:GetService("RunService").Heartbeat:Connect(function()
                            wait(abortMissionTime * 60)
                            if abortMission then
                                abortMission = false
                                abortMissionTimer:Disconnect()
                                abortMissionTimer = nil
                            end
                        end)
                    else
                        abortMission = false
                        if abortMissionTimer then
                            abortMissionTimer:Disconnect()
                            abortMissionTimer = nil
                        end
                    end
                end
            })
        
            FarmGroup:AddSlider('abortMissionTime',{
                Text = 'Abort Mission Time (minutes)',
                Default = 1,
                Min = 1,
                Max = 30,
                Rounding = 0,
                Compact = false,
                Callback = function(Value)
                    abortMissionTime = Value
                end
            })
        
            MiscGroup:AddButton({
                Text = "Expand Napes",
                Func = function()
                    if titansBasePart then
                        processTitans(titansBasePart)
                    end
                end,
                DoubleClick = false
            })
        
            MiscGroup:AddToggle('infBlades', {
                Text = "Infinite Blades",
                Default = false,
                Callback = function(enabled)
                    if enabled then
                        connections["Blades"] = RunService.RenderStepped:Connect(function()
                            while task.wait() do
                                local args = {
                                    "Blades",
                                    "Full_Reload",
                                    "Left",
                                    workspace:WaitForChild("Unclimbable"):WaitForChild("Reloads"):WaitForChild("GasTanks"):WaitForChild("Refill")
                                }
                                assetsRemotes:InvokeServer(unpack(args))
                                
                                args[2] = "Reload"
                                assetsRemotes:InvokeServer(unpack(args))
                            end
                        end)
                    else
                        if connections["Blades"] then
                            connections["Blades"]:Disconnect()
                            connections["Blades"] = nil
                        end
                    end
                end
            })

            EscapeGroup:AddToggle('escapeGrab', {
                Text = "Auto Escape Grab",
                Default = false,
                Callback = function(enabled)
                    if enabled then
                        connections["Escape"] = LocalPlayer.PlayerGui.Interface.Buttons.ChildAdded:Connect(function(v)
                            if tick() - lastGrab > 1 then
                                task.wait(0.5)
                            else
                                task.wait(0.1)
                            end
                            lastGrab = tick()
                            VIM:SendKeyEvent(true, v.Name, false, game)
                        end)
                    else
                        if connections["Escape"] then
                            connections["Escape"]:Disconnect()
                            connections["Escape"] = nil
                        end
                    end
                end
            })

            EscapeGroup:AddSlider('firstKeyDelay',{
                Text = 'First Key Delay',
                Default = 0.5,
                Min = 0.01,
                Max = 1,
                Rounding = 2,
                Compact = false,
                Callback = function(Value)
                    firstKeyDelayValue = Value
                end
            })

            EscapeGroup:AddSlider('restOfKeys',{
                Text = 'Key Delays',
                Default = 0.1,
                Min = 0.01,
                Max = 1,
                Rounding = 2,
                Compact = false,
                Callback = function(Value)
                    keyDelaysValue = Value
                end
            })
        
            EspGroup:AddToggle('espEnabled', {
                Text = "Enable ESP",
                Default = false,
                Callback = function(enabled)
                    espEnabled = enabled
                    task.wait(0.05)
                    if enabled then
                        connections["ESP"] = RunService.RenderStepped:Connect(updateEspObjects)
                    else
                        if connections["ESP"] then
                            connections["ESP"]:Disconnect()
                            connections["ESP"] = nil
                        end
                    end
                end
            })
        
            EspGroup:AddSlider('textSize', {
                Text = 'Text Size',
                Default = 15,
                Min = 1,
                Max = 20,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    espSize = Value
                end
            })
        
            EspGroup:AddDropdown('fontDropdown', {
                Values = {"UI", "System", "Plex", "Monospace"},
                Default = 1,
                Multi = false,
            
                Text = 'Font',
            
                Callback = function(Value)
                    if Value == "UI" then
                        selectedFont = 0
                    elseif Value == "System" then
                        selectedFont = 1
                    elseif Value == "Plex" then
                        selectedFont = 2
                    elseif Value == "Monospace" then
                        selectedFont = 3
                    end
                end
            })
            
            EspGroup:AddToggle('distanceEsp', {
                Text = "Show Distance",
                Default = false,
                Callback = function(enabled)
                    showDistance = enabled
                end
            })
            
        
            EspGroup:AddLabel('Player'):AddColorPicker('PlrColorPicker', {
                Default = Color3.new(0, 1, 0), -- Bright green
                Title = 'Color', -- Optional. Allows you to have a custom color picker title (when you open it)
                Transparency = 0, -- Optional. Enables transparency changing for this color picker (leave as nil to disable)
            
                Callback = function(Value)
                    espColor = Value
                end
            })
        
            EspGroup:AddSlider('playerProximity', {
                Text = 'Distance',
                Default = 50000,
                Min = 1,
                Max = 50000,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    espProximity = Value
                end
            })
        
        
            ServerGroup:AddButton({
                Text = "Return to Lobby",
                Func = function()
                    game:GetService("TeleportService"):Teleport(14916516914)
                end,
                DoubleClick = false
            })
        
            ServerGroup:AddButton({
                Text = "Rejoin",
                Func = function()
                    game:GetService("TeleportService"):Teleport(14916516914)
                end,
                DoubleClick = false
            })
        
            ServerGroup:AddButton({
                Text = "End Mission (YOU WILL LOSE STREAK)",
                Func = function()
                    Humanoid.Health = 0
                end,
                DoubleClick = false
            })
        
            Skills:AddToggle('useMove', {
                Text = "Use Skills",
                Default = false,
                Callback = function(enabled)
                    useSkillEnabled = true
                end
            })
        
            Skills:AddSlider('moveCooldown', {
                Text = 'Cooldown',
                Default = 5,
                Min = 1,
                Max = 60,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    skillCooldown = Value
                end
            })
        
            Skills:AddDropdown('moveSelect', {
                Values = {1, 2, 3, 4, 5},
                Default = 1,
                Multi = false,
            
                Text = 'Selected Skill',
            
                Callback = function(Value)
                    if Value == 1 then
                        selectedSkill = "One"
                    elseif Value == 2 then
                        selectedSkill = "Two"
                    elseif Value == 3 then
                        selectedSkill = "Three"
                    elseif Value == 4 then
                        selectedSkill = "Four"
                    elseif Value == 5 then
                        selectedSkill = "Five"
                    end
                end
            })
        
        end
        
        local function init()
            buildUI()
            for _, titan in ipairs(titansBasePart:GetChildren()) do
                addEsp(titan)
            end
            titansBasePart.ChildAdded:Connect(addEsp)
            task.spawn(function()
                while true do
                    task.wait(skillCooldown)
                    if useSkillEnabled then
                        VIM:SendKeyEvent(true, selectedSkill, false, game)
                    end
                end
            end)
        end

        init()    


    --[[



    _____                     _   _____ _                  ____        _ _            
    / ____|                   | | |  __ (_)                / __ \      | (_)           
    | |  __ _ __ __ _ _ __   __| | | |__) |  ___  ___ ___  | |  | |_ __ | |_ _ __   ___ 
    | | |_ | '__/ _` | '_ \ / _` | |  ___/ |/ _ \/ __/ _ \ | |  | | '_ \| | | '_ \ / _ \
    | |__| | | | (_| | | | | (_| | | |   | |  __/ (_|  __/ | |__| | | | | | | | | |  __/
    \_____|_|  \__,_|_| |_|\__,_| |_|   |_|\___|\___\___|  \____/|_| |_|_|_|_| |_|\___|
                                                                                        
                                                                                        

    ]]

    elseif game.GameId == 648454481 then
        if not script_key then
            loadstring([[
                function LPH_NO_VIRTUALIZE(f) return f end;
            ]])();
        else
            queue_on_teleport([[
                getgenv().serverHop = true
                script_key="]] .. script_key .. [[";
                loadstring(game:HttpGet("https://api.luarmor.net/files/v3/loaders/5642a4021ffce9ac471740c6224e2e82.lua"))()
            ]])
        end
        
        --------------------- Varibles -----------------------------
        
        local Players = game:GetService("Players")
        local VIM = Instance.new("VirtualInputManager")
        local StarterGui = game:GetService("StarterGui")
        local GuiService = game:GetService("GuiService")
        local CoreGui = game:GetService("CoreGui")
        local UserInputService = game:GetService("UserInputService")
        local RunService = game:GetService("RunService")
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local HttpService = game:GetService("HttpService")
        local Lighting = game.Lighting
        local TeleportService = game:GetService("TeleportService")
        
        local LocalPlayer = Players.LocalPlayer
        local Camera = workspace.CurrentCamera
        
        local espEnabled = false
        local espSize = 10
        local selectedFont = 0
        
        local islandsFolder = workspace:WaitForChild("Islands")
        
        local Character
        local HumanoidRootPart
        local Humanoid
        
        local walkSpeedToggle
        local flashStepToggle
        
        local walkSpeed = 16
        local flySpeed = 50
        
        local wsEnabled = false
        local flyEnabled = false
        local ControlModule = sharedRequires['a5aab7a81f59849e7c2e50d0ecd43092d80b0aaa025889a2d0219df4023d863d'];
        
        local NPCs = workspace.NPCs
        local Characters = workspace.PlayerCharacters
        
        local fog = Lighting:WaitForChild("Atmosphere")
        local oldDensity = fog.Density
        local noFog = false
        
        local oldBrightness = Lighting.Brightness
        local oldClockTime = Lighting.ClockTime
        local fullBright = false
        
        local MovementBV = Instance.new("BodyVelocity")
        
        local fallDmgScript
        
        local statsFolder = ReplicatedStorage:WaitForChild("Stats" .. LocalPlayer.Name)
        local skillsFolder = statsFolder:WaitForChild("Skills")
        
        local statFolders = {}

        local selectedPlayer
        
        local staminaDrain = 0.05
        local acBypass = false
        
        local takestam = ReplicatedStorage:WaitForChild("Events"):WaitForChild("takestam")
        
        local attachToBack = false
        local attachMultiplier = 0
        local followMovement = false
        
        local noFall = false
        
        local levelFarmEnabled = false
        local levelCoroutine
        local levelSpot
        
        local ship = nil
        local Ships = game:GetService("Workspace").Ships
        
        local speed = game:GetService("CoreGui").RobloxGui.VehicleHudFrame.SpeedText
        local shipMultiplier = 10
        
        local anchorShip = false
        
        local webHook
        local levelTarget
        
        repo = 'https://raw.githubusercontent.com/kqmeta/LinoriaLib/main/'
            
        Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
        ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
        SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
        
        
        ----------------------- Tables -------------------------------
        
    
        
        local connections = {}
        local oldHitboxes = {}
        local rootparts = {}
        
        local espObjects = {}
        
        local entitySettings = {
            Player = {
                Esp = false,
                Health = false,
                Chams = false,
                Color = Color3.new(0, 0, 0),
                Distance = false,
                Tracers = false,
                Chams = false,
                Thickness = 2,
                BoxThickness = 2,
                DF = false,
                Stamina = false,
                Proximity = 2000
            },
            Mob = {
                Esp = false,
                Health = false,
                Chams = false,
                Color = Color3.new(0, 0, 0),
                Distance = false,
                Tracers = false,
                Chams = false,
                Thickness = 2,
                BoxThickness = 2,
                DF = false,
                Stamina = false,
                Proximity = 2000
            },
            NPC = {
                Esp = false,
                Chams = false,
                Color = Color3.new(0, 0, 0),
                Distance = false,
                Boxes = false,
                Tracers = false,
                Chams = false,
                Thickness = 2,
                BoxThickness = 2,
                DF = false,
                Stamina = false,
                Proximity = 2000
            },
            Island = {
                Esp = false,
                Chams = false,
                Color = Color3.new(0, 0, 0),
                Distance = false,
                Tracers = false,
                Thickness = 2,
                BoxThickness = 2,
                DF = false,
                Stamina = false,
                Proximity = 2000
            },
            Chest = {
                Esp = false,
                Chams = false,
                Color = Color3.new(0, 0, 0),
                Distance = false,
                Tracers = false,
                Thickness = 2,
                BoxThickness = 2,
                DF = false,
                Stamina = false,
                Proximity = 2000
            }
        }
        
        --------------------- Loops ----------------------------
        
        Ships.ChildAdded:Connect(function(spawnedShip)
            if spawnedShip.Name == LocalPlayer.Name .. "Ship" then
                ship = spawnedShip
            end
        end)
        
        RunService.RenderStepped:Connect(function()
            if flyEnabled then
                MovementBV.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                if MovementBV and HumanoidRootPart then
                    MovementBV.Velocity = Camera.CFrame:VectorToWorldSpace(ControlModule:GetMoveVector() * flySpeed)
                    MovementBV.Parent = HumanoidRootPart
                end
            elseif wsEnabled then
                MovementBV.MaxForce = Vector3.new(math.huge, 0, math.huge)
                if MovementBV and HumanoidRootPart and Humanoid then
                    MovementBV.Velocity = Humanoid.MoveDirection * walkSpeed
                    MovementBV.Parent = HumanoidRootPart
                end
            else
                MovementBV.MaxForce = Vector3.new(0, 0, 0)
                MovementBV.Parent = nil
            end
        end)
        
        fog:GetPropertyChangedSignal("Density"):Connect(function()
            if fog.Density ~= 0 then
                oldDensity = fog.Density
                if noFog then
                    fog.Density = 0
                end
            end
        end)
        
        Lighting:GetPropertyChangedSignal("Brightness"):Connect(function()
            if Lighting.Brightness ~= 2.5 then
                oldBrightness = Lighting.Brightness
                if fullBright then
                    Lighting.Brightness = 2.5
                end
            end
        end)
        
        Lighting:GetPropertyChangedSignal("ClockTime"):Connect(function()
            if Lighting.ClockTime ~= 12 then
                oldClockTime = Lighting.ClockTime
                if fullBright then
                    Lighting.ClockTime = 12
                end
            end
        end)
        
        Characters.ChildAdded:Connect(function(character)
            if character:IsA("Model") and character ~= Character then
                task.spawn(function()
                    local hrp = character:WaitForChild("HumanoidRootPart")
                    table.insert(rootparts, hrp)
                end)
            end
        end)
        
        for i, character in Characters:GetChildren() do
            if character:IsA("Model") and character ~= Character then
                task.spawn(function()
                    local hrp = character:WaitForChild("HumanoidRootPart")
                    table.insert(rootparts, hrp)
                end)
            end
        end
        
        task.spawn(function()
            while true do
                task.wait(staminaDrain)
                if acBypass then
                        local args = {
                        [1] = "Sky Walk2",
                        [2] = {
                            ["char"] = Character,
                            ["cf"] = CFrame.new(0, 0, 0)
                        }
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Skill"):InvokeServer(unpack(args))
                end
            end
        end)
        
        --------------------- Functions ---------------------
        
        local function getStatFolder(character)
            local foundFolder = ReplicatedStorage:FindFirstChild("Stats" .. character.Name)
            return foundFolder
        end

        local function getClosestCharacter()
            local lastDistance = math.huge
            local closest = nil
            for i, rootpart in rootparts do
                if rootpart and rootpart.Parent and rootpart ~= HumanoidRootPart then
                    local distance = (HumanoidRootPart.Position - rootpart.Position).Magnitude
                    if distance < lastDistance and distance <= attachDistance then
                        closest = rootpart
                    end
                end
            end
            return closest
        end
        
        local function fireRifle(position)
            local args = {
                [1] = "fire",
                [2] = {
                    ["Start"] = CFrame.new(7778.2841796875, -2163.158935546875, -17145.33203125, 0.9894992709159851, 0.11473654210567474, 0.08790115267038345, 0.08379210531711578, 0.04016682505607605, -0.9956733584403992, -0.11777087301015854, 0.9925835132598877, 0.030130956321954727),
                    ["Gun"] = "Rifle",
                    ["joe"] = "true",
                    ["Position"] = position
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("CIcklcon"):FireServer(unpack(args))     
        end
        
        local function reloadRifle()
            local args = {
                [1] = "reload",
                [2] = {
                    ["Gun"] = "Rifle"
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("CIcklcon"):WaitForChild("gunFunctions"):InvokeServer(unpack(args))        
        end
        
        local function getRandomFishman()
            for i, npc in NPCs:GetChildren() do
                if npc.Name == "Fishman Karate User" then
                    return npc
                end
            end
            return nil
        end
        
        local function updateCharacterVariables()
            Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
            fallDmgScript = Character:FindFirstChild("FallDamage")
            if noFall then
                fallDmgScript.Parent = nil
            end
            HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
            Humanoid = Character:WaitForChild("Humanoid")
        end
        
        local function getPlayerNames()
            local tableToReturn = {}
            for i, v in game:GetService("Players"):GetPlayers() do
                task.wait()
                table.insert(tableToReturn, v.Name)
            end
            return(tableToReturn)
        end
        
        local function lerpCFrame(part, targetCFrame, speed)
            local initialCFrame = part.CFrame
            local distance = (targetCFrame.Position - initialCFrame.Position).Magnitude
            local duration = distance / speed
            local startTime = tick()
            
            task.spawn(function()
                while tick() - startTime < duration do
                    local elapsedTime = tick() - startTime
                    local lerpedPosition = initialCFrame.Position:Lerp(targetCFrame.Position, elapsedTime / duration)
            
                    local upsideDownRotation = CFrame.new()
            
                    part.CFrame = CFrame.new(lerpedPosition) * upsideDownRotation
                    part.Velocity = Vector3.new(0, 0, 0)
                    task.wait()
                end
                
                part.CFrame = targetCFrame
            end)
        
            return duration
        end
        
        local function expandHitbox(hrp)
            oldHitboxes[hrp] = hrp.Size
            hrp.Size = Vector3.new(30, 30, 30)
            hrp.Transparency = 0.9
            connections[hrp] = hrp:GetPropertyChangedSignal("Size"):Connect(function()
                hrp.Size = Vector3.new(30, 30, 30)
            end)
        end
        
        local function takeQuest()
            local args = {
                [1] = {
                    [1] = "takequest",
                    [2] = "Help becky"
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Quest"):InvokeServer(unpack(args))    
        end
        
        local function loopFunction()
            while levelFarmEnabled do
                if takeQuestEnabled and statsFolder.Quest.CurrentQuest.Value ~= "Help becky" then
                    if connections['Spot'] then
                        connections['Spot']:Disconnect()
                        connections['Spot'] = nil
                    end
                    local duration = lerpCFrame(HumanoidRootPart, CFrame.new(7733.02392578125, -2175.83203125, -17223.26953125), 50)
                    task.wait(duration)
                    takeQuest()
                    connections['Spot'] = RunService.Stepped:Connect(function()
                        if levelSpot then
                            lerpCFrame(HumanoidRootPart, levelSpot, 50)
                        end
                    end)
                end
                local fishman = getRandomFishman()
                if fishman then
                    local head = fishman:FindFirstChild("Head")
                    local hum = fishman:FindFirstChild("Humanoid")
                    if head and hum then
                        repeat
                            reloadRifle()
                            fireRifle(head.Position + Vector3.new(0, 0.6, 0))
                            task.wait()
                        until hum.Health < 1 or not levelFarmEnabled
                    end
                end
                task.wait()
            end
        end
        
        local function startLevelFarm()
            if not levelFarmEnabled then
                levelFarmEnabled = true
                levelCoroutine = coroutine.create(loopFunction)
                coroutine.resume(levelCoroutine)
            end
        end
        
        local function stopLevelFarm()
            if levelFarmEnabled then
                levelFarmEnabled = false
            end
        end
        
        local function addSP(sp)
            local args = {
                [1] = sp,
                [2] = nil,
                [3] = 1
            }
            
            ReplicatedStorage:WaitForChild("Events"):WaitForChild("stats"):FireServer(unpack(args))
            
        end
        
        local function addChams(entity)
            if not entity:IsA("Model") then return end
        
            local chams = {}
            for _, part in ipairs(entity:GetChildren()) do
                if part:IsA("BasePart") then
                    local cham = Instance.new("BoxHandleAdornment")
                    cham.Size = part.Size
                    cham.AlwaysOnTop = true
                    cham.ZIndex = 4
                    cham.Adornee = part
                    cham.Parent = Camera
                    cham.Transparency = 1
                    table.insert(chams, cham)
                end
            end
        
            return chams
        end
        
        local function addEsp(entity, entityType)
            if not entity:IsA("Model") and entityType ~= "Island" then return end
        
            local humanoid
            local chams
            if entityType ~= "Island" and entityType ~= "Chest" then
                humanoid = entity:WaitForChild("Humanoid")
                chams = addChams(entity)
            end
        
            local text = Drawing.new("Text")
            text.Visible = false
            text.Outline = true
            text.Center = true
            text.Font = selectedFont
        
            local tracer = Drawing.new("Line")
            tracer.Visible = false
            tracer.Thickness = 2
        
            local box = Drawing.new("Square")
            box.Visible = false
            box.Filled = false
            box.Thickness = 2
        
            espObjects[entity] = {
                text = text,
                tracer = tracer,
                box = box,
                chams = chams,
                humanoid = humanoid,
                entityType = entityType
            }
        end
        
        local function getBoundingBoxCorners(cframe, size)
            local corners = {}
            for x = -1, 1, 2 do
                for y = -1, 1, 2 do
                    for z = -1, 1, 2 do
                        local worldPoint = cframe * Vector3.new(x * size.X / 2, y * size.Y / 2, z * size.Z / 2)
                        local screenPoint, onScreen = Camera:WorldToViewportPoint(worldPoint)
                        if onScreen then
                            table.insert(corners, Vector2.new(screenPoint.X, screenPoint.Y))
                        end
                    end
                end
            end
            return corners
        end
        
        local function getBoundingRectangle(corners)
            if #corners == 0 then
                return nil
            end
        
            local minX, minY = math.huge, math.huge
            local maxX, maxY = -math.huge, -math.huge
        
            for _, corner in ipairs(corners) do
                minX = math.min(minX, corner.X)
                minY = math.min(minY, corner.Y)
                maxX = math.max(maxX, corner.X)
                maxY = math.max(maxY, corner.Y)
            end
        
            return Vector2.new(minX, minY), Vector2.new(maxX, maxY)
        end
        
        local function drawBoundingBox(entity)
            local cframe, size = entity:GetBoundingBox()
            local corners = getBoundingBoxCorners(cframe, size)
            local minCorner, maxCorner = getBoundingRectangle(corners)
        
            return minCorner, maxCorner
        end
        
        local updateEspObjects = LPH_NO_VIRTUALIZE(function()
            for entity, espData in pairs(espObjects) do
                local text = espData.text
                local tracer = espData.tracer
                local box = espData.box
                local chams = espData.chams
                local humanoid = espData.humanoid
                local entityType = espData.entityType
                local df = espData.df

                local statFolder
                if entityType == "Player" then
                    statFolder = getStatFolder(entity)
                end
        
                if not entity.Parent then
                    text:Remove()
                    tracer:Remove()
                    box:Remove()
                    if chams then
                        for _, cham in ipairs(chams) do
                            cham:Destroy()
                        end
                    end
                    espObjects[entity] = nil
                    return
                end
        
                local currentSettings = entitySettings[entityType]
        
                local showEsp = currentSettings.Esp
                local showHealth = currentSettings.Health
                local showDistance = currentSettings.Distance
                local espColor = currentSettings.Color
                local espProximity = currentSettings.Proximity
                local espTracers = currentSettings.Tracers
                local espThickness = currentSettings.Thickness
                local boxThickness = currentSettings.BoxThickness
                local espChams = currentSettings.Chams
                local showBox = currentSettings.Boxes
                local stamina = currentSettings.Stamina
                local df = currentSettings.DF
        
                local distance = 10
        
                if HumanoidRootPart then
                    distance = (HumanoidRootPart.CFrame.Position - entity:GetPivot().Position).Magnitude
                end
                text.Center = true
                text.Size = espSize
                text.Color = espColor
                text.Font = selectedFont
                text.OutlineColor = Color3.new(0, 0, 0)
        
                local pos, onScreen = Camera:WorldToViewportPoint(entity:GetPivot().Position)
                if onScreen then
                    text.Position = Vector2.new(pos.X + 7.5, pos.Y + 7.5)
                    text.Text = entity.Name
        
                    if showHealth and humanoid then
                        text.Text = text.Text .. " [" .. math.floor(humanoid.Health) .. "/" .. math.floor(humanoid.MaxHealth) .. "]"
                    end
        
                    if showDistance and distance then
                        text.Text = text.Text .. "[" .. math.floor(distance) .. "]"
                    end

                    text.Text = text.Text .. "\n"

                    if df and statFolder.Stats:FindFirstChild("DF") then
                        text.Text = text.Text .. statFolder.Stats.DF.Value
                    end

                    if stamina then
                        text.Text = text.Text .. " (" .. tostring(statFolder.Stamina.Value) .. ")"
                    end
        
                    if espEnabled then
                        if distance <= espProximity then
                            text.Visible = showEsp
                        else
                            text.Visible = false
                        end
                    else
                        text.Visible = false
                    end
                else
                    text.Visible = false
                end
        
                if espTracers and espEnabled and onScreen then
                    if distance <= espProximity then
                        tracer.Visible = showEsp
                        tracer.Thickness = espThickness
                        tracer.Color = espColor
                        tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                        tracer.To = Vector2.new(pos.X, pos.Y)
                    else
                        tracer.Visible = false
                    end
                else
                    tracer.Visible = false
                end
        
                if showBox and espEnabled and onScreen and showEsp then
                    if distance <= espProximity then
                        local minCorner, maxCorner = drawBoundingBox(entity)
                        if minCorner and maxCorner then
                            box.Visible = true
                            box.Color = espColor
                            box.Thickness = boxThickness
                            box.Position = minCorner
                            box.Size = maxCorner - minCorner
                        else
                            box.Visible = false
                        end
                    else
                        box.Visible = false
                    end
                else
                    box.Visible = false
                end
        
                if chams then
                    for _, cham in ipairs(chams) do
                        if showEsp and distance <= espProximity and espChams and espEnabled then
                            cham.Color3 = espColor
                            cham.Transparency = 0
                        else
                            cham.Transparency = 1
                        end
                    end
                end
            end
        end)
        
        local function removeEsp(entity)
            local espObject = espObjects[entity]
            if espObject then
                espObject.text:Remove()
                espObject.tracer:Remove()
                espObject.box:Remove()
                if espObject.chams then
                    for _, cham in ipairs(espObject.chams) do
                        cham:Destroy()
                    end
                end
                espObjects[entity] = nil
            end
        end
        
        local function initializeEsp()
            for _, playerCharacter in Characters:GetChildren() do
                addEsp(playerCharacter, "Player")
            end
        
            for _, npc in NPCs:GetChildren() do
                local infoFolder = npc:FindFirstChild("Info")
        
                if infoFolder then
                    local respawnTime = infoFolder:FindFirstChild("RespawnTime")
                    if respawnTime then
                        addEsp(npc, "Mob")
                    else
                        addEsp(npc, "NPC")
                    end
                end
            end
        
            for _, island in islandsFolder:GetChildren() do
                addEsp(island, "Island")
            end
        
            Characters.ChildAdded:Connect(function(playerCharacter)
                addEsp(playerCharacter, "Player")
            end)
        
            NPCs.ChildAdded:Connect(function(npc)
                local infoFolder = npc:FindFirstChild("Info")
        
                if infoFolder then
                    local respawnTime = infoFolder:FindFirstChild("RespawnTime")
                    if respawnTime then
                        addEsp(npc, "Mob")
                    else
                        addEsp(npc, "NPC")
                    end
                end
            end)
        
            islandsFolder.ChildAdded:Connect(function(island)
                addEsp(island, "Island")
            end)
        
            islandsFolder.ChildRemoved:Connect(removeEsp)
            NPCs.ChildRemoved:Connect(removeEsp)
            Characters.ChildRemoved:Connect(removeEsp)
        end
        
        local function buildUI()
            local Medusa = Library:CreateWindow({
                Title = 'Medusa - discord.gg/sXQfM2v8Td',
                Center = true,
                AutoShow = true,
                TabPadding = 8,
                MenuFadeTime = 0.2
            })
            
            local plrTab = Medusa:AddTab('Misc')
            local espTab = Medusa:AddTab('ESP')
            local autofarmTab = Medusa:AddTab('Autofarm')
            local uiSettingsTab = Medusa:AddTab("UI Settings")
            
            local MenuGroup = uiSettingsTab:AddLeftGroupbox('Menu')
            MenuGroup:AddButton('Unload', function() Library:Unload() end)
            MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })
            Library.ToggleKeybind = Options.MenuKeybind
            ThemeManager:SetLibrary(Library)
            SaveManager:SetLibrary(Library)
            ThemeManager:SetFolder('Medusa')
            SaveManager:SetFolder('Medusa/GPO')
            SaveManager:BuildConfigSection(uiSettingsTab)
            pcall(function()
                ThemeManager:ApplyToTab(uiSettingsTab)
            end)
        
            local MiscSection = plrTab:AddLeftGroupbox('Misc')
            local ShipSection = plrTab:AddLeftGroupbox('Ships')
            local AnticheatSection = plrTab:AddLeftGroupbox('Bypass')
            local PlayersGroup = plrTab:AddRightGroupbox('Players')
            local CombatSection = plrTab:AddRightGroupbox('Combat')
            local AttachSection = plrTab:AddRightGroupbox('Attach')
            local ParrySection = plrTab:AddLeftGroupbox('Parry')
            local LevelSection = autofarmTab:AddLeftGroupbox('Level')
            local WebhookSecion = autofarmTab:AddLeftGroupbox('Webhook')
            local StatsSection = autofarmTab:AddRightGroupbox('Stats')
            local SeasSection = plrTab:AddRightGroupbox('Seas')
            local ServerSection = plrTab:AddRightGroupbox('Server')
        
            local MainEspSection = espTab:AddLeftGroupbox('ESP')
            local PlayerEspSection = espTab:AddLeftGroupbox('Player ESP')
            local MobEspSection = espTab:AddLeftGroupbox('Mob ESP')
            local NpcEspSection = espTab:AddRightGroupbox('NPC ESP')
            local IslandEspSection = espTab:AddRightGroupbox('Island ESP')
            local ChestEspSection = espTab:AddRightGroupbox('Chest ESP')


            ServerSection:AddButton({
                Text = "Rejoin",
                Func = function()
                    if #Players:GetPlayers() <= 1 then
                        Players.LocalPlayer:Kick("\nRejoining...")
                        wait()
                        TeleportService:Teleport(game.PlaceId, Players.LocalPlayer)
                    else
                        TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, Players.LocalPlayer)
                    end
                end,
                DoubleClick = false
            })

            ServerSection:AddButton({
                Text = "Server Hop",
                Func = function()
                    local servers = {}
                    local req = request({Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true", game.PlaceId)})
                    local body = HttpService:JSONDecode(req.Body)
            
                    if body and body.data then
                        for i, v in next, body.data do
                            if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= JobId then
                                table.insert(servers, 1, v.id)
                            end
                        end
                    end
            
                    if #servers > 0 then
                        TeleportService:TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)], Players.LocalPlayer)
                    else
                        return notify("Serverhop", "Couldn't find a server.")
                    end
                end,
                DoubleClick = false
            })
        
            ServerSection:AddButton({
                Text = "Copy Game ID",
                Func = function()
                setclipboard(game.GameId)
                end,
                DoubleClick = false
            })
        
            ServerSection:AddButton({
                Text = "Copy Place ID",
                Func = function()
                setclipboard(game.PlaceId)
                end,
                DoubleClick = false
            })
        
            MainEspSection:AddToggle('espEnabled', {
                Text = "Enable ESP",
                Default = false,
                Callback = function(enabled)
                    espEnabled = enabled
                    task.wait(0.05)
                    if enabled then
                        connections["ESP"] = RunService.RenderStepped:Connect(updateEspObjects)
                    else
                        if connections["ESP"] then
                            connections["ESP"]:Disconnect()
                            connections["ESP"] = nil
                        end
                    end
                end
            })
        
            MainEspSection:AddSlider('textSize', {
                Text = 'Text Size',
                Default = 10,
                Min = 1,
                Max = 20,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    espSize = Value
                end
            })
        
            MainEspSection:AddDropdown('fontDropdown', {
                Values = {"UI", "System", "Plex", "Monospace"},
                Default = 1,
                Multi = false,
            
                Text = 'Font',
            
                Callback = function(Value)
                    if Value == "UI" then
                        selectedFont = 0
                    elseif Value == "System" then
                        selectedFont = 1
                    elseif Value == "Plex" then
                        selectedFont = 2
                    elseif Value == "Monospace" then
                        selectedFont = 3
                    end
                end
            })
        
            PlayerEspSection:AddToggle('playerEsp', {
                Text = "Enabled",
                Default = false,
                Callback = function(enabled)
                    entitySettings["Player"].Esp = enabled
                end
            })
            
        
            PlayerEspSection:AddToggle('playerHealth', {
                Text = "Show Health",
                Default = false,
                Callback = function(enabled)
                    entitySettings["Player"].Health = enabled
                end
            })
            
        
            PlayerEspSection:AddToggle('distanceEsp', {
                Text = "Show Distance",
                Default = false,
                Callback = function(enabled)
                    entitySettings["Player"].Distance = enabled
                end
            })

            PlayerEspSection:AddToggle('dfEsp', {
                Text = "Show Devil Fruit",
                Default = false,
                Callback = function(enabled)
                    entitySettings["Player"].DF = enabled
                end
            })

            PlayerEspSection:AddToggle('stamESP', {
                Text = "Show Stamina",
                Default = false,
                Callback = function(enabled)
                    entitySettings["Player"].Stamina = enabled
                end
            })
        
            PlayerEspSection:AddToggle('playerBoxes', {
                Text = "Boxes",
                Default = false,
                Callback = function(enabled)
                    entitySettings["Player"].Boxes = enabled
                end
            })      
            
            PlayerEspSection:AddToggle('playerTracers', {
                Text = "Tracers",
                Default = false,
                Callback = function(enabled)
                    entitySettings["Player"].Tracers = enabled
                end
            })
        
            PlayerEspSection:AddToggle('playerChams', {
                Text = "Chams",
                Default = false,
                Callback = function(enabled)
                    entitySettings["Player"].Chams = enabled
                end
            })

            
        
            PlayerEspSection:AddLabel('Color'):AddColorPicker('PlrColorPicker', {
                Default = Color3.new(0, 1, 0), -- Bright green
                Title = 'Color', -- Optional. Allows you to have a custom color picker title (when you open it)
                Transparency = 0, -- Optional. Enables transparency changing for this color picker (leave as nil to disable)
            
                Callback = function(Value)
                    entitySettings["Player"].Color = Value
                end
            })
        
            PlayerEspSection:AddSlider('playerThickness', {
                Text = 'Tracer Thickness',
                Default = 2,
                Min = 1,
                Max = 10,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    entitySettings["Player"].Thickness = Value
                end
            })
        
            PlayerEspSection:AddSlider('playerProximity', {
                Text = 'Distance',
                Default = 50000,
                Min = 1,
                Max = 50000,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    entitySettings["Player"].Proximity = Value
                end
            })
        
            PlayerEspSection:AddSlider('plrBoxThickness', {
                Text = 'Box Thickness',
                Default = 2,
                Min = 1,
                Max = 10,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    entitySettings["Player"].Thickness = Value
                end
            })
        
            MobEspSection:AddToggle('mobEsp', {
                Text = "Enabled",
                Default = false,
                Callback = function(enabled)
                    entitySettings["Mob"].Esp = enabled
                end
            })
            
        
            MobEspSection:AddToggle('mobHealth', {
                Text = "Show Health",
                Default = false,
                Callback = function(enabled)
                    entitySettings["Mob"].Health = enabled
                end
            })
        
            MobEspSection:AddToggle('mobdistanceEsp', {
                Text = "Show Distance",
                Default = false,
                Callback = function(enabled)
                    entitySettings["Mob"].Distance = enabled
                end
            })
        
            MobEspSection:AddToggle('mobBoxes', {
                Text = "Boxes",
                Default = false,
                Callback = function(enabled)
                    entitySettings["Mob"].Boxes = enabled
                end
            })
        
            MobEspSection:AddToggle('mobTracers', {
                Text = "Tracers",
                Default = false,
                Callback = function(enabled)
                    entitySettings["Mob"].Tracers = enabled
                end
            })
        
            MobEspSection:AddToggle('mobChams', {
                Text = "Chams",
                Default = false,
                Callback = function(enabled)
                    entitySettings["Mob"].Chams = enabled
                end
            })
            
            MobEspSection:AddLabel('Color'):AddColorPicker('MobColorPicker', {
                Default = Color3.new(1, 0, 0), -- Bright green
                Title = 'Color', -- Optional. Allows you to have a custom color picker title (when you open it)
                Transparency = 0, -- Optional. Enables transparency changing for this color picker (leave as nil to disable)
            
                Callback = function(Value)
                    entitySettings["Mob"].Color = Value
                end
            })
        
            MobEspSection:AddSlider('mobThickness', {
                Text = 'Tracer Thickness',
                Default = 2,
                Min = 1,
                Max = 10,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    entitySettings["Mob"].Thickness = Value
                end
            })
        
            MobEspSection:AddSlider('mobBoxThickness', {
                Text = 'Box Thickness',
                Default = 2,
                Min = 1,
                Max = 10,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    entitySettings["Mob"].Thickness = Value
                end
            })
        
            MobEspSection:AddSlider('mobProximity', {
                Text = 'Distance',
                Default = 50000,
                Min = 1,
                Max = 50000,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    entitySettings["Mob"].Proximity = Value
                end
            })
            
            NpcEspSection:AddToggle('npcEsp', {
                Text = "Enabled",
                Default = false,
                Callback = function(enabled)
                    entitySettings["NPC"].Esp = enabled
                end
            })
            
            NpcEspSection:AddToggle('npcdistanceEsp', {
                Text = "Show Distance",
                Default = false,
                Callback = function(enabled)
                    entitySettings["NPC"].Distance = enabled
                end
            })        
        
            NpcEspSection:AddToggle('npxBoxes', {
                Text = "Boxes",
                Default = false,
                Callback = function(enabled)
                    entitySettings["NPC"].Boxes = enabled
                end
            })      
        
            NpcEspSection:AddToggle('npcTracers', {
                Text = "Tracers",
                Default = false,
                Callback = function(enabled)
                    entitySettings["NPC"].Tracers = enabled
                end
            })
        
            NpcEspSection:AddToggle('npcChams', {
                Text = "Chams",
                Default = false,
                Callback = function(enabled)
                    entitySettings["NPC"].Chams = enabled
                end
            })
        
            NpcEspSection:AddLabel('Color'):AddColorPicker('NpcColorPicker', {
                Default = Color3.new(0, 0, 1), -- Bright green
                Title = 'Color', -- Optional. Allows you to have a custom color picker title (when you open it)
                Transparency = 0, -- Optional. Enables transparency changing for this color picker (leave as nil to disable)
            
                Callback = function(Value)
                    entitySettings["NPC"].Color = Value
                end
            })
        
            NpcEspSection:AddSlider('npcThickness', {
                Text = 'Tracer Thickness',
                Default = 2,
                Min = 1,
                Max = 10,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    entitySettings["NPC"].Thickness = Value
                end
            })
        
            NpcEspSection:AddSlider('npcBoxThickness', {
                Text = 'Box Thickness',
                Default = 2,
                Min = 1,
                Max = 10,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    entitySettings["NPC"].Thickness = Value
                end
            })
        
            NpcEspSection:AddSlider('npcProximity', {
                Text = 'Distance',
                Default = 50000,
                Min = 1,
                Max = 50000,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    entitySettings["NPC"].Proximity = Value
                end
            })
        
            IslandEspSection:AddToggle('islandEsp', {
                Text = "Enabled",
                Default = false,
                Callback = function(enabled)
                    entitySettings["Island"].Esp = enabled
                end
            })
            
            IslandEspSection:AddToggle('islandDistanceEsp', {
                Text = "Show Distance",
                Default = false,
                Callback = function(enabled)
                    entitySettings["Island"].Distance = enabled
                end
            })
        
            IslandEspSection:AddToggle('islandTracers', {
                Text = "Tracers",
                Default = false,
                Callback = function(enabled)
                    entitySettings["Island"].Tracers = enabled
                end
            })
        
            IslandEspSection:AddLabel('Color'):AddColorPicker('IslandColorPicker', {
                Default = Color3.new(1, 1, 0), -- Bright green
                Title = 'Color', -- Optional. Allows you to have a custom color picker title (when you open it)
                Transparency = 0, -- Optional. Enables transparency changing for this color picker (leave as nil to disable)
            
                Callback = function(Value)
                    entitySettings["Island"].Color = Value
                end
            })
        
            IslandEspSection:AddSlider('islandThickness', {
                Text = 'Tracer Thickness',
                Default = 2,
                Min = 1,
                Max = 10,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    entitySettings["Island"].Thickness = Value
                end
            })
        
            IslandEspSection:AddSlider('islandProximity', {
                Text = 'Distance',
                Default = 50000,
                Min = 1,
                Max = 50000,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    entitySettings["Island"].Proximity = Value
                end
            })
        
            WebhookSecion:AddInput('webhookTextbox', {
                Default = '',
                Numeric = false, 
                Finished = false, 
            
                Text = "Target Level",
            
                Placeholder = '...',
            
                Callback = function(Value)
                    levelTarget = Value
                end
            })
        
            WebhookSecion:AddToggle('levelReached', {
                Text = "Notify Level Reached",
                Default = false,
                Callback = function(enabled)
                    connections['LevelNotify'] = stats.Level:GetPropertyChangedSignal("Value"):Connect(function()
                        if stats.Level.Value == levelTarget then
                            local response = request(
                                {
                                    Url = webHook,
                                    Method = 'POST',
                                    Headers = {
                                        ['Content-Type'] = 'application/json'
                                    },
                                    Body = HttpService:JSONEncode({
                                        ["content"] = "",
                                        ["embeds"] = {{
                                            ["title"] = "Level Reached",
                                            ["color"] = 0x00c2ff,
                                            ["fields"] = {
                                                {
                                                    ["name"] = "Account",
                                                    ["value"] = "||" .. game.Players.LocalPlayer.Name .. "||",
                                                    ["inline"] = true
                                                },
                                                {
                                                    ["name"] = "Level",
                                                    ["value"] = tostring(levelTarget),
                                                    ["inline"] = true
                                                }
                                            },
                                            ["footer"] = {
                                                    ["text"] = "Medusa Hub",
                                                    ["icon_url"] = "https://cdn.discordapp.com/icons/1225297701445570713/f91265adf2d0a709e808acfcd93535e0.webp?size=96"
                                                }
                                        }}
                                    })
                                }
                            )
                        end
                    end) 
                end
            })
        
            if game.PlaceId == 7465136166 then
                SeasSection:AddButton({
                    Text = "TP to Sea 1",
                    Func = function()
                        for i = 1, 10 do
                            task.wait()
                            HumanoidRootPart.CFrame = CFrame.new(-8876.08837890625 + i, 99.5518798828125 + i, 442.4129638671875 + i)
                        end
                    end,
                    DoubleClick = false
                })
            elseif game.PlaceId == 3978370137 then
                SeasSection:AddButton({
                    Text = "TP to Sea 2",
                    Func = function()
                        HumanoidRootPart.CFrame = CFrame.new(-14858.0810546875, 206.9955444335938, -9042.7314453125)
                    end,
                    DoubleClick = false
                })
        
                SeasSection:AddButton({
                    Text = "Get Scroll",
                    Func = function()
                        for i = 1, 10 do
                            task.wait()
                            HumanoidRootPart.CFrame = CFrame.new(-8876.08837890625 + i, 99.5518798828125 + i, 442.4129638671875 + i)
                        end
                    end,
                    DoubleClick = false
                })
            end
        
            ShipSection:AddToggle('sheepSpeed', {
                Text = "Ship Speed",
                Default = false,
                Callback = function(enabled)
                    if enabled then
                        if connections['Spot'] then
                            connections['Spot']:Disconnect()
                            connections['Spot'] = nil
                        end
                        connections['Ship'] = RunService.RenderStepped:Connect(function()
                            local currentSpeed = tonumber(speed.Text)
                            local shipHrp = ship:FindFirstChild("HumanoidRootPart")
                            if currentSpeed ~= 0 and shipHrp then
                                shipHrp.CFrame *= CFrame.new(currentSpeed * 10 / (currentSpeed * shipMultiplier), 0, 0)
                            end
                        end)
                    elseif connections['Ship'] then
                        connections['Ship']:Disconnect()
                        connections['Ship'] = nil
                    end
                end
            })
        
            ShipSection:AddSlider('shipSpeedyeah', {
                Text = "Multiplier",
                Default = 10,
                Min = 1,
                Max = 100,
                Rounding = 0,
                Compact = false,
                Callback = function(Value)
                    shipMultiplier = Value
                end
            })
            
        
            ShipSection:AddToggle('AnchorShip', {
                Text = "Anchor Ship",
                Default = false,
                Callback = function(enabled)
                    anchorShip = enabled
                    local shipHrp = ship:FindFirstChild("HumanoidRootPart")
                    if  shipHrp then
                        shipHrp.Anchored = enabled
                    end
                end
            })
        
            StatsSection:AddToggle('strength', {
                Text = "Put SP Into Strength",
                Default = false,
                Callback = function(enabled)
                    local stat = "Strength"
                    if enabled then
                        connections[stat] = RunService.Stepped:Connect(function()
                            addSP(stat)
                        end)
                    else
                        if connections[stat] then
                            connections[stat]:Disconnect()
                            connections[stat] = nil
                        end
                    end
                end
            })
        
            StatsSection:AddToggle('Stamina', {
                Text = "Put SP Into Stamina",
                Default = false,
                Callback = function(enabled)
                    local stat = "Stamina"
                    if enabled then
                        connections[stat] = RunService.Stepped:Connect(function()
                            addSP(stat)
                        end)
                    else
                        if connections[stat] then
                            connections[stat]:Disconnect()
                            connections[stat] = nil
                        end
                    end
                end
            })
        
            StatsSection:AddToggle('Defense', {
                Text = "Put SP Into Defense",
                Default = false,
                Callback = function(enabled)
                    local stat = "Defense"
                    if enabled then
                        connections[stat] = RunService.Stepped:Connect(function()
                            addSP(stat)
                        end)
                    else
                        if connections[stat] then
                            connections[stat]:Disconnect()
                            connections[stat] = nil
                        end
                    end
                end
            })
        
            StatsSection:AddToggle('GunMastery', {
                Text = "Put SP Into Gun Mastery",
                Default = false,
                Callback = function(enabled)
                    local stat = "GunMastery"
                    if enabled then
                        connections[stat] = RunService.Stepped:Connect(function()
                            addSP(stat)
                        end)
                    else
                        if connections[stat] then
                            connections[stat]:Disconnect()
                            connections[stat] = nil
                        end
                    end
                end
            })
        
            StatsSection:AddToggle('SwordMastery', {
                Text = "Put SP Into Sword Mastery",
                Default = false,
                Callback = function(enabled)
                    local stat = "SwordMastery"
                    if enabled then
                        connections[stat] = RunService.Stepped:Connect(function()
                            addSP(stat)
                        end)
                    else
                        if connections[stat] then
                            connections[stat]:Disconnect()
                            connections[stat] = nil
                        end
                    end
                end
            })
        
            LevelSection:AddToggle('farmLevel', {
                Text = "Farm Level",
                Default = false,
                Callback = function(enabled)
                    if enabled then
                        startLevelFarm()
                    else
                        stopLevelFarm()
                    end
                end
            })
        
            LevelSection:AddToggle('takeQuestToggle', {
                Text = "Take Quest",
                Default = false,
                Callback = function(enabled)
                    takeQuestEnabled = enabled
                end
            })
        
            LevelSection:AddToggle('lerpToSpot', {
                Text = "Lerp to Spot",
                Default = false,
                Callback = function(enabled)
                    if enabled then
                        connections['Spot'] = RunService.Stepped:Connect(function()
                            if levelSpot then
                                lerpCFrame(HumanoidRootPart, levelSpot, 50)
                            end
                        end)
                    elseif connections['Spot'] then
                        connections['Spot']:Disconnect()
                        connections['Spot'] = nil
                    end
                end
            })
        
            LevelSection:AddButton({
                Text = "Set Spot",
                Func = function()
                levelSpot = HumanoidRootPart.CFrame
                end,
                DoubleClick = false
            })
        
            LevelSection:AddButton({
                Text = "TP to Fishman Island",
                Func = function()
                    for i = 1, 10 do
                        task.wait()
                        HumanoidRootPart.CFrame = CFrame.new(5639.86865, -92.762001 + i, -16611.4688)
                    end
                end,
                DoubleClick = false
            })
        
        
        
            ParrySection:AddToggle('autoParry', {
                Text = "Parry Sharks",
                Default = false,
                Callback = function(enabled)
                    autoParry = enabled
                end
            })
        
            AnticheatSection:AddToggle('acBypass', {
                Text = "Bypass Movement",
                Default = false,
                Callback = function(enabled)
                    acBypass = enabled
                end
            })
        
            AnticheatSection:AddSlider('staminaDrain', {
                Text = "Intensity",
                Default = 0.05,
                Min = 0.05,
                Max = 0.5,
                Rounding = 2,
                Compact = false,
                Callback = function(Value)
                    staminaDrain = Value
                end
            })
        
            AnticheatSection:AddLabel('FAQ: Lower intensity means better bypass but more stamina drain', true)
        
            CombatSection:AddToggle('expandHitboxes', {
                Text = "Expand Mob Hitboxes",
                Default = false,
                Callback = function(enabled)
                    if enabled then
                        for i, entity in NPCs:GetChildren() do
                            local hrp = entity:FindFirstChild("HumanoidRootPart")
                            if entity:IsA("Model") and hrp then
                                expandHitbox(hrp)
                            end
                        end
                        connections["hitboxNPC"] = NPCs.ChildAdded:Connect(function()
                            local hrp = entity:FindFirstChild("HumanoidRootPart")
                            if entity:IsA("Model") and hrp then
                                expandHitbox(hrp)
                            end
                        end)
                    else
                        for i, entity in NPCs:GetChildren() do
                            local hrp = entity:FindFirstChild("HumanoidRootPart")
                            if entity:IsA("Model") and hrp and oldHitboxes[hrp] then
                                if connections[hrp] then
                                    connections[hrp]:Disconnect()
                                    connections[hrp] = nil
                                end
                                hrp.Size = oldHitboxes[hrp]
                                hrp.Transparency = 1
                            end
                        end
                        if connections["hitboxNPC"] then
                            connections["hitboxNPC"]:Disconnect()
                            connections["hitboxNPC"] = nil
                        end
                    end
                end
            })
        
            CombatSection:AddToggle('expandPlayers', {
                Text = "Expand Player Hitboxes",
                Default = false,
                Callback = function(enabled)
                    if enabled then
                        for i, entity in Characters:GetChildren() do
                            local hrp = entity:FindFirstChild("HumanoidRootPart")
                            if entity:IsA("Model") and hrp and entity ~= Character then
                                expandHitbox(hrp)
                            end
                        end
                        connections["hitboxPlayers"] = Characters.ChildAdded:Connect(function()
                            local hrp = entity:FindFirstChild("HumanoidRootPart")
                            if entity:IsA("Model") and hrp then
                                expandHitbox(hrp)
                            end
                        end)
                    else
                        for i, entity in Characters:GetChildren() do
                            local hrp = entity:FindFirstChild("HumanoidRootPart")
                            if entity:IsA("Model") and hrp and oldHitboxes[hrp] and entity ~= Character then
                                if connections[hrp] then
                                    connections[hrp]:Disconnect()
                                    connections[hrp] = nil
                                end
                                hrp.Size = oldHitboxes[hrp]
                                hrp.Transparency = 1
                            end
                        end
                        if connections["hitboxPlayers"] then
                            connections["hitboxPlayers"]:Disconnect()
                            connections["hitboxPlayers"] = nil
                        end
                    end
                end
            })
            
            local playerDropdown = PlayersGroup:AddDropdown('Player', {
                AllowNull = true,
                Values = getPlayerNames(),
                Default = nil,
                Multi = false,
            
                Text = 'Selected Player',
            
                Callback = function(Value)
                    selectedPlayer = Value
                end
            })
        
            PlayersGroup:AddToggle('spectatePLR', {
                Text = "Spectate Player",
                Default = false,
                Callback = function(enabled)
                    if enabled then
                        local selectedPlr = game:GetService("Players"):FindFirstChild(selectedPlayer)
                        if selectedPlr then
                            local charExists = selectedPlr.Character
                            if charExists then
                                local humExists = charExists:FindFirstChild("Humanoid")
                                if humExists then
                                    Camera.CameraSubject = humExists
                                end
                            end
                        end
                    else
                        Camera.CameraSubject = Humanoid
                    end
                end
            })
            
            PlayersGroup:AddButton({
                Text = "Lerp to Player",
                Func = function()
                    local selectedPlr = game:GetService("Players"):FindFirstChild(selectedPlayer)
                    if selectedPlr then
                        local charExists = selectedPlr.Character
                        if charExists then
                            lerpCFrame(HumanoidRootPart, charExists:GetPivot(), 150)
                        end
                    end
                end,
                DoubleClick = false
            })
        
            PlayersGroup:AddButton({
                Text = "Walk to Player",
                Func = function()
                    local selectedPlr = game:GetService("Players"):FindFirstChild(selectedPlayer)
                    if selectedPlr then
                        local charExists = selectedPlr.Character
                        if charExists then
                            Humanoid:MoveTo(charExists:GetPivot().Position)
                        end
                    end
                end,
                DoubleClick = false
            })
        
            PlayersGroup:AddButton({
                Text = "Copy Position",
                Func = function()
                    local selectedPlr = game:GetService("Players"):FindFirstChild(selectedPlayer)
                    if selectedPlr then
                        local charExists = selectedPlr.Character
                        if charExists then
                            setclipboard(tostring(charExists:GetPivot().Position))
                        end
                    end
                end,
                DoubleClick = false
            })
        
            PlayersGroup:AddButton({
                Text = "Copy Player ID",
                Func = function()
                    local selectedPlr = game:GetService("Players"):FindFirstChild(selectedPlayer)
                    if selectedPlr then
                        setclipboard(selectedPlr.UserId)
                    end
                end,
                DoubleClick = false
            })
        
            PlayersGroup:AddButton({
                Text = "Copy Distance",
                Func = function()
                    local selectedPlr = game:GetService("Players"):FindFirstChild(selectedPlayer)
                    if selectedPlr then
                        local charExists = selectedPlr.Character
                        if charExists then
                            local distance = (charExists:GetPivot().Position - Character:GetPivot().Position).Magnitude
                            setclipboard(distance)
                        end
                    end
                end,
                DoubleClick = false
            })
        
            local flyToggle = MiscSection:AddToggle('flyToggle', {
                Text = "Fly",
                Default = false,
                Keybind = {
                    Flag = "flyKeybind",
                    Mode = "Toggle"
                },
                Callback = function(enabled)
                    flyEnabled = enabled
                end
            })
            
            MiscSection:AddSlider('flySlider', {
                Text = 'Fly Speed',
                Default = 50,
                Min = 0,
                Max = 200,
                Rounding = 0,
                Compact = false,
                Callback = function(Value)
                    flySpeed = Value
                end
            })
            
        
            local walkspeedToggle = MiscSection:AddToggle('walkspeedToggle', {
                Text = "WalkSpeed Toggle",
                Default = false,
                Callback = function(enabled)
                    wsEnabled = enabled
                end
            })
            
            MiscSection:AddSlider('walkspeedSlider', {
                Text = 'WalkSpeed',
                Default = 16,
                Min = 0,
                Max = 200,
                Rounding = 0,
                Compact = false,
                Callback = function(Value)
                    walkSpeed = Value
                end
            })
        
            local infJumpToggle = MiscSection:AddToggle('jumpToggle', {
                Text = "Infinite Jump",
                Default = false,
                Callback = function(enabled)
                    if enabled then
                        connections["Jump"] = UserInputService.JumpRequest:Connect(function()
                            pcall(function()
                                HumanoidRootPart.Velocity = Vector3.new(HumanoidRootPart.Velocity.X, 0, HumanoidRootPart.Velocity.Z)
                                HumanoidRootPart:ApplyImpulse(Vector3.new(0, 500, 0))
                            end)
                        end)
                    else
                        if connections["Jump"] then
                            pcall(function()
                                connections["Jump"]:Disconnect()
                                connections["Jump"] = nil
                            end)
                        end
                    end
                end
            })
        
            local noclipToggle = MiscSection:AddToggle('noclipToggle', {
                Text = "Noclip",
                Default = false,
                Callback = function(enabled)
                    if enabled then
                        connections["Noclip"] = RunService.Stepped:Connect(LPH_NO_VIRTUALIZE(function()
                            pcall(function()
                                for _,v in pairs(Character:GetDescendants()) do
                                    if v:IsA('BasePart') and v.CanCollide and v.Name ~= floatName then
                                        v.CanCollide = false
                                    end
                                end
                            end)
                        end))
                    else
                        if connections["Noclip"] then
                            local oldJP = Humanoid.JumpPower
                            Humanoid.JumpPower = 0.01
                            Humanoid:ChangeState("Jumping")
                            task.wait()
                            Humanoid.JumpPower = oldJP
                            pcall(function()
                                connections["Noclip"]:Disconnect()
                                connections["Noclip"] = nil
                            end)
                        end
                    end
                end
            })
        
            CombatSection:AddToggle('giveGeppo', {
                Text = "Give Geppo",
                Default = false,
                Callback = function(enabled)
                    pcall(function()
                        local geppoExists = skillsFolder:FindFirstChild("skyWalk")
                        if geppoExists then
                            geppoExists.Value = enabled
                        end
                    end)
                end
            })
        
            CombatSection:AddButton({
                Text = "No Dash Stamina",
                Func = function()
                    local namecall
                    if getgenv().hookmetamethod then
                        namecall = hookmetamethod(game, "__namecall", function(self,...)
                            local args = {...}
                            local method = getnamecallmethod():lower()
                            if not checkcaller() and self == takestam and method == "fireserver" then
                                return namecall(self)
                            end
                            return namecall(self,...)
                        end)
                    end
                end,
                DoubleClick = false
            })
        
            AttachSection:AddToggle('attach', {
                Text = "Attach to Back",
                Default = false,
                Callback = function(enabled)
                    if enabled then
                        connections["Attach"] = RunService.Stepped:Connect(function()
                            local closest = getClosestCharacter()
                            if closest then
                                if followMovement then
                                    HumanoidRootPart.CFrame = closest.CFrame * CFrame.new(closest.Velocity.X / 10, closest.Velocity.Y / 10, closest.Velocity.Z/ 10) * CFrame.new(attachMultiplier, attachMultiplier, attachMultiplier)
                                else
                                    HumanoidRootPart.CFrame = closest.CFrame
                                end
                            end
                        end)
                    else
                        if connections["Attach"] then
                            connections["Attach"]:Disconnect()
                            connections["Attach"] = nil
                        end
                    end
                end
            })
        
            AttachSection:AddToggle('followMovement', {
                Text = "Follow Movement",
                Default = false,
                Callback = function(enabled)
                    followMovement = enabled
                end
            })
        
            AttachSection:AddSlider('attachPrixomity', {
                Text = 'Target Proximity',
                Default = 10,
                Min = 1,
                Max = 20,
                Rounding = 0,
                Compact = false,
                Callback = function(Value)
                    attachDistance = Value
                end
            })
        
            AttachSection:AddSlider('attachDistance', {
                Text = 'Movement Multiplier',
                Default = 1,
                Min = 1,
                Max = 10,
                Rounding = 0,
                Compact = false,
                Callback = function(Value)
                    attachMultiplier = Value
                end
            })
        
            MiscSection:AddToggle('noFall', {
                Text = "No Fall Damage",
                Default = false,
                Callback = function(enabled)
                    noFall = enabled
                    if fallDmgScript then
                        if enabled then
                            fallDmgScript.Parent = nil
                        else
                            fallDmgScript.Parent = Character
                        end
                    end
                end
            })
        
            MiscSection:AddToggle('noFog', {
                Text = "No Fog",
                Default = false,
                Callback = function(enabled)
                    noFog = enabled
                    if enabled then
                        fog.Density = 0
                    else
                        fog.Density = oldDensity
                    end
                end
            })
        
            MiscSection:AddToggle('fullBright', {
                Text = "Full Bright",
                Default = false,
                Callback = function(enabled)
                    fullBright = enabled
                    if enabled then
                        Lighting.Brightness = 2.5
                        Lighting.ClockTime = 12
                    else
                        Lighting.Brightness = oldBrightness
                        Lighting.ClockTime = oldClockTime
                    end
                end
            })
        
            MiscSection:AddSlider('fovslider', {
                Text = 'FOV',
                Default = 70,
                Min = 0,
                Max = 120,
                Rounding = 0,
                Compact = false,
                Callback = function(Value)
                    Camera.FieldOfView = Value
                end
            })  

            MiscSection:AddToggle('infStam', {
                Text = "Infinite Stamina (BUGGY)",
                Default = false,
                Callback = function(enabled)
                    if enabled then
                        connections["Stamina"] = RunService.Heartbeat:Connect(function()
                            local staminaValue = stats:FindFirstChild("Stamina")
                            if staminaValue then
                                staminaValue.Value = staminaValue.MaxValue
                            end
                        end)
                    elseif connections["Stamina"] then
                        connections["Stamina"]:Disconnect()
                        connections["Stamina"] = nil
                    end
                end
            })
        end
        
        local function init()
            updateCharacterVariables()
            initializeEsp()
            ship = Ships:FindFirstChild(LocalPlayer.Name .. "Ship")
            LocalPlayer.CharacterAdded:Connect(updateCharacterVariables)
            buildUI()
        end
        
        ------------------------- Init ----------------------------
        
        init()

    elseif game.GameId == 5578556129 then

local Players = game:GetService("Players")
local VIM = Instance.new("VirtualInputManager")
local StarterGui = game:GetService("StarterGui")
local GuiService = game:GetService("GuiService")
local CoreGui = game:GetService("CoreGui")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")

local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local PlayerGui = LocalPlayer.PlayerGui

local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
local Humanoid = Character:WaitForChild("Humanoid")

local UnitsFolder
task.spawn(function()
    UnitsFolder = workspace:WaitForChild("Units")
end)

local WavesAmount
if PlayerGui.HUD:FindFirstChild("Map") then
    WavesAmount = PlayerGui.HUD.Map.WavesAmount
end
local gameStartTime

local CurrentUnitIndex = 1
local UnitIndexes = {}
local globalMacroName
local chosenMacroPath

local RecordingQueued = false
local AlreadyRecording = false
local RecordFinished = false

local playMacro
local connections = {}

local UnitPlacementHandler
local OldFunction
if game:GetService("StarterPlayer").Modules.Gameplay:FindFirstChild("UnitPlacementHandler") then
    UnitPlacementHandles = require(game:GetService("StarterPlayer").Modules.Gameplay.UnitPlacementHandler)
    OldFunction = UnitPlacementHandles.PlaceUnit
end

local GlobalWebhook

----- Tables -------

local Codes = {
    "TIKTOK50K",
    "ROST10K",
    "SLAYER",
    "LATEUPDATESORRY",
    "THXFOR1MLIKES",
    "300KPLAYERS",
    "100MVISITS",
    "800KLIKES",
    "70MVISITS",
    "600KLIKES",
    "AV500KLIKES",
    "25MVISITS",
    "AV50MIL",
    "400KLIKES",
    "10MVISITS",
    "300KLIKES",
    "200KLIKES",
    "100KLIKES",
    "10KLIKES",
    "RELEASE",
    "DELAY"
}

local margs = {
    [1] = "Confirm",
    [2] = {
        [1] = "Story",      -- Map (Story, LegendStage, Raid)
        [2] = "Stage1",     -- Stage (Stage1, Stage2, Stage3)
        [3] = "Act1",       -- Act (Act1 - Act6, ActInfinite)
        [4] = "Normal",     -- Difficulty (Normal, Nightmare)
        [5] = 4,
        [6] = 0,
        [7] = false
    }
}

local maps = {"Story", "LegendStage", "Raid"}
local stages = {"Stage1", "Stage2", "Stage3"}
local acts = {"Act1", "Act2", "Act3", "Act4", "Act5", "Act6", "ActInfinite"}
local difficulties = {"Normal", "Nightmare"}

------- Functions ------------

local function InitializeMacroFile(macroName)
    writefile("Medusa/Anime Vanguards/Macros/" .. macroName .. ".txt", "")
    globalMacroName = macroName
end

local function GetFinishedQuests()
    local QuestsFinished = {}
    local Quests = PlayerGui.Windows.Quests.Holder.Main.Quests:GetChildren()

    for i, Quest in Quests do
        if Quest:FindFirstChild("Alert") then
            table.insert(QuestsFinished, Quest.Name)
        end
    end

    return QuestsFinished
end

local function ClaimQuest(QuestName)
    local args = {
        [1] = QuestName
    }

    game:GetService("ReplicatedStorage").Networking.Quests.ClaimQuest:FireServer(unpack(args))
end

local function ClaimAllQuests()
    local FinishedQuests = GetFinishedQuests()

    for i, Quest in FinishedQuests do
        ClaimQuest(Quest)
    end
end

local function LogUnitSpawn(UnitName, UnitID, UnitPos)
    local currentTime = tick()
    local timeSinceGameStart = currentTime - gameStartTime

    local log = string.format("UnitPlaced,%d,%s,%s,%s,%s,%s,%s\n", CurrentUnitIndex, UnitID, UnitName, tostring(UnitPos.X), tostring(UnitPos.Y), tostring(UnitPos.Z), tostring(timeSinceGameStart))

    if isfile("Medusa/Anime Vanguards/Macros/" .. globalMacroName .. ".txt") then
        appendfile("Medusa/Anime Vanguards/Macros/" .. globalMacroName .. ".txt", log)
        print('Appended file with ' .. log)
    else
        print("No file with name Medusa/Anime Vanguards/Macros/" .. globalMacroName .. ".txt")
    end

    print("Logged Unit Spawned:\nIndex: " .. CurrentUnitIndex .. "\nUnitID: " .. UnitID .. "\nUnitName: " .. UnitName .. "\nPosition: " .. tostring(UnitPos) .. "\nTime Since Game Start: " .. timeSinceGameStart)
end

local function VM1Click(X, Y)
    VIM:SendMouseButtonEvent(X, Y, 0, true, game, 0)
    task.wait()
    VIM:SendMouseButtonEvent(X, Y, 0, false, game, 0)
end

local function hook(arg)
    if type(arg) == "table" and arg._CurrentActiveUnit then
        local currentActiveUnit = arg._CurrentActiveUnit

        if type(currentActiveUnit.UnitData) == "table" then
            local unitData = currentActiveUnit.UnitData

            if type(unitData.Data) == "table" then
                local UnitName = unitData.Data.Name
                local UnitID = unitData.Data.ID

                local TemporaryConnection
                TemporaryConnection = UnitsFolder.ChildAdded:Connect(function(Unit)
                    if Unit:IsA("Model") and Unit.Name == UnitName then
                        local UnitPos = Unit:GetPivot().Position

                        LogUnitSpawn(UnitName, UnitID, UnitPos)

                        TemporaryConnection:Disconnect()
                        TemporaryConnection = nil
                    end
                end)
            end
        end
    end

    OldFunction(arg)
end

local function ExtractFileName(filePath)
    local fileName = filePath:match("([^/\\]+)$")
    print("Extracted File Name (with extension):", fileName)
    local baseName = fileName and fileName:gsub("%.txt$", "") or ""
    print("Base Name (without extension):", baseName)
    return baseName
end

local function LogUnitUpgrade(UnitMappedName)
    local FoundUnitIndex = UnitIndexes[UnitMappedName]
    print('aigh im looking for it')
    if FoundUnitIndex then
        local currentTime = tick()
        local timeSinceGameStart = currentTime - gameStartTime
        local log = string.format("UnitUpgraded,%d,%s\n", FoundUnitIndex, tostring(timeSinceGameStart))

        if isfile("Medusa/Anime Vanguards/Macros/" .. globalMacroName .. ".txt") then
            appendfile("Medusa/Anime Vanguards/Macros/" .. globalMacroName .. ".txt", log)
            print('file appended')
        end

        print("Logged Unit Upgrade:\nIndex: " .. FoundUnitIndex .. "\nTime Since Game Start: " .. timeSinceGameStart)
    end
end

local function LogUnitSold(UnitIndex)
    local currentTime = tick()
    local timeSinceGameStart = currentTime - gameStartTime
    local log = string.format("UnitSold,%d,%s\n", UnitIndex, tostring(timeSinceGameStart))

    if isfile("Medusa/Anime Vanguards/Macros/" .. globalMacroName .. ".txt") then
        appendfile("Medusa/Anime Vanguards/Macros/" .. globalMacroName .. ".txt", log)
        print('file appended')
    end

    print("Logged Unit Sold:\nIndex: " .. UnitIndex .. "\nTime Since Game Start: " .. timeSinceGameStart)
end

local function ProcessUnitSpawned(args)
    local UnitName = args[2][1]
    local UnitID = args[2][2]
    local UnitPos = args[2][3]

    print("Unit Rendered!\nName: " .. UnitName .. "\nID: " .. UnitID .. "\nPosition: " .. tostring(UnitPos))
    LogUnitSpawn(UnitName, UnitID, UnitPos)
end

local function PlaceUnit(Info)
    local UnitModel
    local args = {
        [1] = "Render",
        [2] = {
            [1] = Info["Name"],
            [2] = Info["ID"],
            [3] = Info["Position"],
            [4] = 0
        }
    }

    game:GetService("ReplicatedStorage").Networking.UnitEvent:FireServer(unpack(args))

    local TemporaryConnection
    TemporaryConnection = UnitsFolder.ChildAdded:Connect(function(Unit)
        if Unit:IsA("Model") then

            UnitIndexes[Unit.Name] = CurrentUnitIndex
            print('Added to index ' .. tostring(CurrentUnitIndex))
            CurrentUnitIndex += 1

        end
    end)

end


local function RollBanner(amount)
    local args = {
        [1] = "Summon" .. amount,
        [2] = "Special"
    }

    game:GetService("ReplicatedStorage").Networking.Units.SummonEvent:FireServer(unpack(args))
end

local function UpgradeUnit(UnitIndex)
    print('received upgrade func')
    for name, index in pairs(UnitIndexes) do
        print(name)
        if index == UnitIndex then
            local args = {
                [1] = "Upgrade",
                [2] = name
            }
            print("Upgrading unit:\nIndex: " .. UnitIndex .. "\nMapped Name: " .. name)
            ReplicatedStorage.Networking.UnitEvent:FireServer(unpack(args))
            return
        end
    end
    print("Unit with index " .. UnitIndex .. " not found for upgrade.")
end

local function SellUnit(UnitIndex)
    print('received sell func')
    for name, index in pairs(UnitIndexes) do
        print("Index: " .. index .. " Name: " .. name)
        if index == UnitIndex then
            local args = {
                [1] = "Sell",
                [2] = name
            }
            print("Sold unit:\nIndex: " .. UnitIndex .. "\nMapped Name: " .. name)
            ReplicatedStorage.Networking.UnitEvent:FireServer(unpack(args))
            return
        end
    end
    print("Unit with index " .. UnitIndex .. " not found for sale.")
end

local function ReplayMacro(macroName)
    if not readfile then return end

    print(macroName)
    local fileContent = readfile(macroName)
    local units = {}
    local upgrades = {}
    local sales = {}

    for line in fileContent:gmatch("[^\r\n]+") do
        local data = line:split(",")
        if data[1] == "UnitPlaced" then
            local UnitIndex = tonumber(data[2])
            local UnitID = data[3]
            local UnitName = data[4]
            local UnitPos = Vector3.new(tonumber(data[5]), tonumber(data[6]), tonumber(data[7]))
            local relativeSpawnTime = tonumber(data[8])

            table.insert(units, {
                Index = UnitIndex,
                ID = UnitID,
                Name = UnitName,
                Position = UnitPos,
                Time = relativeSpawnTime
            })
        elseif data[1] == "UnitUpgraded" then
            local UnitIndex = tonumber(data[2])
            local relativeUpgradeTime = tonumber(data[3])

            print(tostring(UnitIndex) .. " is gonna be upgraded at " .. tostring(relativeUpgradeTime))
            table.insert(upgrades, {
                Index = UnitIndex,
                UpgradeTime = relativeUpgradeTime
            })
        elseif data[1] == "UnitSold" then
            local UnitIndex = tonumber(data[2])
            local relativeSaleTime = tonumber(data[3])

            print(tostring(UnitIndex) .. " is gonna be sold at " .. tostring(relativeSaleTime))
            table.insert(sales, {
                Index = UnitIndex,
                SaleTime = relativeSaleTime
            })
        end
    end

    table.sort(units, function(a, b)
        return (a.Time or math.huge) < (b.Time or math.huge)
    end)

    repeat task.wait() until WavesAmount.Text == "1"

    for _, unit in ipairs(units) do
        local delay = unit.Time
        task.wait(delay)
        PlaceUnit(unit)
    end

    for _, upgrade in ipairs(upgrades) do
        task.wait(upgrade.UpgradeTime)
        UpgradeUnit(upgrade.Index)
    end

    for _, sale in ipairs(sales) do
        task.wait(sale.SaleTime)
        SellUnit(sale.Index)
    end
end

local function OnWaveOneDetected()
    if WavesAmount.Text == "1" and not AlreadyRecording then
        print("Game restarted, replaying macro...")
        ReplayMacro(chosenMacroPath)
    end
end

local function printTable(t)
    for key, value in pairs(t) do
        print(key, value)
    end
end

local function StartRecording(macroName)
    if not RecordingQueued then
        RecordingQueued = true
        
        InitializeMacroFile(macroName)

        local OldFunction = UnitPlacementHandles.PlaceUnit

        local function hook(arg)
            if type(arg) == "table" and arg._CurrentActiveUnit then
                local currentActiveUnit = arg._CurrentActiveUnit

                if type(currentActiveUnit.UnitData) == "table" then
                    local unitData = currentActiveUnit.UnitData

                    if type(unitData.Data) == "table" then
                        local UnitName = unitData.Data.Name
                        local UnitID = unitData.Data.ID

                        local TemporaryConnection
                        TemporaryConnection = UnitsFolder.ChildAdded:Connect(function(Unit)
                            if Unit:IsA("Model") then
                                local UnitPos = Unit:GetPivot().Position
                                LogUnitSpawn(UnitName, UnitID, UnitPos)

                                UnitIndexes[Unit.Name] = CurrentUnitIndex
                                CurrentUnitIndex += 1

                                Unit.ChildAdded:Connect(function(Child)
                                    if Child.Name == "UpgradeText" then
                                        LogUnitUpgrade(Unit.Name)
                                    end
                                end)


                                TemporaryConnection:Disconnect()
                                TemporaryConnection = nil
                            end
                        end)
                    end
                end
            end

            OldFunction(arg)
        end

        UnitsFolder.ChildRemoved:Connect(function(Unit)
            if UnitIndexes[Unit.Name] then
                LogUnitSold(UnitIndexes[Unit.Name])
            end
        end)

        UnitPlacementHandles.PlaceUnit = hook
    end
end

local function GetTableKeys(t)
    local keys = {}
    for key, _ in pairs(t) do
        table.insert(keys, key)
    end
    return keys
end

-------- UI --------

repo = 'https://raw.githubusercontent.com/kqmeta/LinoriaLib/main/'

Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local function buildUI()
    local ZekeHub = Library:CreateWindow({
        Title = 'Zeke Hub | Anime Vanguard',
        Center = true,
        AutoShow = true,
        TabPadding = 8,
        MenuFadeTime = 0.2
    })
    
    local MainTab = ZekeHub:AddTab('Main')
    local Settings = ZekeHub:AddTab('UI Settings')

    local MenuGroup = Settings:AddLeftGroupbox('Menu')

    MenuGroup:AddButton('Unload', function() Library:Unload() end)
    MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })
    Library.ToggleKeybind = Options.MenuKeybind
    ThemeManager:SetLibrary(Library)
    SaveManager:SetLibrary(Library)
    ThemeManager:SetFolder('Medusa')
    SaveManager:SetFolder('Medusa/Type Soul')
    SaveManager:BuildConfigSection(Settings)
    pcall(function()
        ThemeManager:ApplyToTab(Settings)
    end)

    local MacroGroup = MainTab:AddLeftGroupbox('Macro')
    local UnitsGroup = MainTab:AddLeftGroupbox('Units')
    local MiscGroup = MainTab:AddRightGroupbox('Misc')
    local MapGroup = MainTab:AddRightGroupbox("Map")

    UnitsGroup:AddToggle('autoSkip', {
        Text = "Auto Skip / Start",
        Default = false,
        Callback = function(enabled)
            if enabled then
                connections["AutoSkip"] = RunService.Stepped:Connect(function()
                    local args = {
                        [1] = "Skip"
                    }

                    game:GetService("ReplicatedStorage").Networking.SkipWaveEvent:FireServer(unpack(args))
                end)
            elseif connections["AutoSkip"] then
                connections["AutoSkip"]:Disconnect()
                connections["AutoSkip"] = nil
            end
        end
    })


    UnitsGroup:AddToggle('autoUpgrade', {
        Text = "Auto Upgrade",
        Default = false,
        Callback = function(enabled)
            if enabled then
                connections["AutoUpgrade"] = RunService.RenderStepped:Connect(function()
                    for i, Unit in UnitsFolder:GetChildren() do
                        task.wait()
    
                        local args = {
                            [1] = "Upgrade",
                            [2] = Unit.Name
                        }
    
                        game:GetService("ReplicatedStorage").Networking.UnitEvent:FireServer(unpack(args))
                    end
                end)
            elseif connections["AutoUpgrade"] then
                connections["AutoUpgrade"]:Disconnect()
                connections["AutoUpgrade"] = nil
            end
        end
    })

    MiscGroup:AddButton({
        Text = "Claim Codes",
        Func = function()

            for i, code in Codes do

                local args = {[1] = code}
            
                game:GetService("ReplicatedStorage").Networking.CodesEvent:FireServer(unpack(args))
            
            end
        end,
        DoubleClick = false
    })

    MiscGroup:AddButton({
        Text = "Spin One",
        Func = function()
            RollBanner("One")
        end,
        DoubleClick = false
    })

    MiscGroup:AddButton({
        Text = "Spin Ten",
        Func = function()
            RollBanner("Ten")
        end,
        DoubleClick = false
    })

    MiscGroup:AddToggle('autoRollOne', {
        Text = "Auto Roll One",
        Default = false,
        Callback = function(enabled)
            if enabled then
                connections["AutoRollOne"] = RunService.RenderStepped:Connect(function()
                    RollBanner("One")
                end)
            elseif connections["AutoRollOne"] then
                connections["AutoRollOne"]:Disconnect()
                connections["AutoRollOne"] = nil
            end
        end
    })

    MiscGroup:AddToggle('autoRollTen', {
        Text = "Auto Roll Ten",
        Default = false,
        Callback = function(enabled)
            if enabled then
                connections["AutoRollTen"] = RunService.RenderStepped:Connect(function()
                    RollBanner("Ten")
                end)
            elseif connections["AutoRollTen"] then
                connections["AutoRollTen"]:Disconnect()
                connections["AutoRollTen"] = nil
            end
        end
    })

    MiscGroup:AddButton({
        Text = "Claim Quests",
        Func = function()
            ClaimAllQuests()
        end,
        DoubleClick = false
    })

    MiscGroup:AddButton({
        Text = "Join Play Screen",
        Func = function()
            local args = {
                [1] = "Enter",
                [2] = workspace.MainLobby.Lobby.Lobby
            }

            game:GetService("ReplicatedStorage").Networking.LobbyEvent:FireServer(unpack(args))
        end,
        DoubleClick = false
    })

    MacroGroup:AddInput('macroName', {
        Default = '',
        Numeric = false,
        Finished = false,
    
        Text = "Macro Name",
    
        Placeholder = '...',
    
        Callback = function(Value)
            globalMacroName = Value
        end
    })

    local recordButton
    recordButton = MacroGroup:AddButton({
        Text = "Start Recording",
        Func = function()
            if not AlreadyRecording then
                StartRecording(globalMacroName)
                Library:Notify('Started recording macro with name ' .. globalMacroName, 2)
                recordButton.Text = "Recording..."
            end
        end,
        DoubleClick = false
    })

    MacroGroup:AddToggle('recordUpgrades', {
        Text = "Record Upgrades",
        Default = true,
        Callback = function(enabled)
            if enabled then
            end
        end
    })

    MacroGroup:AddToggle('recordUpgrades', {
        Text = "Record Sales",
        Default = true,
        Callback = function(enabled)
            if enabled then
            end
        end
    })

    MacroGroup:AddLabel('=============================================================================================================', false)

    local files = listfiles("Medusa/Anime Vanguards/Macros")

    local macroList = {}
    for _, filePath in pairs(files) do
        local fileName = ExtractFileName(filePath)
        macroList[fileName] = filePath
    end

    MacroGroup:AddDropdown('Macros', {

        AllowNull = true,
        Values = GetTableKeys(macroList),
        Default = nil,
        Multi = false,
    
        Text = 'Selected Macro',
    
        Callback = function(Value)
            chosenMacroPath = macroList[Value]
        end
    })

    local playMacroButton
    playMacroButton = MacroGroup:AddButton({
        Text = "Play Macro",
        Func = function()
            if not playMacro then
                playMacro = true
                playMacroButton.Text = "Playing..."
                Library:Notify('Started playing macro', 2)
            end
        end,
        DoubleClick = false
    })

    MacroGroup:AddInput('Webhook', {
        Default = '',
        Numeric = false,
        Finished = false,
    
        Text = "Webhook",
    
        Placeholder = '...',
    
        Callback = function(Value)
            GlobalWebhook = Value
        end
    })

    MacroGroup:AddToggle('notifyVictory', {
        Text = "Notify Victory",
        Default = false,
        Callback = function(enabled)
            if enabled then
                connections["NotifyVictory"] = PlayerGui.EndScreen.Container:GetPropertyChangedSignal("Visible"):Connect(function()
                                        
                    local MainStageInfo = PlayerGui.EndScreen.Container.EndScreen.Main
                    local StageStats = MainStageInfo.StageStatistics
                    local StageRewards = MainStageInfo.StageRewards

                    local StageName = MainStageInfo.StageInfo.Main.StageName.Text .. " " .. MainStageInfo.StageInfo.Main.ActName.Text .. " " .. MainStageInfo.StageInfo.Main.Difficulty.Text

                    local fields = {
                        {
                            ["name"] = "Units Placed",
                            ["value"] = StageStats.UnitsPlaced.Amount.Text,
                            ["inline"] = true
                        },
                        {
                            ["name"] = "Play Time",
                            ["value"] = StageStats.PlayTime.Amount.Text,
                            ["inline"] = true
                        },
                        {
                            ["name"] = "Takedowns",
                            ["value"] = StageStats.Takedowns.Amount.Text,
                            ["inline"] = true
                        },
                        {
                            ["name"] = "Total Damage",
                            ["value"] = StageStats.TotalDamage.Amount.Text,
                            ["inline"] = true
                        },
                        {
                            ["name"] = "Money Earned",
                            ["value"] = StageStats.MoneyEarned.Amount.Text,
                            ["inline"] = true
                        }
                    }

                    for _, reward in ipairs(StageRewards.Main:GetChildren()) do
                        if reward:IsA("Frame") then
                            table.insert(fields, {
                                ["name"] = reward.Holder.Main.ItemName.Text .. " " .. reward.Holder.Main.Amount.Text,
                                ["value"] = "",
                                ["inline"] = false
                            })
                            print(reward.Holder.Main.ItemName)
                        end
                    end

                    local response = request({
                        Url = GlobalWebhook,
                        Method = 'POST',
                        Headers = {
                            ['Content-Type'] = 'application/json'
                        },
                        Body = HttpService:JSONEncode({
                            ["content"] = "",
                            ["embeds"] = {{
                                ["title"] = "Victory",
                                ["description"] = StageName,
                                ["color"] = 0x00c2ff,
                                ["fields"] = fields,
                                ["footer"] = {
                                    ["text"] = "Zeke Hub - Anime Vanguards",
                                    ["icon_url"] = "https://cdn.discordapp.com/attachments/1288533219586736290/1288573987898523649/logo.png?ex=66f5ad8b&is=66f45c0b&hm=16f7c857406e2e56ae5855e744009450dd20a21c6518acf32b6943648976169a&"
                                }
                            }}
                        })
                    })

                end)
            elseif connections["NotifyVictory"] then
                connections["NotifyVictory"]:Disconnect()
                connections["NotifyVictory"] = nil
            end
        end
    })

    UnitsGroup:AddToggle('autoReplay', {
        Text = "Auto Replay",
        Default = false,
        Callback = function(enabled)
            if enabled then
                if not UnitsFolder then return end
                if PlayerGui.EndScreen.Container.Visible then
                    task.wait(0.1)

                    local args = {[1] = "Retry"}
                    game:GetService("ReplicatedStorage").Networking.EndScreen.VoteEvent:FireServer(unpack(args))
                end

                connections["Replay"] = PlayerGui.EndScreen.Container:GetPropertyChangedSignal("Visible"):Connect(function()
                    task.wait(0.1)

                    local args = {[1] = "Retry"}
                    game:GetService("ReplicatedStorage").Networking.EndScreen.VoteEvent:FireServer(unpack(args))
                end)
            elseif connections["Replay"] then
                connections["Replay"]:Disconnect()  
                connections["Replay"] = nil
            end
        end
    })

    UnitsGroup:AddToggle('autoClaimRewards', {
        Text = "Auto Claim Rewards",
        Default = false,
        Callback = function(enabled)
            if enabled then
                connections["ClaimRewards"] = RunService.Stepped:Connect(function()
                    local viewFrames = PlayerGui:FindFirstChild("ViewFrames")
                    if viewFrames then
                        if viewFrames:FindFirstChild("ViewFrame") then
                            VM1Click(2, Camera.ViewportSize.Y / 2)
                        else
                            print('no ViewFrame')
                        end
                    else
                        print('no viewframes')
                    end
                end)
            elseif connections["ClaimRewards"] then
                connections["ClaimRewards"]:Disconnect()  
                connections["ClaimRewards"] = nil
            end
        end
    })

    MapGroup:AddDropdown('MapDropdown', {
        Values = maps,
        Default = 1,
        Multi = false,
        Text = 'Select Map',
        Callback = function(Value)
            margs[2][1] = Value
        end
    })
    
    MapGroup:AddDropdown('StageDropdown', {
        Values = stages,
        Default = 1,
        Multi = false,
        Text = 'Select Stage',
        Callback = function(Value)
            margs[2][2] = Value
        end
    })
    
    MapGroup:AddDropdown('ActDropdown', {
        Values = acts,
        Default = 1,
        Multi = false,
        Text = 'Select Act',
        Callback = function(Value)
            margs[2][3] = Value
        end
    })
    
    MapGroup:AddDropdown('DifficultyDropdown', {
        Values = difficulties,
        Default = 1,
        Multi = false,
        Text = 'Select Difficulty',
        Callback = function(Value)
            margs[2][4] = Value
        end
    })
    
    
    MapGroup:AddToggle('AutoStageToggle', {
        Text = 'Auto Start Stage',
        Default = false,
        Callback = function(enabled)
            if enabled then
                connections["AutoStage"] = game:GetService("RunService").Stepped:Connect(function()
                    game:GetService("ReplicatedStorage"):WaitForChild("Networking"):WaitForChild("LobbyEvent"):FireServer(unpack(margs))
                end)
            else
                if connections["AutoStage"] then
                    connections["AutoStage"]:Disconnect()
                    connections["AutoStage"] = nil
                end
            end
        end
    })
    
    
    MapGroup:AddToggle('AutoJoinElevator', {
        Text = 'Auto Join Elevator',
        Default = false,
        Callback = function(enabled)
            if enabled then
                connections["AutoJoinElevator"] = game:GetService("RunService").Stepped:Connect(function()
                    local args = {
                        [1] = "Enter",
                        [2] = workspace:WaitForChild("MainLobby"):WaitForChild("Lobby"):WaitForChild("Stories"):WaitForChild("Lobby")
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Networking"):WaitForChild("LobbyEvent"):FireServer(unpack(args))
                    task.wait(3) 
                end)
            else
                if connections["AutoJoinElevator"] then
                    connections["AutoJoinElevator"]:Disconnect()
                    connections["AutoJoinElevator"] = nil
                end
            end
        end
    })
    
    
    MapGroup:AddToggle('AutoClickStartButton', {
        Text = 'Auto Click Start Button',
        Default = false,
        Callback = function(enabled)
            if enabled then
                connections["AutoClickStartButton"] = game:GetService("RunService").Stepped:Connect(function()
                    local miniLobbyUI = PlayerGui:FindFirstChild("MiniLobbyInterface")
    
                    if miniLobbyUI and miniLobbyUI:FindFirstChild("Holder") then
                        local holder = miniLobbyUI.Holder
    
                        if holder.Visible and holder:FindFirstChild("Buttons") and holder.Buttons:FindFirstChild("Start") then
                            local startButton = holder.Buttons.Start.Button
    
                            if startButton and startButton.Visible then
                                local buttonPos = startButton.AbsolutePosition
                                local buttonSize = startButton.AbsoluteSize
    
                                local clickPosX = buttonPos.X + (buttonSize.X / 2)
                                local clickPosY = buttonPos.Y + (buttonSize.Y / 2) + GuiService:GetGuiInset().Y
    
                                VIM:SendMouseButtonEvent(clickPosX, clickPosY, 0, true, game, 0)
                                VIM:SendMouseButtonEvent(clickPosX, clickPosY, 0, false, game, 0)
                            end
                        end
                    end
                    wait(1)
                end)
            else
                if connections["AutoClickStartButton"] then
                    connections["AutoClickStartButton"]:Disconnect()
                    connections["AutoClickStartButton"] = nil
                end
            end
        end
    })

    Library:Notify("Zeke Hub Loaded")
    
end

--------- Init ----------

local function init()
    if not isfolder("ZekeHub") then
        makefolder("ZekeHub")
    end
    if not isfolder("ZekeHub/Anime Vanguards") then
        makefolder("ZekeHub/Anime Vanguards")
    end
    if not isfolder("ZekeHub/Anime Vanguards/Macros") then
        makefolder("ZekeHub/Anime Vanguards/Macros", '')
    end



    buildUI()

    WavesAmount:GetPropertyChangedSignal("Text"):Connect(function()
        print('changed')
    
        if WavesAmount.Text == "1" then

            print('game Started')
            gameStartTime = tick()
            Library:Notify("Game started at: " .. gameStartTime, 2)
            
            if playMacro then
                OnWaveOneDetected()
            end
            
            if RecordingQueued then
                if not AlreadyRecording then
                    AlreadyRecording = true
                else
                    RecordFinished = true
                end
            end
        else
            print('not wave 1')
        end
    end)
end


init()
end

    
